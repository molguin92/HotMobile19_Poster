%!PS-Adobe-3.1 EPSF-3.0
%%Title: kth_pms_comp_science_comm.eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: oscard
%%CreationDate: 05-02-27
%%BoundingBox: 0 0 409 467
%%HiResBoundingBox: 0 0 408.9542 466.1417
%%CropBox: 0 0 408.9542 466.1417
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 2935 CVU)
%%CMYKCustomColor: 1 0.4700 0 0 (PANTONE 2935 CVU)
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 112 128 8
%%BeginData: 25746 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD06FF3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007305AFD0CFF0D0D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D077EFD
%0BFFAF300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D5AFD0CFF070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D2FA9590D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D077EFD0CFF30
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D302FFF7EAF5A300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D2F5AFD0CFF070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D075A
%A8307EA8070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D077EFD0CFF3007300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D845AA92F0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07305AFD0CFF0D0D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D5AA9842F
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D077EFD0CFF3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007305AFFA8FF842F07300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%5AFD0CFF0D0D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D0D0D2F84A8FFA8A9530D0D0D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D077EFD0BFFAF300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D073007
%305AFFA9FFFFFFA9FFFFFFA9AF7E5A0D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D5AFD0C
%FF070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D075AA8FFFFAF5A5A7EFFA85A59A9FFFFA85A07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D077EFD0CFF300D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D7E7E85A9FFA95A0D
%2F07A97EFF0D300D5AA8FFAFA95AA90D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D2F5AFD0CFF070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D7EA9A9FFFF7EFF5A070D070DA8A9FF5A070D072FA984A8FFFFA9A8
%2F070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D077EFD0CFF3007300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D077E7EFFFFA9A9FFFFA9070D07302FAF07
%857E0D0730075AFFFFA9A9AFFF84840D300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D07300D0D07305AFD0CFF0D0D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D072F84FFFF
%5407A92FFF530D070D0730AF5AA884070D070D2FFF2F842F2FA8FFA83007
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D077EFD0CFF3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D5AA8FFFF30073084FFFF5A0D3007305AFF2FA97E2F07
%300D30FFFFAF300730A8FFA8840D3007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007305AFD0CFF0D0D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D847EA85A070D0D842F
%7E7E0D070D077E7E0D53A9070D070D2FA90D842F0D072FA95AA830070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D077EFD
%0BFFAF300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07A9FFA907300D307E2F7EA907300D0D2FFFFFFF7E300D0D0784
%A80D5A7E070D077EFFFF0D300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D5AFD0CFF070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D077E5AAF7E0D070D075AA8FFAF30
%070D077EFD04A82F0D072FA8FFA97E070D070D2FFF5A84070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D077EFD0CFF300D
%3007300D3007300D3007300D3007300D3007300D3007300D3007300D3084
%305A7E07300D302FFF5A85FFFF0D7EFFFF077EFFFF0D85FFFF5AFF7E300D
%30075A7E2F845A0D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D2F5AFD0CFF070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D075AA8FF842F2F0D2FFFFF2F2FFFFF305AFFFF
%84A8FFA80DA9FF7E0D84FF590D2F2F5AFFA884070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D077EFD0CFF3007300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300DA9FD04FF
%2F30FFFFA8A9A8842F30545AA9845A300D5AA9A9A8FFFF5A2FFD05FF2F0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%5AFD0CFF0D0D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D2F5A07FFFF84075A5A7EA85A2FFFFF5A7EFFA85AA8FF2F30
%A8A8535A075AFFFF2F2F5A0D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D077EFD0CFF3007300D3007300D3007300D30
%07300D3007300D3007300D302F300D302F30075A7E85A9A92F857E5AA9FF
%A9A97E7E5A7E5A7E5A7E5AA9A8FFFF845AA92F84A8A97E7E07302F300D30
%2F300D3007300D3007300D3007300D3007300D3007300D3007305AFD0CFF
%0D0D070D070D070D070D070D070D070D070D070D070D070D7EAF7E0D7EA9
%A85A07307EAF2F84FFFF7E5A2F5A535A5A847E7E7E855A5A535A2F5A5AA9
%FFA92FA9A85A072FA8AFA82F5AAFA830070D070D070D070D070D070D070D
%070D070D070D070D077EFD0BFFAF300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D53A90DA97EAF0D5AA830070D5AFF845A2F5A84A92FFD05
%FF5AA9FD04FF5384A87E2F5A7EFF8430070D5AA9077E84A92F7E7E300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D5AFD0CFF070D070D070D
%070D070D070D070D070D070D070D070D075A7E0D7EAF533007A90D0D070D
%075A7EFFFFFFA85A597E2F5A2F7E2F302FFD045AFFFFFFA87E0D0D070D07
%A92F2F2F84A80D2F84070D070D070D070D070D070D070D070D070D070D07
%0D077EFD0CFF300D3007300D3007300D3007300D3007300D3007302F855A
%FF0D2F5AA95AA9A8300D300736A9AFFF8554362F5A5A7E5A857E847E845A
%5A545A2F7EA8FFA98407300D2F5AFF5A847E3007858485302F07300D3007
%300D3007300D3007300D3007300D2F5AFD0CFF070D070D070D070D070D07
%0D070D070D070D070D078484AF7E0D7E7E7EAF5A2F070D070D077E7E302F
%7E84845A5A53302F5A2F302F5A5A847E845A302F842F0D070D070D2FA9A8
%5A7E302FFF7EA90D0D070D070D070D070D070D070D070D070D070D077EFD
%0CFF3007300D0D07300D0D07300D0D07300D0D07300D0DA8300D30A87E07
%5AA87E0D0D07300D0D075AA8842F300D0D07300D0D07300D0D0730072F2F
%7E847E07300D0D07300D3684A90730A85A0D0D845A0D0D07300D0D07300D
%0D07300D0D07300D0D07305AFD0CFF0D0D070D070D070D070D070D070D07
%0D070D070D0784530DA87E2F7E072FA82F070D070D070D072F070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070DA85A075A5330A8
%3007A9070D070D070D070D070D070D070D070D070D070D077EFD0CFF3007
%300D3007300D3007300D3007300D305A300D84A97EA87E07FFA9A9A8850D
%3007300D3007300D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D5AA9A9A9FF2F30FF5AA8A92F2F2F5A0D3007300D3007300D
%3007300D3007305AFD0CFF0D0D070D070D070D070D070D070D070D7EA95A
%0DA9307EA92F0D5AA90730070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D072F075AA82F2F7EA82F84
%5A2FA98430070D070D070D070D070D070D070D077EFD0BFFAF300D0D0730
%0D0D07300D0D07300D0D07A90DA92F84A9855AFFA8AF54300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D2FA9A8FF847EA9A92FFF0D7E2F300D0D07300D0D07300D0D
%07300D0D5AFD0CFF070D070D070D070D070D070D070D070DA884A8A807FF
%84A95A0D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D072F2FAF7EFF595AFF7E
%A830070D070D070D070D070D070D070D077EFD0CFF300D3007300D300730
%0D3007300D3007A9FFFF5A300D5A54300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D2F2F5A2F302FFFFFFF2F300D3007300D3007300D3007300D2F
%5AFD0CFF070D070D070D070D070D070D070D070D07305A2F0784A87E2F0D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D2F7E84AF2F0D595A0D0D070D
%070D070D070D070D070D070D077EFD0CFF3007300D0D07300D0D07300D0D
%07300D305A5A0DA9A9A92FAF53300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%0DFF547EA9FF0D305A300D0D07300D0D07300D0D07300D0D07305AFD0CFF
%0D0D070D070D070D070D070D070D070D84847EA92FAFA87E8430070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D7E7E7EFF535AA87EA830070D070D070D
%070D070D070D070D077EFD0CFF3007300D3007300D3007300D305A5A2FA9
%0730845A5AA95A3007300D3007300D3007300D2F07300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D2F07300D3007305AA9
%7E30A93007855A307E300D3007300D3007300D3007305AFD0CFF0D0D070D
%070D070D070D070D5AA9A8A97E5A0DA9530D070D070D075A2F2F2F302F2F
%07302F2F2F5A0D0D0D302F302F302F302F5A2F2F0D0D0D302F302F302F30
%070D2F5A2F2F2F5A2F0D070D070D07AF2F5A7E84A8A97E0D070D070D070D
%070D070D077EFD0BFFAF300D0D07300D0D07300D0D07AF2F30FF8584A97E
%300D0D07300D3053A9FFFFA97E2F0D53FFFFAF5A300DFFFFAF7E84A8FFA8
%847EAFFFFF07305AA9FFFFFF842F300D5A7EFFFFFF845A0D0D07300D0D2F
%FF8484A97E07FF2F300D0D07300D0D07300D0D5AFD0CFF070D070D070D07
%0D070D070D5AA8070D5984A8847E2F070D070D070D07FFFF5A070D072FFF
%84070D072FFF7E070D075AFF5A070D0784FF0D070D07FFFF5A070D070D07
%0D5AFFA80D070D070D070D5984A8847E0D075AA80D070D070D070D070D07
%0D077EFD0CFF300D3007300D3007300D300730A97E07AF0D302FFF5A2F07
%300D30073084FF2F300D30A884073007302FA907300D2F5AFF5A2F07300D
%A92F300D2FA8FF2F2F07300D30075AFF8507300D3007300DFF2F5A07A92F
%30A95A07300D3007300D3007300D2F5AFD0CFF070D070D070D070D070D07
%2F7EFF845A7E0D2F5AA830070D070D070D0784FF30070D7E7E070D070D07
%302F0D070D075AFF5A070D070D2F2F070D07A9FF30070D070D070D2FFF5A
%0D070D070D070D847E2F30537E59FF8430070D070D070D070D070D077EFD
%0CFF3007300D0D07300D0D07305AAF2F30845AA8FF7E5A07300D0D07300D
%0D7EFF2F0D7E84070D07300D0D07300D0D07305AFF5A300D0D07300D0D07
%30A8FF2F300D0D0730075AFF7E070D07300D0D07307EA9FF5AA8302F84A8
%0D07300D0D07300D0D07305AFD0CFF0D0D070D070D070D070D075AA80D07
%AF075AA85A070D070D070D070D0784FF305A84070D070D070D070D070D07
%0D077EFF5A070D070D070D070D07A9FF2F070D070D070D2FFF590D070D07
%0D070D070DA88407842F075A84070D070D070D070D070D077EFD0CFF3007
%300D3007300D3007300D7E845A842F2FFF5A2F07300D3007300D2F7EFF7E
%FFA8300D3007300D3007300D3007305AFF5A300D3007300D300730A8FFA8
%A9A8A9A8A9A8FFFF84073007300D3007302FFF2F305A845AAF0D3007300D
%3007300D3007305AFD0CFF0D0D070D070D070D070D070D2FFF7EA97EA95A
%0D070D070D070D070D0784FF7EA9FF840D070D070D070D070D070D077EFF
%5A070D070D070D070D07A9FF5A2F5A2F5A2F5A7EFF5A0D070D070D070D07
%0D2FA8A87E84A97E0D070D070D070D070D070D077EFD0BFFAF300D0D0730
%0D0D07300D0D07FF5A845AFF5A0D07300D0D07300D0D07307EFF2F30FFFF
%7E300D0D07300D0D07300D0D5AFF5A0D07300D0D07300D0DA8FF2F0D0730
%070D075AFF7E07300D0D07300D0D07302FFF5AA92FFF2F300D0D07300D0D
%07300D0D5AFD0CFF070D070D070D070D072F2F0D2FA9FFA9A85A070D070D
%070D070D070D0784FF30075AFFFF5A0D070D070D070D070D075AFF5A070D
%070D070D070D07A9FF30070D070D070D2FFF5A0D070D070D070D070D070D
%A8A9A8FF590D2F30070D070D070D070D077EFD0CFF300D3007300D300730
%7EA9A85A2FA95A5A5A7E0D300D3007300D30073084FF2F30075AFFFF5A2F
%07300D3007300D2F5AFF5A2F07300D3007300D30A8FF2F2F07300D30075A
%FF8407300D3007300D300D5A5A5A2FA9543684A9A83007300D3007300D2F
%5AFD0CFF070D070D070D070D07A92F5AFF5A075AFF7E7E84070D070D070D
%070D07A9FF30070D075AFFFF5A0D070D070D070D077EFF7E070D070D070D
%070D07A9FF30070D070D070D2FFF7E0D070D070D070D075AA85AA984070D
%A9A907AF0D0D070D070D070D077EFD0CFF3007300D0D07300D0D2FFFA8FF
%5A30A8FF53A95A0D07300D0D07300730A9FF7E0D07300784FFFF5A0D0730
%0D0D0730A9FFA830070D07300D0D0730FFFF5A30070D07300DA9FFFF0D0D
%07300D0D07302FAF2FA9FF302FFFA8FF5A300D0D07300D0D07305AFD0CFF
%0D0D070D070D070D070D59FF7E30077EA8FF7E0D070D070D070D077EA8FF
%A8FF7E5A070D075AA8FF8430070D0D7E84FFA9FF847E0D0D070D0D7EA8FF
%A9FF7E5A070D53A9FFFFA8A9590D070D070D070D2FFFFFA92F2F59A9840D
%070D070D070D070D077EFD0CFF3007300D3007300D3007300D307EA95A5A
%5A300D3007300D3007302F300D300D302F300D3007302F5A2F300D302F30
%0D300D302F3007300D302F300D300D302F300D362F300D302F300D300D30
%07300D2F2F7E5AA9845A0D3007300D3007300D3007305AFD0CFF0D0D070D
%070D070D070D070D847E2FA95A07070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D0DAF2F5AA830070D070D070D
%070D070D077EFD0BFFAF300D0D07300D0D07300D0D07FF2F0D53A9070D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%30075A84300DA92F300D0D07300D0D07300D0D5AFD0CFF070D070D070D07
%0D070D070D5A7E5384537E2F0D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D07842FA8537E7E0D070D070D070D070D07
%0D077EFD0CFF300D3007300D3007300D84A9AFA87E84FF84AF2F300D3007
%300D302F5A0D302F302F5A5A360D5A2F5A30302F5A5A30075A2F2F2F300D
%305A5A0D302F302F5A07302F3607302F5A2F300D3007300D3007A984FFA8
%8584AFA8AF0D3007300D3007300D2F5AFD0CFF070D070D070D070D0730A8
%307E5A7E302F0DA85A070D070D070D075AA80D2FFF07A9A87E2F307EFFA8
%5A0DFF7E840D0DFFFF0784590DA8A9AF5A0DAF2FFF5A0D07FFA90D07A9A8
%AF5A0D070D070D070DA830072F5A5A7E547E7E070D070D070D070D077EFD
%0CFF3007300D0D07300D0D0DFF2F0D07A92F3084840D0D07300D0D07300D
%FF2FA97E0DA8A95A30072FA97E0730FF7E5A300DFFA97E7E5A0DFF7E5A2F
%30A9FF7E30075AA8FF2F0DA88484AF07300D0D07300D5AA85A07A90D2F07
%A954300D0D07300D0D07305AFD0CFF0D0D070D070D070D070D2FFF7E2F59
%5AA8FF2F0D070D070D070D070D7E84A83007A8A8842F0D07AF5A0D07FF7E
%7E072FA85AA8A9530D2F84A85A07FFFF7E070D7EA8A88407A8A8A92F0D07
%0D070D070D2FA9FF30842F59A97E0D070D070D070D070D077EFD0CFF3007
%300D3007300D3007302FFFA87E7E5A5AFF2F2F07300D3007300D5AFFAF0D
%2FA8A930360730FF7E0730FF7E2F300DFF2FA9FF5A2FFF2FFF7E30FF5AFF
%5A2FFF7EA9FF30A87E072F0D300D3007300DFF7E7E30855AFF5A2F07300D
%3007300D3007305AFD0CFF0D0D070D070D070D070D078484302FA9072FA8
%30070D070D070D070D07842F0D075A7EA95A0D077E2F0D07847E842F0D7E
%2F0DA92F0D5AA97E2F0784075A5A305A0D07840D5A2F0D070D070D070D07
%0DA87E077E5A2F7EA9070D070D070D070D070D077EFD0BFFAF300D0D0730
%0D0D07300D0D7E85070DA85AFF5A07300D0D07300D0D0730070D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730070D0730
%0D0D07300D0D07300D0D07300D0D0730A95A7E5A075AA9300D0D07300D0D
%07300D0D5AFD0CFF070D070D070D070D070D072F7EA95AA87EAF5A0D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D2FFF
%7EA959A9A854070D070D070D070D070D077EFD0CFF300D3007300D300730
%0D30073054FF5AA95AA90D85543007300D3007305A842F300D367E5A0D30
%54302F5A0D300D305A305A5A07367E5A0730305A073630300D7E7E30077E
%5A7E5A300D3007302F852F5AA87E7EA97E2F07300D3007300D3007300D2F
%5AFD0CFF070D070D070D070D070D070D075AA97EFFAF2F845AA90D0D070D
%070DA8A97EFF0730FF84A95A0DFF075AFF0D070D2FFF53FF2F2FA884A884
%07A9FF5459A90784A8A9840D5AFFA85A070D070D07847EA82F7EFFA8A884
%070D070D070D070D070D070D077EFD0CFF3007300D0D07300D0D07300D0D
%075A5A842FA9A93084300D0D07302FFF0D2FAF5A5AFF07302F30FF8484FF
%0D0D075AFFFF2F2F7EAF075AFF0D7EAF847E842FA8FF5A5A0D0D7E84070D
%07300D0D7E5A7EFF2FA95A5A07300D0D07300D0D07300D0D07305AFD0CFF
%0D0D070D070D070D070D070D075A535A070D84FFA984070D070D0730FF0D
%07FF2F5AA80D072F07FF5A84A80D070D2FFFAF7E0784A8070DFF07842FA8
%A88407305AA9A80D07845A0D070D070D075AFFA9FF2F075A595A2F0D070D
%070D070D070D070D077EFD0CFF3007300D3007300D3007300DA95A85FF84
%078484A92F300D3007300DFF8485FF302FFF7EFF5A30FF3054FF0D30075A
%FF5AFF5A2FFF5AAFA82FA85A2FFF8430A9847EFF0D2F84A9073007300D30
%0DA97EA90D5AFFA954FF2F3007300D3007300D3007305AFD0CFF0D0D070D
%070D070D070D070D7E7E2FAFA8302F845A0D070D070D070D0D847E30070D
%2FA95A0D077E072F590D070D0D7E075A590D2F845A2F075A2F0D5A5A0730
%7E842F0D075A2F0D070D070D070D2F84590D84AF5A548430070D070D070D
%070D070D077EFD0BFFAF300D0D07300D0D07300D0D07305AFFFF5A2FFF5A
%AF5A0D5A360D0D0730070D07300D0D07300D0D07300D0D07300D0D073007
%0D0730070D0730070D0730072F0730070D0730070D07300D2F5A302FAF5A
%A97E2FA8FF843007300D0D07300D0D07300D0D5AFD0CFF070D070D070D07
%0D070D070D070D2F2F07A92F072FA85AFFA830070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D7EAF7E7E5A0707AF0D0D2F0D070D070D070D070D070D07
%0D077EFD0CFF300D3007300D3007300D3007300D3007307E842F7EA8FF0D
%A95A2F07300D3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007300D3007300DFF0DA9FF7E5A5AA93007
%300D3007300D3007300D3007300D2F5AFD0CFF070D070D070D070D070D07
%0D070D070D070D7EA87E7E2F0DA830070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D7E5A075A7E84A830070D070D070D070D070D070D070D070D077EFD
%0CFF3007300D0D07300D0D07300D0D07300D0D2F84FF7E842F5AFFA87E0D
%0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D36A8FFA80D5A84A9A953300D0D07300D
%0D07300D0D07300D0D07305AFD0CFF0D0D070D070D070D070D070D070D07
%0D07A9595A075A7E30845AA82F070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D7E7E7E
%5A53A8073053A92F0D070D070D070D070D070D070D070D077EFD0CFF3007
%300D3007300D3007300D3007300D30A85A07360DA9842F0DAF0D300D5A0D
%3007300D3007300D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D362F3007845A2F30FF0D5A0D30A85A0D3007300D3007300D
%3007300D3007305AFD0CFF0D0D070D070D070D070D070D070D070D0730A8
%A984AF2FA95A30FF7E077EA884070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D075AA8A9075AA97E2FFF2F84A8
%A9A87E070D070D070D070D070D070D070D070D077EFD0BFFAF300D0D0730
%0D0D07300D0D07300D0D07300D2F077EA80D07AF845AA85A843084300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D7E5A5A5AA8845AFF2F2F7EA90D300D0D07300D0D07300D0D07300D0D
%07300D0D5AFD0CFF070D070D070D070D070D070D070D070D070D070D5AA9
%2F7E59A95A8459FF53FF2F0D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D07AF5AA97E7E59A97E7E537EA80D070D
%070D070D070D070D070D070D070D070D077EFD0CFF300D3007300D300730
%0D3007300D3007300D3007305AA97EFF2FFFA85AFFFFFF360D3007300D30
%0D300D3007300D3007300D3007300D3007300D3007300D300D300D2FA8FF
%FF7E5AFF5A85A8857E3007300D3007300D3007300D3007300D3007300D2F
%5AFD0CFF070D070D070D070D070D070D070D070D070D070D070D070D7EFF
%5A2F077E7E302F2F07A8A884070D070D070D070D070D070D070D070D070D
%070D070D075AA8AF2F0D2F305AA9072F2FA9A82F070D070D070D070D070D
%070D070D070D070D070D070D077EFD0CFF3007300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D075A7E300730A8A9A85AA830A8360D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0DA85A845A7EFFA95A07305A5A
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07305AFD0CFF
%0D0D070D070D070D070D070D070D070D070D070D070D070D077EA8FFA82F
%7E7E075AA8A907845AFF7E0D07300D0D2F2F070D070D2F0D0730070D53FF
%7EA8077EFFA80730A82F84FFFFA82F0D070D070D070D070D070D070D070D
%070D070D070D070D077EFD0CFF3007300D3007300D3007300D3007300D30
%07300D30073007847E30A8A90DFF2F2F07A9542F5AFF5AA92F305AA97E5A
%A87E075AA97E5AAF5A300DAF30FFA8300DA92F3007FF2F85A95A2FFF0D30
%07300D3007300D3007300D3007300D3007300D3007305AFD0CFF0D0D070D
%070D070D070D070D070D070D070D070D070D070D2FA87EFF7E0D5AAF5A5A
%597E2F2F2F0D5AA9843007A9590D847EA8360DA92F0D84A9840D2F302F7E
%5A5A5AA9840D2FFFA8847E0D070D070D070D070D070D070D070D070D070D
%070D070D077EFD0BFFAF300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D07302F302F300D0D2F7EFF5A2F84847E2F5AA884842F0DA95330FF
%7E07FF2F2F5AA9845A2F7E84842F30FF845A300D0D2F302F0D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D5AFD0CFF070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D59A92F070D
%305AA87E845AA92F0D07A8A85A7EAF2F0D07A87E7E7EA85A302F0D07A87E
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D077EFD0CFF300D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D302FFF2F2F7EFF842F07857EA9FFA95A2F84FF2FA9FF300D
%A9A8FF5AA92F2F5AFFA83007FF5A300D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D2F5AFD0CFF070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D5AA9A8A85AA90784A8
%A9845A070D7E7E2FFF5A30A830072FA884A9AF0D5A847EA8A9842F070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D077EFD
%0CFF3007300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D2F5A0730A8FF7E0D5A7E072F7EA90D8484A92F5AA830075A84
%305AFFA87E07302F300D0D07300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07305AFD0CFF0D0D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D0D0D070D07307E
%5A0D7E5A0D2F842F5A7E5A070D070D0D2F070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D077EFD0CFF3007
%300D3007300D3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007300D2F07300D3007300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007305AFD0CFF0D0D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D077EFD0BFFAF300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D5AFD0CFF070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D077EFD0CFF300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D2F
%5AFD0CFF84A984A884A984A884A984A884A984A884A984A884A984A884A9
%84A884A984A884A984A884A984A884A984A884A984A884A984A884A984A8
%84A984A884A984A884A984A884A984A884A984A884A984A884A984A884A9
%84A884A984A884A984A884A984AFFDFCFFFDFCFFFDFCFFFDFCFFFD5EFFA8
%FD17FF7DA8FF7D7DFF7D527D5252A8FF52A8FF7D7DFD06FF7D2752A8FD2E
%FFA852527DFD07FFA852A8FD18FFF8527DF827FF5227F8F8F8A87DF87DFF
%F8F8FD05FF52F827F8F8A8FD1BFFA8527DFD0FFFFD04F852FD06FFA8F87D
%FD14FFA8FFFFFFF8272727FD04FFF827FFFFA8F87DA827F8FD05FFF852FF
%A852A8FF7D27277DFFA82727277D52F8A8FF7D275227A8FF7D27FF277DFF
%27F827A8FF522727FFFF7D2727A8FFFFFFA8F8F87D52A8FFA8272752FFA8
%277DFF7D52277DFFFF2752F87DFFFF522727A8FFA8272752FFFFF8F8F852
%FD04FFF827FFFF7DFD04F827A8FFFFFF7DF852FD04FFA8F85252F8A8A8F8
%52F8F852F8F8FF27F87DF827FF27F8A8F827FF52F827FF52F827F827FFF8
%F827FD05FF5227F8277DFFF8F85227A8A8F87DFFF8F827F8A8A8F82727F8
%FF7DF8525252FFF8F827F87DFFF85252F8A8FFFFFFF827FFFFA8F87DFF27
%F8FD05FFF852FFA827FF7DF8A8A8F8A8A8F8A87DF8FFF827FF52F8FF2727
%FF52F8FFF852FFA8F8A8FF52F8522752FF2727FD05FFA852A87DF852FFF8
%27FF7DFFA8F87DFFF8275227A8FFF8A87DF8FF7DF8FFA8A8FF272752F8A8
%FFF852A8F8F8FFFFFFF827FFFF7DF87DFFF8F8A8FD04FF52F827F8F8A8FF
%F827F8F8A8A8F8A852F8A8F8F8FF27F827F827FF52F8F8F827FF7DF8F8FF
%7DF827F852FFF827FD05FFA8FD04F852FF27F8F8F8A8A8F87DFF27F827F8
%FFA8F87D7DF8FFA8F8F8F827FF27F827F8A8FF7DA8FF7D7DA8FFFF7D7DFF
%FFFF7DFFFFA87DFD06FF7D527DA8FFFFFF527DA8FFA87DA8A87DFF7DA8FF
%52F87D52FFFFFF527D7DA8FFFF7D52A8FF7D527DFFFFA87DFD06FFA8527D
%7DFFFFFF7D52A8FFFF7DA8FFFF7D52A8FFFF7DFFA87DA8FFA8527DFFFFFF
%527DA8FD2EFF5227FD2AFFA8FDA5FFA8FD66FF7D27A8FD05FF27F8F827A8
%FD24FF5227FD0DFFA8A8FFFF277DFD1DFFA87DA8FFFD05A8FFFFFF7D52F8
%A8FD04FF27F87D7DF87DFFFF7D7DA8FFFFFD05A87DFFFFFFA8A87DFF7DA8
%FFFFA8A8FFA8A8FFA8A87DA8FFFF7D7DA8FFA87D7DFFFFFF7D7DA8FFA827
%F8FFFF7D7DFFFFA87DA8FFFFA8A87DA8FD11FF7D272727FFFFF827F827FF
%FFF82727F8A8FD04FFF827FD05FF52F8F827A8FFF827F82727F827FF7DF8
%F8F82727F87DFF2727FFF87DFF52F827F87DFF5227FFA827F8F852FF5227
%2727FF7DF8F87DFFF852FFA8F827F87DFF52F827F87DFD10FF7DF827F8A8
%A8F8527DF8A87DF8A87DF8A8FD04FFF827FD04FFA8F852FFF87DFFF8277D
%F87D27F8FF7DF8A827F8A8F827FF2727FFF852FF27277DF852FF27F8FF52
%F8A87D7DFF7D2727F8A8FFF827FFA8F827FF27F8FF27F8FF27F8A8F827FD
%10FFF82752F8A8FFF87D7DF8A8A8F8A87DF8A8FD04FF52F8A852F87DFFF8
%52A8F852FFF852A8F8A87DF8FF7DF8A852F8FFF852FF27F8A8F87DFF2727
%FFF87DFF27F8FF52F8A85252FFF82727F8A8FFF827FFFFF852FF52F8FFF8
%27FF52F8FFF852FD10FF52F827F8A8A8F8527DF8A8FF27F827F8A8FD04FF
%A827F8F827FFFF7DF8F8F8FFA8F852A8F8A852F8FF7DF8A82727A8F827FF
%7DF8F8F852FF2727A8F852FF27F8A8FFF8F8F87DFF27F827F8A8FF52F87D
%FFF827FFA827F8F87DFF27F8A82727FD08FFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: kth_pms_comp_science_comm.eps 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-01-31T16:14:18Z</xap:CreateDate>
  <xap:ModifyDate>2005-02-27T21:46:18Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>228</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADkAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8L/5yj/3i8u/8ZLr&#xA;/iMWbzsXnL4fpdR2tyj8Xz9m/dI7FXYq7FXYq7FXYq7FXYq7FXYqvhhlmlSGFGklkYJHGoJZmY0A&#xA;AHUk4Ca3KQL2R+t+Xdd0K4S21ixlsZ5U9SNJl4llrSo+kZDHmhMXE2zyYpQNSFJbljW7FXYq7FXY&#xA;q7FXYq7FXYq7FXYqyX8tP/Jg+Xf+2hb/APJwZjaz+5l/VLkaT+9j732hnGvVOxV2KvC/+co/94vL&#xA;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&#xA;SMSWZmtIyWJPUk4qyjFXYq//2Q==</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -466.142 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 466.142 li
408.955 466.142 li
408.955 0 li
clp
[1 0 0 1 0 0 ] concat
390.877 368.504 mo
22.3726 368.504 li
22.3726 0 li
390.877 0 li
390.877 368.504 li
false sop
/0 
<<
/Name (PANTONE 2935 CVU)
/0 
[/DeviceCMYK] add_csa
/CSA /0 
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/NComponents 4 
/Components [ 1 0.47 0 0 ] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
171.754 152.536 mo
171.754 153.663 li
163.174 154.567 157.059 161.67 151.492 167.461 cv
145.078 174.022 li
160.518 191.208 li
167.795 198.645 170.846 202.659 176.971 202.926 cv
176.951 204.077 li
164.34 205.616 161.232 202.295 154.16 194.545 cv
138.811 177.844 li
150.514 165.356 li
158.414 156.477 157.307 154.19 152.266 153.663 cv
152.266 152.536 li
171.754 152.536 li
cp
137.764 191.407 mo
137.99 199.157 138.064 201.415 147.772 202.618 cv
147.772 203.747 li
121.814 203.747 li
121.814 202.618 li
130.842 201.415 130.918 199.157 131.143 191.407 cv
131.143 164.922 li
130.918 157.172 130.842 154.917 121.814 153.711 cv
121.814 152.584 li
145.74 152.584 li
145.74 153.711 li
138.064 154.917 137.99 157.172 137.764 164.922 cv
137.764 191.407 li
0 0 0 0 cmyk
f
225.352 152.504 mo
226.25 166.321 li
225.196 166.547 li
222.565 157.217 218.426 154.84 209.775 154.84 cv
205.26 154.84 li
205.26 189.602 li
205.26 198.93 205.711 201.415 215.792 202.618 cv
215.792 203.747 li
188.107 203.747 li
188.107 202.618 li
198.188 201.415 198.639 198.93 198.639 189.602 cv
198.639 154.84 li
194.125 154.84 li
185.473 154.84 181.334 157.217 178.701 166.547 cv
177.648 166.321 li
178.522 152.504 li
225.352 152.504 li
f
248.756 191.407 mo
248.756 199.684 248.907 201.188 258.764 202.618 cv
258.764 203.747 li
232.807 203.747 li
232.807 202.618 li
241.834 201.415 241.911 199.157 242.135 191.407 cv
242.135 164.922 li
241.911 157.172 241.834 154.917 232.807 153.711 cv
232.807 152.584 li
258.764 152.584 li
258.764 153.711 li
248.907 155.143 248.756 156.647 248.756 164.922 cv
248.756 175.833 li
276.956 175.833 li
276.956 164.922 li
276.956 156.647 276.805 155.143 266.948 153.711 cv
266.948 152.584 li
292.907 152.584 li
292.907 153.711 li
283.877 154.917 283.803 157.172 283.577 164.922 cv
283.577 191.407 li
283.803 199.157 283.877 201.415 292.907 202.618 cv
292.907 203.747 li
266.948 203.747 li
266.948 202.618 li
276.805 201.188 276.956 199.684 276.956 191.407 cv
276.956 178.993 li
248.756 178.993 li
248.756 191.407 li
f
180.666 320.895 mo
180.666 320.895 185.566 320.846 190.316 325.596 cv
195.067 330.346 203.927 340.889 206.968 343.997 cv
213.715 350.897 218.667 347.997 218.667 347.997 cv
218.667 347.997 214.067 347.698 210.119 343.747 cv
206.218 339.846 195.317 327.196 192.167 324.045 cv
186.267 318.145 180.666 320.895 180.666 320.895 cv
f
191.491 320.895 mo
191.491 320.895 196.392 320.846 201.143 325.596 cv
205.893 330.346 214.75 340.889 217.792 343.997 cv
224.543 350.897 229.493 347.997 229.493 347.997 cv
229.493 347.997 224.891 347.698 220.942 343.747 cv
217.042 339.846 206.143 327.196 202.992 324.045 cv
197.092 318.145 191.491 320.895 191.491 320.895 cv
f
232.069 320.895 mo
232.069 320.895 227.168 320.846 222.417 325.596 cv
217.667 330.346 208.809 340.889 205.768 343.997 cv
199.017 350.897 194.066 347.997 194.066 347.997 cv
194.066 347.997 198.667 347.698 202.617 343.747 cv
206.518 339.846 217.417 327.196 220.567 324.045 cv
226.467 318.145 232.069 320.895 232.069 320.895 cv
f
221.243 320.895 mo
221.243 320.895 216.34 320.846 211.591 325.596 cv
206.843 330.346 197.983 340.889 194.941 343.997 cv
188.191 350.897 183.241 347.997 183.241 347.997 cv
183.241 347.997 187.842 347.698 191.792 343.747 cv
195.692 339.846 206.593 327.196 209.744 324.045 cv
215.641 318.145 221.243 320.895 221.243 320.895 cv
f
2.5562 lw
1 lc
0 lj
4 ml
[] 0 dsh
true sadj
246.473 111.591 mo
233.844 106.912 220.512 104.537 206.846 104.537 cv
205.953 104.537 li
192.285 104.537 178.953 106.912 166.324 111.591 cv
@
124.123 221.566 mo
128.135 221.566 li
132.596 235.067 li
132.642 235.067 li
137.128 221.566 li
140.758 221.566 li
134.447 238.698 li
130.437 238.698 li
124.123 221.566 li
f
145.946 221.566 mo
157.43 221.566 li
157.43 224.417 li
149.625 224.417 li
149.625 228.424 li
156.933 228.424 li
156.933 231.272 li
149.625 231.272 li
149.625 235.85 li
157.692 235.85 li
157.692 238.698 li
145.946 238.698 li
145.946 221.566 li
f
162.855 221.566 mo
176.735 221.566 li
176.735 224.417 li
171.635 224.417 li
171.635 238.698 li
167.956 238.698 li
167.956 224.417 li
162.855 224.417 li
162.855 221.566 li
f
181.944 221.566 mo
193.427 221.566 li
193.427 224.417 li
185.621 224.417 li
185.621 228.424 li
192.93 228.424 li
192.93 231.272 li
185.621 231.272 li
185.621 235.85 li
193.688 235.85 li
193.688 238.698 li
181.944 238.698 li
181.944 221.566 li
f
210.867 238.698 mo
204.105 224.461 li
204.06 224.506 li
204.06 238.698 li
200.618 238.698 li
200.618 221.566 li
206.075 221.566 li
212.597 235.042 li
212.644 234.995 li
212.644 221.566 li
216.084 221.566 li
216.084 238.698 li
210.867 238.698 li
f
231.606 226.452 mo
231.463 224.721 230.536 223.868 228.76 223.868 cv
227.407 223.868 226.032 224.581 226.032 226.077 cv
226.032 227.924 227.692 228.139 229.163 228.495 cv
231.77 229.159 235.618 229.893 235.618 233.334 cv
235.618 237.581 231.915 239.049 228.235 239.049 cv
224.325 239.049 221.543 237.534 221.667 233.217 cv
225.411 233.217 li
225.274 235.116 226.364 236.393 228.286 236.393 cv
229.754 236.393 231.7 235.946 231.7 234.116 cv
231.7 232.1 229.258 231.959 227.79 231.581 cv
225.391 230.983 222.114 229.893 222.114 226.858 cv
222.114 222.944 225.721 221.211 229.235 221.211 cv
232.555 221.211 235.141 223.014 235.141 226.452 cv
231.606 226.452 li
f
244.86 228.971 mo
244.907 228.971 li
250.602 221.566 li
254.899 221.566 li
248.608 229.231 li
255.446 238.698 li
250.864 238.698 li
244.907 229.967 li
244.86 229.967 li
244.86 238.698 li
241.182 238.698 li
241.182 221.566 li
244.86 221.566 li
244.86 228.971 li
f
269.032 232.219 mo
266.68 224.913 li
266.635 224.913 li
264.12 232.219 li
269.032 232.219 li
cp
258.377 238.698 mo
264.567 221.566 li
268.936 221.566 li
274.891 238.698 li
271.19 238.698 li
269.958 235.067 li
263.17 235.067 li
261.887 238.698 li
258.377 238.698 li
f
283.104 229.252 mo
285.145 229.159 287.805 229.87 287.805 226.833 cv
287.805 223.795 285.145 224.506 283.104 224.417 cv
283.104 229.252 li
cp
279.424 238.698 mo
279.424 221.566 li
284.715 221.566 li
288.512 221.59 291.717 222.491 291.717 226.833 cv
291.717 229.944 289.604 231.981 285.784 232.1 cv
283.104 232.1 li
283.104 238.698 li
279.424 238.698 li
f
129.469 258.803 mo
129.469 261.745 130.157 265.065 133.787 265.065 cv
137.418 265.065 138.105 261.745 138.105 258.803 cv
138.105 255.858 137.418 252.538 133.787 252.538 cv
130.157 252.538 129.469 255.858 129.469 258.803 cv
cp
125.553 258.803 mo
125.553 253.75 128.115 249.879 133.787 249.879 cv
139.458 249.879 142.02 253.75 142.02 258.803 cv
142.02 263.854 139.458 267.723 133.787 267.723 cv
128.115 267.723 125.553 263.854 125.553 258.803 cv
f
157.353 255.788 mo
157.374 253.987 156.285 252.538 154.077 252.538 cv
151.467 252.538 150.805 256.407 150.805 258.803 cv
150.805 261.198 151.467 265.065 154.077 265.065 cv
156.285 265.065 157.374 263.616 157.353 261.815 cv
161.267 261.815 li
161.102 266.112 158.018 267.723 154.077 267.723 cv
149.118 267.723 146.889 263.807 146.889 258.803 cv
146.889 253.795 149.118 249.879 154.077 249.879 cv
158.018 249.879 161.102 251.491 161.267 255.788 cv
157.353 255.788 li
f
166.86 267.366 mo
166.86 250.237 li
170.537 250.237 li
170.537 256.999 li
177.015 256.999 li
177.015 250.237 li
180.739 250.237 li
180.739 267.366 li
177.063 267.366 li
177.063 259.844 li
170.537 259.844 li
170.537 267.366 li
166.86 267.366 li
f
199.854 257.639 mo
199.901 257.639 li
205.598 250.237 li
209.893 250.237 li
203.603 257.901 li
210.436 267.366 li
205.857 267.366 li
199.901 258.635 li
199.854 258.635 li
199.854 267.366 li
196.177 267.366 li
196.177 250.237 li
199.854 250.237 li
199.854 257.639 li
f
217.215 258.803 mo
217.215 261.745 217.899 265.065 221.536 265.065 cv
225.167 265.065 225.852 261.745 225.852 258.803 cv
225.852 255.858 225.167 252.538 221.536 252.538 cv
217.899 252.538 217.215 255.858 217.215 258.803 cv
cp
213.304 258.803 mo
213.304 253.75 215.864 249.879 221.536 249.879 cv
227.204 249.879 229.766 253.75 229.766 258.803 cv
229.766 263.854 227.204 267.723 221.536 267.723 cv
215.864 267.723 213.304 263.854 213.304 258.803 cv
f
245.309 267.366 mo
238.543 253.131 li
238.499 253.178 li
238.499 267.366 li
235.061 267.366 li
235.061 250.237 li
240.516 250.237 li
247.04 263.713 li
247.088 263.665 li
247.088 250.237 li
250.528 250.237 li
250.528 267.366 li
245.309 267.366 li
f
266.293 255.124 mo
266.151 253.393 265.223 252.538 263.448 252.538 cv
262.094 252.538 260.719 253.252 260.719 254.745 cv
260.719 256.594 262.379 256.809 263.85 257.165 cv
266.461 257.827 270.305 258.565 270.305 262.006 cv
270.305 266.25 266.602 267.723 262.926 267.723 cv
259.012 267.723 256.231 266.206 256.352 261.885 cv
260.102 261.885 li
259.961 263.784 261.051 265.065 262.973 265.065 cv
264.444 265.065 266.387 264.616 266.387 262.788 cv
266.387 260.772 263.946 260.627 262.477 260.25 cv
260.079 259.655 256.801 258.565 256.801 255.526 cv
256.801 251.614 260.409 249.879 263.922 249.879 cv
267.243 249.879 269.829 251.682 269.829 255.124 cv
266.293 255.124 li
f
274.674 250.237 mo
288.555 250.237 li
288.555 253.084 li
283.458 253.084 li
283.458 267.366 li
279.778 267.366 li
279.778 253.084 li
274.674 253.084 li
274.674 250.237 li
f
219.958 82.2794 mo
219.974 82.3135 219.996 82.3448 220.013 82.379 cv
220.033 82.3555 220.052 82.334 220.072 82.3106 cv
219.958 82.2794 li
f
267.08 87.8663 mo
266.351 89.7286 264.242 90.6553 262.38 89.9278 cv
261.474 89.5762 260.761 88.8956 260.371 88.0108 cv
260.164 87.5411 260.06 87.044 260.06 86.546 cv
260.06 86.1006 260.144 85.6534 260.31 85.2247 cv
261.041 83.3633 263.15 82.4376 265.015 83.1612 cv
266.875 83.8868 267.8 85.9981 267.08 87.8663 cv
cp
252.591 93.5118 mo
249.882 92.4571 247.978 90.2266 247.234 87.6309 cv
245.212 89.4278 242.404 90.2872 239.558 89.7305 cv
236.503 89.1309 234.503 86.1602 235.107 83.1075 cv
235.164 82.8223 235.431 81.7129 235.558 81.3028 cv
235.962 83.4336 237.607 85.2129 239.859 85.6544 cv
242.824 86.2364 245.712 84.293 246.291 81.334 cv
246.875 78.3711 244.931 75.4864 241.968 74.9063 cv
241.656 74.8414 241.311 74.9024 240.982 74.9014 cv
241.076 74.6456 241.183 74.3526 241.183 74.3526 cv
241.311 73.7032 241.311 73.0586 241.211 72.4405 cv
243.917 71.7154 245.918 69.2525 245.918 66.3223 cv
245.918 63.9688 244.625 61.9141 242.714 60.8213 cv
244.298 59.9044 245.38 58.209 245.38 56.25 cv
245.38 53.4976 243.261 51.2554 240.574 51.0035 cv
240.675 50.8589 240.759 50.7042 240.843 50.5489 cv
252.203 54.17 258.095 59.6651 260.787 65.1495 cv
260.929 65.6876 261.144 66.1963 261.447 66.6465 cv
262.562 69.5079 262.863 72.3184 262.668 74.8067 cv
262.83 75.1456 li
262.892 75.8379 263.076 76.4942 263.359 77.0977 cv
263.312 77.1192 263.272 77.1519 263.226 77.1744 cv
263.011 77.2808 262.802 77.3985 262.603 77.5323 cv
262.493 77.606 262.388 77.6866 262.284 77.7681 cv
262.154 77.8697 262.029 77.9776 261.908 78.0918 cv
261.755 78.233 261.615 78.3834 261.478 78.5425 cv
261.406 78.6285 261.337 78.7168 261.27 78.8077 cv
261.115 79.0147 260.976 79.2334 260.849 79.4654 cv
260.809 79.5401 260.771 79.6158 260.734 79.6929 cv
260.67 79.8243 260.59 79.9434 260.537 80.0821 cv
260.537 80.0821 260.469 80.3755 260.417 80.6412 cv
260.132 80.4649 259.88 80.2325 259.578 80.1163 cv
258.517 79.7032 257.309 79.4463 256.136 79.4888 cv
254.185 79.5528 252.327 80.4419 251.402 82.8165 cv
250.304 85.6309 251.701 88.8106 254.517 89.9063 cv
256.041 90.501 257.66 90.3458 259.005 89.6436 cv
259.23 89.9844 259.482 90.3018 259.771 90.5831 cv
258.542 93.292 255.392 94.6045 252.591 93.5118 cv
cp
231.656 76.7227 mo
232.022 74.8531 233.772 73.6275 235.635 73.8536 cv
236.136 73.9517 li
237.943 74.4444 239.106 76.2408 238.738 78.1114 cv
238.355 80.0665 236.457 81.3379 234.505 80.9571 cv
232.546 80.5743 231.271 78.6797 231.656 76.7227 cv
cp
232.714 82.6387 mo
232.117 85.6915 229.144 87.6895 226.091 87.0899 cv
223.279 86.5411 221.216 84.754 220.013 82.379 cv
218.378 84.4864 216.048 85.8497 213.176 85.8497 cv
210.065 85.8497 207.536 83.3145 207.536 80.2051 cv
207.536 79.9122 207.59 78.7735 207.626 78.3458 cv
208.44 80.3575 210.396 81.7891 212.694 81.7891 cv
215.714 81.7891 218.171 79.3321 218.171 76.3145 cv
218.171 73.293 215.714 70.836 212.694 70.836 cv
212.368 70.836 212.047 70.9595 211.724 71.0215 cv
211.77 70.753 211.813 70.4483 211.813 70.4483 cv
211.813 69.9673 211.745 69.503 211.627 69.0582 cv
213.584 67.8516 li
213.584 67.8516 213.381 49.0484 210.056 40.7564 cv
210.118 40.7217 210.177 40.6807 210.239 40.6441 cv
237.134 42.2461 234.812 60.9942 231.63 67.5938 cv
232.429 68.9805 li
232.394 69.0079 232.366 69.0435 232.331 69.0718 cv
232.177 69.1978 232.033 69.334 231.894 69.4766 cv
231.791 69.5811 231.693 69.688 231.598 69.8008 cv
231.543 69.8668 231.494 69.938 231.442 70.0069 cv
231.28 70.2193 231.133 70.4415 231.002 70.6783 cv
230.988 70.7051 230.975 70.7334 230.96 70.7603 cv
230.807 71.0523 230.68 71.3594 230.58 71.6836 cv
230.574 71.7007 230.57 71.7188 230.564 71.7359 cv
230.513 71.9073 230.449 72.0713 230.414 72.25 cv
230.414 72.25 230.398 72.5586 230.394 72.8321 cv
230.076 72.7071 229.781 72.5176 229.451 72.4512 cv
226.488 71.8711 223.603 73.8126 223.025 76.7754 cv
222.445 79.7364 224.378 82.6211 227.347 83.2012 cv
229.603 83.6446 231.794 82.6172 232.98 80.7969 cv
232.933 81.2247 232.771 82.3516 232.714 82.6387 cv
cp
202.767 74.627 mo
202.767 72.6446 204.366 71.0425 206.349 71.0264 cv
206.407 71.0264 li
208.384 71.0425 209.983 72.6446 209.983 74.627 cv
209.983 76.6211 208.368 78.2344 206.378 78.2344 cv
204.382 78.2344 202.767 76.6211 202.767 74.627 cv
cp
199.455 85.8497 mo
196.551 85.8497 194.146 84.4258 192.508 82.2794 cv
191.311 84.7051 189.227 86.5332 186.377 87.0899 cv
183.322 87.6895 180.35 85.6915 179.752 82.6387 cv
179.695 82.3516 179.533 81.2247 179.488 80.7969 cv
180.672 82.6172 182.865 83.6446 185.119 83.2012 cv
188.088 82.6211 190.022 79.7364 189.443 76.7754 cv
188.863 73.8126 185.979 71.8711 183.016 72.4512 cv
182.694 72.5157 182.406 72.6963 182.099 72.8208 cv
182.094 72.5503 182.079 72.2491 182.079 72.2491 cv
181.816 70.9034 181.077 69.773 180.074 68.9898 cv
180.88 67.5938 li
177.69 60.9795 175.363 42.1651 202.443 40.6329 cv
202.55 40.6963 202.657 40.7608 202.767 40.8194 cv
199.459 49.0967 199.112 67.6231 199.112 67.6231 cv
201.07 68.8858 li
200.922 69.3819 200.84 69.9053 200.84 70.4493 cv
200.84 70.4493 200.889 70.7579 200.93 71.0274 cv
200.602 70.9668 200.268 70.836 199.938 70.836 cv
196.918 70.836 194.457 73.293 194.457 76.3145 cv
194.457 79.3321 196.918 81.7891 199.938 81.7891 cv
202.236 81.7891 204.193 80.3575 205.004 78.3458 cv
205.045 78.7735 205.094 79.9122 205.094 80.2051 cv
205.094 83.3145 202.564 85.8497 199.455 85.8497 cv
cp
174.003 78.1114 mo
173.616 76.1544 174.897 74.2618 176.853 73.877 cv
178.81 73.4981 180.704 74.7676 181.083 76.7227 cv
181.47 78.6797 180.192 80.5743 178.237 80.9571 cv
176.284 81.3379 174.384 80.0665 174.003 78.1114 cv
cp
172.91 89.7305 mo
170.063 90.2872 167.254 89.4278 165.234 87.6309 cv
164.488 90.2266 162.584 92.4571 159.877 93.5118 cv
157.135 94.5811 154.058 93.3497 152.774 90.7569 cv
153.115 90.4551 153.419 90.1182 153.675 89.7481 cv
154.708 90.2315 155.884 90.3956 157.048 90.1636 cv
157.161 90.1446 157.279 90.1207 157.403 90.087 cv
157.411 90.085 157.418 90.0816 157.426 90.0796 cv
157.601 90.0313 157.775 89.9834 157.976 89.9053 cv
160.792 88.8096 162.188 85.6299 161.091 82.8155 cv
160.074 80.2037 157.927 79.3887 155.768 79.4927 cv
154.784 79.5372 153.796 79.7725 152.912 80.1172 cv
152.611 80.2334 152.356 80.4654 152.074 80.6416 cv
152.022 80.3755 151.952 80.0811 151.952 80.0811 cv
151.419 78.7095 150.388 77.6778 149.146 77.1045 cv
149.431 76.5 149.619 75.8409 149.681 75.1456 cv
149.843 74.8067 li
149.648 72.3184 149.949 69.5079 151.063 66.6456 cv
151.366 66.1963 151.58 65.6876 151.722 65.1504 cv
154.414 59.6651 160.307 54.171 171.667 50.5489 cv
171.751 50.7042 171.836 50.8589 171.936 51.0035 cv
169.248 51.2554 167.13 53.4976 167.13 56.25 cv
167.13 58.209 168.21 59.9044 169.795 60.8213 cv
167.885 61.9141 166.593 63.9688 166.593 66.3223 cv
166.593 69.2461 168.584 71.7071 171.28 72.4376 cv
171.181 73.0577 171.181 73.7032 171.309 74.3536 cv
171.309 74.3536 171.414 74.6465 171.51 74.9024 cv
171.172 74.9063 170.82 74.8399 170.5 74.9063 cv
167.535 75.4864 165.592 78.3711 166.176 81.334 cv
166.756 84.293 169.643 86.2364 172.607 85.6544 cv
174.859 85.2129 176.506 83.4336 176.91 81.3028 cv
177.035 81.7129 177.305 82.8223 177.359 83.1075 cv
177.963 86.1602 175.963 89.1309 172.91 89.7305 cv
cp
150.364 89.9268 mo
148.5 90.6553 146.39 89.7286 145.659 87.8614 cv
144.939 85.9981 145.867 83.8868 147.73 83.1602 cv
149.591 82.4376 151.7 83.3633 152.43 85.2247 cv
152.597 85.6563 152.677 86.1006 152.677 86.5372 cv
152.677 87.9942 151.797 89.3711 150.364 89.9268 cv
cp
143.812 70.7149 mo
145.96 70.7149 147.708 72.4639 147.708 74.6133 cv
147.708 75.3443 147.493 76.021 147.141 76.6065 cv
146.387 76.5655 145.613 76.6758 144.864 76.9678 cv
144.105 77.2647 143.02 77.6876 142.048 78.0665 cv
140.788 77.4205 139.915 76.1231 139.915 74.6133 cv
139.915 72.4639 141.663 70.7149 143.812 70.7149 cv
cp
144.026 63.8965 mo
144.026 62.2764 145.342 60.959 146.96 60.959 cv
148.583 60.959 149.903 62.2764 149.903 63.8965 cv
149.903 65.5176 148.583 66.836 146.96 66.836 cv
145.342 66.836 144.026 65.5176 144.026 63.8965 cv
cp
152.704 54.1778 mo
153.845 54.1778 154.772 55.1065 154.772 56.2481 cv
154.772 57.3887 153.845 58.3165 152.704 58.3165 cv
151.562 58.3165 150.632 57.3887 150.632 56.2481 cv
150.632 55.1065 151.562 54.1778 152.704 54.1778 cv
cp
159.72 49.5689 mo
160.658 49.5689 161.421 50.334 161.421 51.274 cv
161.421 52.2139 160.658 52.9786 159.72 52.9786 cv
158.776 52.9786 158.009 52.2139 158.009 51.274 cv
158.009 50.334 158.776 49.5689 159.72 49.5689 cv
cp
167.239 46.4712 mo
167.988 46.4712 168.597 47.0821 168.597 47.8326 cv
168.597 48.5821 167.988 49.1919 167.239 49.1919 cv
166.49 49.1919 165.88 48.5821 165.88 47.8326 cv
165.88 47.0821 166.49 46.4712 167.239 46.4712 cv
cp
172.427 52.9537 mo
174.245 52.9537 175.724 54.4327 175.724 56.25 cv
175.724 58.0694 174.245 59.5489 172.427 59.5489 cv
170.609 59.5489 169.13 58.0694 169.13 56.25 cv
169.13 54.4327 170.609 52.9537 172.427 52.9537 cv
cp
175.786 45.6587 mo
177.263 45.6587 178.464 46.8633 178.464 48.3443 cv
178.464 49.8228 177.263 51.0259 175.786 51.0259 cv
174.304 51.0259 173.099 49.8228 173.099 48.3443 cv
173.099 46.8633 174.304 45.6587 175.786 45.6587 cv
cp
175.651 67.9268 mo
174.044 68.2393 172.744 69.2344 171.978 70.5499 cv
170.044 70.1124 168.593 68.3873 168.593 66.3223 cv
168.593 63.9297 170.541 61.9825 172.935 61.9825 cv
175.331 61.9825 177.28 63.9297 177.28 66.3223 cv
177.28 66.857 177.17 67.3633 176.993 67.8365 cv
176.552 67.8135 176.104 67.8374 175.651 67.9268 cv
cp
181.612 41.2974 mo
182.686 41.2974 183.56 42.1729 183.56 43.2486 cv
183.56 44.3223 182.686 45.1958 181.612 45.1958 cv
180.532 45.1958 179.653 44.3223 179.653 43.2486 cv
179.653 42.1729 180.532 41.2974 181.612 41.2974 cv
cp
187.938 38.1978 mo
188.802 38.1978 189.505 38.9039 189.505 39.772 cv
189.505 40.6412 188.802 41.3482 187.938 41.3482 cv
187.067 41.3482 186.358 40.6412 186.358 39.772 cv
186.358 38.9039 187.067 38.1978 187.938 38.1978 cv
cp
195.128 36.5064 mo
195.816 36.5064 196.376 37.0699 196.376 37.7623 cv
196.376 38.4571 195.816 39.022 195.128 39.022 cv
194.432 39.022 193.866 38.4571 193.866 37.7623 cv
193.866 37.0699 194.432 36.5064 195.128 36.5064 cv
cp
204.034 33.8931 mo
203.474 34.4781 203.125 35.2662 203.125 36.1373 cv
203.125 36.3755 203.154 36.6065 203.203 36.8306 cv
202.684 36.8443 202.168 36.8589 201.665 36.8799 cv
201.211 36.1426 200.927 35.2935 200.865 34.3819 cv
201.11 34.2525 202.02 34.0059 204.034 33.8931 cv
cp
203.792 29.1368 mo
204.213 29.4112 204.755 29.6026 205.369 29.7066 cv
205.369 31.6436 li
203.523 31.6749 202.189 31.8028 201.231 31.9991 cv
201.716 30.7666 202.63 29.75 203.792 29.1368 cv
cp
201.682 20.5792 mo
201.569 20.4439 201.345 19.9942 201.345 19.1968 cv
201.345 18.4048 201.568 17.9585 201.68 17.8243 cv
202.004 17.8243 204.976 17.8243 204.976 17.8243 cv
204.976 17.8243 204.976 14.8545 204.976 14.5264 cv
205.112 14.4141 205.561 14.1934 206.356 14.1934 cv
207.148 14.1934 207.594 14.4141 207.731 14.5259 cv
207.731 14.8536 207.731 17.8243 207.731 17.8243 cv
207.731 17.8243 210.704 17.8243 211.03 17.8243 cv
211.143 17.959 211.366 18.4058 211.366 19.1968 cv
211.366 19.9937 211.141 20.4429 211.028 20.5792 cv
210.702 20.5792 207.731 20.5792 207.731 20.5792 cv
207.731 20.5792 207.731 26.8946 207.731 27.2593 cv
207.594 27.3726 207.147 27.5967 206.356 27.5967 cv
205.562 27.5967 205.112 27.3726 204.976 27.2588 cv
204.976 26.8936 204.976 20.5792 204.976 20.5792 cv
204.976 20.5792 202.007 20.5792 201.682 20.5792 cv
cp
211.512 32.1148 mo
210.263 31.8057 208.694 31.6783 207.168 31.6451 cv
207.168 29.7398 li
207.854 29.6465 208.452 29.4385 208.913 29.1387 cv
210.108 29.771 211.04 30.8316 211.512 32.1148 cv
cp
206.37 43.4107 mo
207.915 43.4107 209.161 44.6587 209.161 46.2017 cv
209.161 47.7369 207.915 48.9927 206.37 48.9927 cv
204.831 48.9927 203.581 47.7369 203.581 46.2017 cv
203.581 44.6587 204.831 43.4107 206.37 43.4107 cv
cp
205.125 36.1373 mo
205.125 35.4449 205.691 34.8814 206.388 34.8814 cv
207.077 34.8814 207.637 35.4449 207.637 36.1373 cv
207.637 36.8306 207.077 37.3951 206.388 37.3951 cv
205.691 37.3951 205.125 36.8306 205.125 36.1373 cv
cp
206.374 38.5884 mo
207.407 38.5884 208.247 39.4341 208.247 40.4693 cv
208.247 41.5084 207.407 42.3521 206.374 42.3521 cv
205.333 42.3521 204.487 41.5084 204.487 40.4693 cv
204.487 39.4341 205.333 38.5884 206.374 38.5884 cv
cp
206.37 57.3243 mo
204.394 57.3243 202.79 55.7247 202.79 53.7486 cv
202.79 51.772 204.394 50.1685 206.37 50.1685 cv
208.351 50.1685 209.956 51.772 209.956 53.7486 cv
209.956 55.7247 208.351 57.3243 206.37 57.3243 cv
cp
209.682 66.1187 mo
208.756 65.4014 207.599 64.9698 206.341 64.9698 cv
205.1 64.9698 203.958 65.3897 203.038 66.0879 cv
202.351 65.3047 201.921 64.2896 201.921 63.1641 cv
201.921 60.7032 203.911 58.7129 206.37 58.7129 cv
208.831 58.7129 210.827 60.7032 210.827 63.1641 cv
210.827 64.3038 210.386 65.3316 209.682 66.1187 cv
cp
211.7 71.0264 mo
211.704 71.0264 li
211.703 71.0264 211.701 71.0274 211.7 71.0274 cv
211.7 71.0269 211.7 71.0269 211.7 71.0264 cv
cp
211.829 34.5132 mo
211.749 35.379 211.465 36.1851 211.03 36.8887 cv
210.548 36.8677 210.054 36.8521 209.558 36.8379 cv
209.606 36.6114 209.638 36.378 209.638 36.1373 cv
209.638 35.2881 209.304 34.5206 208.771 33.9405 cv
210.362 34.0792 211.413 34.3252 211.829 34.5132 cv
cp
211.85 34.0562 mo
211.85 34.1612 211.842 34.2647 211.834 34.3687 cv
211.799 34.2842 211.77 34.1827 211.77 34.0562 cv
211.85 34.0562 li
cp
217.382 36.5064 mo
218.078 36.5064 218.644 37.0699 218.644 37.7623 cv
218.644 38.4571 218.078 39.022 217.382 39.022 cv
216.693 39.022 216.134 38.4571 216.134 37.7623 cv
216.134 37.0699 216.693 36.5064 217.382 36.5064 cv
cp
224.572 38.1978 mo
225.443 38.1978 226.152 38.9039 226.152 39.772 cv
226.152 40.6412 225.443 41.3482 224.572 41.3482 cv
223.708 41.3482 223.005 40.6412 223.005 39.772 cv
223.005 38.9039 223.708 38.1978 224.572 38.1978 cv
cp
230.898 41.2974 mo
231.978 41.2974 232.857 42.1729 232.857 43.2486 cv
232.857 44.3223 231.978 45.1958 230.898 45.1958 cv
229.824 45.1958 228.951 44.3223 228.951 43.2486 cv
228.951 42.1729 229.824 41.2974 230.898 41.2974 cv
cp
236.724 45.6587 mo
238.205 45.6587 239.412 46.8633 239.412 48.3443 cv
239.412 49.8228 238.205 51.0259 236.724 51.0259 cv
235.248 51.0259 234.046 49.8228 234.046 48.3443 cv
234.046 46.8633 235.248 45.6587 236.724 45.6587 cv
cp
236.865 67.9268 mo
236.411 67.837 235.96 67.813 235.518 67.8365 cv
235.34 67.3633 235.23 66.857 235.23 66.3223 cv
235.23 63.9297 237.179 61.9825 239.576 61.9825 cv
241.97 61.9825 243.918 63.9297 243.918 66.3223 cv
243.918 68.3858 242.468 70.1094 240.537 70.5489 cv
239.771 69.2339 238.47 68.2393 236.865 67.9268 cv
cp
240.96 74.897 mo
240.982 74.9014 li
240.974 74.9014 240.966 74.9024 240.958 74.9024 cv
240.959 74.9004 240.959 74.899 240.96 74.897 cv
cp
243.38 56.25 mo
243.38 58.0694 241.902 59.5489 240.084 59.5489 cv
238.265 59.5489 236.787 58.0694 236.787 56.25 cv
236.787 54.4327 238.265 52.9537 240.084 52.9537 cv
241.902 52.9537 243.38 54.4327 243.38 56.25 cv
cp
245.271 46.4712 mo
246.021 46.4712 246.63 47.0821 246.63 47.8326 cv
246.63 48.5821 246.021 49.1919 245.271 49.1919 cv
244.523 49.1919 243.914 48.5821 243.914 47.8326 cv
243.914 47.0821 244.523 46.4712 245.271 46.4712 cv
cp
252.791 49.5689 mo
253.734 49.5689 254.501 50.334 254.501 51.274 cv
254.501 52.2139 253.734 52.9786 252.791 52.9786 cv
251.851 52.9786 251.089 52.2139 251.089 51.274 cv
251.089 50.334 251.851 49.5689 252.791 49.5689 cv
cp
259.806 54.1778 mo
260.949 54.1778 261.878 55.1065 261.878 56.2481 cv
261.878 57.3887 260.949 58.3165 259.806 58.3165 cv
258.666 58.3165 257.738 57.3887 257.738 56.2481 cv
257.738 55.1065 258.666 54.1778 259.806 54.1778 cv
cp
265.55 60.959 mo
267.168 60.959 268.484 62.2764 268.484 63.8965 cv
268.484 65.5176 267.168 66.836 265.55 66.836 cv
263.927 66.836 262.607 65.5176 262.607 63.8965 cv
262.607 62.2764 263.927 60.959 265.55 60.959 cv
cp
268.699 70.7149 mo
270.847 70.7149 272.595 72.4639 272.595 74.6133 cv
272.595 76.1221 271.723 77.419 270.464 78.065 cv
269.494 77.6871 268.41 77.2647 267.652 76.9678 cv
266.901 76.6753 266.126 76.565 265.37 76.6065 cv
265.017 76.0215 264.802 75.3443 264.802 74.6133 cv
264.802 72.4639 266.55 70.7149 268.699 70.7149 cv
cp
272.718 78.9424 mo
272.718 78.9424 272.705 78.9371 272.694 78.9332 cv
273.86 77.856 274.595 76.3204 274.595 74.6133 cv
274.595 71.3614 271.949 68.7149 268.699 68.7149 cv
268.439 68.7149 268.183 68.7374 267.931 68.7706 cv
267.89 68.6055 267.837 68.4376 267.791 68.2715 cv
269.382 67.4512 270.484 65.8086 270.484 63.8965 cv
270.484 61.1739 268.271 58.959 265.55 58.959 cv
264.638 58.959 263.792 59.2247 263.058 59.6573 cv
262.918 59.4922 262.783 59.3282 262.634 59.1641 cv
263.398 58.4239 263.878 57.3926 263.878 56.2481 cv
263.878 54.004 262.05 52.1783 259.806 52.1783 cv
258.427 52.1783 257.21 52.8711 256.474 53.9239 cv
256.244 53.7691 256.007 53.6153 255.767 53.4624 cv
256.222 52.8477 256.501 52.0953 256.501 51.274 cv
256.501 49.231 254.835 47.5689 252.791 47.5689 cv
251.187 47.5689 249.832 48.6006 249.318 50.0308 cv
248.939 49.8628 248.544 49.6998 248.15 49.5357 cv
248.447 49.0342 248.63 48.4566 248.63 47.8326 cv
248.63 45.9791 247.123 44.4712 245.271 44.4712 cv
243.595 44.4712 242.216 45.7081 241.966 47.3145 cv
241.712 47.2364 241.472 47.1543 241.214 47.0777 cv
240.658 45.1119 238.867 43.6587 236.724 43.6587 cv
236.248 43.6587 235.791 43.7413 235.359 43.878 cv
235.191 43.7398 235.019 43.6026 234.843 43.4668 cv
234.847 43.3941 234.857 43.3228 234.857 43.2486 cv
234.857 41.0699 233.08 39.2974 230.898 39.2974 cv
230.041 39.2974 229.251 39.5796 228.605 40.0469 cv
228.451 39.9874 228.298 39.9268 228.142 39.8687 cv
228.142 39.836 228.152 39.8052 228.152 39.772 cv
228.152 37.8013 226.544 36.1978 224.572 36.1978 cv
223.234 36.1978 222.08 36.9488 221.468 38.0435 cv
221.195 37.9903 220.914 37.94 220.63 37.8897 cv
220.632 37.8467 220.644 37.8057 220.644 37.7623 cv
220.644 35.9668 219.181 34.5064 217.382 34.5064 cv
215.824 34.5064 214.521 35.6128 214.208 37.0821 cv
213.955 37.0621 213.693 37.045 213.434 37.0269 cv
213.832 36.0992 214.052 35.0787 214.052 34.0074 cv
214.052 31.0513 212.377 28.482 209.931 27.19 cv
209.931 26.3946 209.931 23.9742 209.931 22.7793 cv
210.573 22.7793 211.223 22.7793 211.223 22.7793 cv
212.581 22.7793 213.565 21.2725 213.565 19.1968 cv
213.565 17.1265 212.581 15.6241 211.223 15.6241 cv
211.223 15.6241 210.573 15.6241 209.931 15.6241 cv
209.931 14.982 209.931 14.3316 209.931 14.3316 cv
209.931 12.9766 208.427 11.9932 206.356 11.9932 cv
204.282 11.9932 202.776 12.9766 202.776 14.3316 cv
202.776 14.3316 202.776 14.982 202.776 15.6241 cv
202.137 15.6241 201.489 15.6241 201.489 15.6241 cv
200.131 15.6241 199.145 17.1265 199.145 19.1968 cv
199.145 21.2725 200.131 22.7793 201.489 22.7793 cv
201.489 22.7793 202.137 22.7793 202.776 22.7793 cv
202.776 23.9727 202.776 26.3897 202.776 27.1876 cv
200.324 28.4786 198.646 31.0494 198.646 34.0074 cv
198.646 35.0733 198.864 36.0894 199.258 37.0137 cv
198.938 37.0357 198.616 37.0572 198.302 37.0821 cv
197.989 35.6128 196.686 34.5064 195.128 34.5064 cv
193.33 34.5064 191.866 35.9668 191.866 37.7623 cv
191.866 37.8057 191.877 37.8467 191.879 37.8897 cv
191.597 37.94 191.315 37.9903 191.041 38.044 cv
190.43 36.9488 189.276 36.1978 187.938 36.1978 cv
185.964 36.1978 184.358 37.8013 184.358 39.772 cv
184.358 39.8052 184.367 39.836 184.368 39.8687 cv
184.211 39.9268 184.059 39.9874 183.905 40.0469 cv
183.258 39.5796 182.47 39.2974 181.612 39.2974 cv
179.429 39.2974 177.653 41.0699 177.653 43.2486 cv
177.653 43.3228 177.662 43.3946 177.667 43.4673 cv
177.491 43.6031 177.318 43.7398 177.15 43.878 cv
176.719 43.7413 176.263 43.6587 175.786 43.6587 cv
173.644 43.6587 171.852 45.1119 171.294 47.0777 cv
171.037 47.1543 170.797 47.2369 170.544 47.3145 cv
170.293 45.7081 168.913 44.4712 167.239 44.4712 cv
165.387 44.4712 163.88 45.9791 163.88 47.8326 cv
163.88 48.4566 164.062 49.0342 164.36 49.5357 cv
163.966 49.6998 163.57 49.8628 163.191 50.0308 cv
162.678 48.6006 161.323 47.5689 159.72 47.5689 cv
157.673 47.5689 156.009 49.231 156.009 51.274 cv
156.009 52.0953 156.287 52.8477 156.742 53.4629 cv
156.502 53.6158 156.266 53.7691 156.035 53.9239 cv
155.298 52.8711 154.083 52.1783 152.704 52.1783 cv
150.458 52.1783 148.632 54.004 148.632 56.2481 cv
148.632 57.3926 149.111 58.4239 149.876 59.1641 cv
149.728 59.3282 149.593 59.4932 149.452 59.6573 cv
148.717 59.2247 147.873 58.959 146.96 58.959 cv
144.24 58.959 142.026 61.1739 142.026 63.8965 cv
142.026 65.8086 143.128 67.4512 144.719 68.2715 cv
144.672 68.4376 144.619 68.6055 144.578 68.7706 cv
144.326 68.7374 144.072 68.7149 143.812 68.7149 cv
140.56 68.7149 137.915 71.3614 137.915 74.6133 cv
137.915 76.3184 138.647 77.8516 139.809 78.9288 cv
139.785 78.9385 139.772 78.9434 139.772 78.9434 cv
139.772 78.9434 141.605 80.8887 144.029 84.0147 cv
143.336 85.3907 143.198 87.0411 143.794 88.587 cv
144.759 91.0489 147.268 92.4493 149.773 92.1221 cv
152.07 95.0342 155.929 98.5215 159.076 97.6231 cv
159.076 97.6231 178.773 88.4434 206.234 88.4063 cv
233.693 88.4434 253.392 97.6231 253.392 97.6231 cv
256.55 98.5254 260.425 95.0079 262.718 92.0899 cv
265.302 92.5469 267.949 91.1329 268.943 88.5918 cv
269.572 86.9629 269.394 85.2168 268.605 83.7999 cv
270.442 81.4449 271.901 79.8111 272.449 79.21 cv
272.539 79.1216 272.626 79.0401 272.718 78.9424 cv
f
231.032 100.38 mo
232.209 100.623 233.368 99.8643 233.6 98.6885 cv
233.85 97.5069 233.096 96.3506 231.909 96.1084 cv
227.61 95.2217 li
226.43 94.9776 225.274 95.7413 225.032 96.921 cv
224.795 98.1026 225.553 99.253 226.735 99.4991 cv
231.032 100.38 li
cp
246.495 102.606 mo
247.542 103.848 248.694 105.216 249.271 105.901 cv
250 105.497 250.976 104.955 251.731 104.537 cv
251.429 103.729 251.039 102.684 250.748 101.904 cv
249.863 102.05 248.098 102.341 246.495 102.606 cv
cp
201.935 95.7349 mo
203.552 96.6544 205.818 97.9429 206.449 98.3018 cv
207.08 97.9424 209.344 96.6544 210.958 95.7349 cv
209.344 94.815 207.081 93.5254 206.449 93.1656 cv
205.817 93.525 203.551 94.8145 201.935 95.7349 cv
cp
186.064 99.4991 mo
187.248 99.253 188.004 98.1026 187.768 96.921 cv
187.525 95.7413 186.369 94.9776 185.188 95.2217 cv
180.891 96.1084 li
179.703 96.3506 178.951 97.5069 179.197 98.6885 cv
179.434 99.8643 180.59 100.623 181.77 100.38 cv
186.064 99.4991 li
cp
161.069 104.537 mo
161.823 104.955 162.8 105.498 163.528 105.901 cv
164.106 105.216 165.258 103.848 166.305 102.606 cv
164.702 102.341 162.938 102.05 162.054 101.904 cv
161.762 102.684 161.371 103.729 161.069 104.537 cv
cp
246.915 106.146 mo
234.846 101.688 222.178 99.2994 209.198 99.0386 cv
206.449 100.603 li
203.705 99.042 li
190.622 99.3365 177.857 101.795 165.71 106.354 cv
163.987 108.398 li
158.642 105.431 li
160.5 100.463 li
160.782 99.7076 li
163.179 100.104 li
176.273 95.0772 190.053 92.4087 204.177 92.1573 cv
205.955 91.1456 li
206.449 90.8638 li
208.714 92.1539 li
222.898 92.3721 236.737 95.0269 249.892 100.059 cv
251.224 99.8389 li
252.019 99.7076 li
254.157 105.431 li
248.812 108.398 li
246.915 106.146 li
f
2.8346 lw
0 lc
91.8853 128.607 mo
91.9932 127.592 91.8848 126.456 91.5279 125.31 cv
90.6138 122.404 87.9068 120.216 86.3951 120.685 cv
86.2037 120.75 85.9283 120.234 85.7232 120.302 cv
85.5279 120.363 85.5982 120.941 85.4029 121.001 cv
83.8873 121.47 82.9126 124.816 83.8248 127.726 cv
84.1807 128.867 84.7369 129.86 85.4029 130.632 cv
@
1 lj
90.0474 134.064 mo
92.9888 133.148 94.8208 130.621 93.9947 127.978 cv
93.6919 126.998 92.8716 126.945 92.8716 126.945 cv
93.1294 127.718 91.3931 129.449 88.8502 130.251 cv
86.313 131.041 83.899 130.609 83.6724 129.82 cv
83.6724 129.82 83.0279 130.337 83.3365 131.324 cv
84.1568 133.966 87.106 134.988 90.0474 134.064 cv
cp
@
1 lc
0 lj
90.8868 133.878 mo
91.0586 134.392 91.1294 134.5 91.4732 134.966 cv
91.8228 135.441 92.2232 135.824 92.6607 136.128 cv
@
0 lc
105.272 138.199 mo
106.2 137.772 107.311 137.51 108.51 137.482 cv
111.557 137.418 114.496 139.281 114.536 140.864 cv
114.536 141.066 115.113 141.162 115.113 141.377 cv
115.119 141.582 114.548 141.701 114.554 141.905 cv
114.595 143.491 111.737 145.485 108.688 145.553 cv
107.494 145.582 106.375 145.373 105.43 144.989 cv
@
1 lj
100.691 141.688 mo
100.617 138.608 102.425 136.063 105.193 136 cv
106.219 135.972 106.531 136.732 106.531 136.732 cv
105.716 136.736 104.633 138.935 104.687 141.601 cv
104.751 144.257 105.934 146.406 106.753 146.368 cv
106.753 146.368 106.47 147.144 105.437 147.168 cv
102.67 147.237 100.758 144.77 100.691 141.688 cv
cp
@
1 lc
0 lj
100.599 140.833 mo
100.057 140.834 99.9322 140.802 99.3794 140.626 cv
98.8184 140.447 98.3272 140.19 97.899 139.874 cv
@
0 lc
83.6651 195.954 mo
84.2588 195.125 85.0938 194.345 86.1202 193.724 cv
88.7334 192.157 92.209 192.315 93.0303 193.671 cv
93.1299 193.845 93.6788 193.642 93.7872 193.83 cv
93.8926 194.003 93.4561 194.39 93.5626 194.565 cv
94.3858 195.922 92.8946 199.072 90.2823 200.644 cv
89.2588 201.261 88.1836 201.634 87.1729 201.771 cv
@
1 lj
81.421 201.257 mo
79.8282 198.621 80.1338 195.514 82.5049 194.084 cv
83.3819 193.551 84.0303 194.056 84.0303 194.056 cv
83.3252 194.464 83.4756 196.911 84.8458 199.199 cv
86.2208 201.472 88.3126 202.75 89.0059 202.311 cv
89.0059 202.311 89.1446 203.126 88.2598 203.658 cv
85.8936 205.092 83.0088 203.9 81.421 201.257 cv
cp
@
1 lc
0 lj
80.9161 200.561 mo
80.4463 200.832 80.3223 200.865 79.7549 200.986 cv
79.1788 201.109 78.625 201.13 78.0967 201.068 cv
@
0 lc
67.8804 194.721 mo
67.4761 193.784 66.8228 192.847 65.9498 192.025 cv
63.7261 189.942 60.2935 189.367 59.2066 190.518 cv
59.0718 190.668 58.5787 190.355 58.4332 190.515 cv
58.2925 190.664 58.6382 191.132 58.4976 191.281 cv
57.4078 192.434 58.2027 195.827 60.4273 197.914 cv
61.2974 198.733 62.2701 199.324 63.2291 199.669 cv
@
1 lj
68.9605 200.376 mo
71.0728 198.134 71.4263 195.033 69.4087 193.137 cv
68.6636 192.432 67.9234 192.789 67.9234 192.789 cv
68.5279 193.335 67.8658 195.696 66.0445 197.644 cv
64.2222 199.579 61.9078 200.388 61.3228 199.812 cv
61.3228 199.812 61.0162 200.58 61.7691 201.288 cv
63.7818 203.186 66.8521 202.626 68.9605 200.376 cv
cp
@
1 lc
0 lj
69.6011 199.803 mo
70.0025 200.166 70.1177 200.225 70.646 200.462 cv
71.1832 200.705 71.7203 200.841 72.2505 200.891 cv
@
0 lc
93.3077 257.391 mo
93.4249 256.376 93.7794 255.291 94.377 254.25 cv
95.9053 251.615 99.0235 250.072 100.399 250.861 cv
100.57 250.964 100.952 250.521 101.137 250.632 cv
101.314 250.734 101.12 251.284 101.296 251.385 cv
102.673 252.173 102.893 255.653 101.368 258.292 cv
100.771 259.328 100.011 260.174 99.1924 260.783 cv
@
1 lj
93.9092 263.118 mo
91.2403 261.581 90.004 258.713 91.3877 256.316 cv
91.8965 255.425 92.7081 255.552 92.7081 255.552 cv
92.2891 256.251 93.6045 258.319 95.9102 259.659 cv
98.2139 260.983 100.664 261.089 101.058 260.369 cv
101.058 260.369 101.573 261.015 101.056 261.909 cv
99.6797 264.309 96.5782 264.662 93.9092 263.118 cv
cp
@
1 lc
0 lj
93.1309 262.752 mo
92.8506 263.216 92.7579 263.305 92.3204 263.686 cv
91.876 264.073 91.4014 264.359 90.9092 264.56 cv
@
0 lc
78.8248 263.736 mo
78.0152 263.115 76.9878 262.615 75.8248 262.322 cv
72.8687 261.585 69.5914 262.756 69.2017 264.291 cv
69.1578 264.488 68.5748 264.454 68.525 264.664 cv
68.4742 264.863 69.0054 265.104 68.9546 265.302 cv
68.564 266.839 70.9117 269.416 73.8707 270.155 cv
75.0298 270.447 76.1666 270.489 77.1724 270.324 cv
@
1 lj
82.523 268.149 mo
83.275 265.162 82.0738 262.281 79.3882 261.609 cv
78.3941 261.356 77.9205 262.027 77.9205 262.027 cv
78.7154 262.21 79.2867 264.594 78.6451 267.183 cv
77.9957 269.76 76.3687 271.595 75.5777 271.376 cv
75.5777 271.376 75.6832 272.196 76.6861 272.448 cv
79.3687 273.126 81.7769 271.141 82.523 268.149 cv
cp
@
1 lc
0 lj
82.8033 267.336 mo
83.3296 267.458 83.4595 267.453 84.0367 267.404 cv
84.6236 267.353 85.1597 267.21 85.647 266.996 cv
@
0 lc
131.752 305.008 mo
131.359 304.065 131.138 302.944 131.152 301.746 cv
131.199 298.699 133.167 295.83 134.751 295.846 cv
134.952 295.853 135.069 295.281 135.285 295.287 cv
135.489 295.289 135.587 295.864 135.792 295.867 cv
137.377 295.881 139.268 298.811 139.226 301.859 cv
139.21 303.054 138.961 304.164 138.544 305.094 cv
@
1 lj
135.074 309.712 mo
131.994 309.673 129.515 307.775 129.552 305.007 cv
129.561 303.981 130.332 303.696 130.332 303.696 cv
130.307 304.511 132.464 305.672 135.131 305.716 cv
137.788 305.747 139.977 304.644 139.969 303.822 cv
139.969 303.822 140.734 304.135 140.719 305.168 cv
140.691 307.934 138.157 309.755 135.074 309.712 cv
cp
@
1 lc
0 lj
134.216 309.773 mo
134.198 310.315 134.16 310.437 133.964 310.983 cv
133.765 311.539 133.491 312.019 133.16 312.435 cv
@
0 lc
122.524 318.377 mo
121.513 318.232 120.373 318.298 119.215 318.612 cv
116.277 319.416 113.991 322.041 114.402 323.569 cv
114.459 323.762 113.934 324.017 113.994 324.225 cv
114.046 324.423 114.628 324.375 114.681 324.572 cv
115.092 326.103 118.4 327.203 121.342 326.4 cv
122.496 326.087 123.508 325.568 124.304 324.932 cv
@
1 lj
127.908 320.418 mo
127.102 317.445 124.645 315.519 121.974 316.248 cv
120.984 316.513 120.899 317.33 120.899 317.33 cv
121.682 317.101 123.346 318.901 124.053 321.472 cv
124.748 324.039 124.225 326.434 123.428 326.63 cv
123.428 326.63 123.921 327.293 124.919 327.023 cv
127.59 326.301 128.72 323.392 127.908 320.418 cv
cp
@
1 lc
0 lj
127.754 319.572 mo
128.273 319.42 128.384 319.353 128.863 319.028 cv
129.35 318.697 129.749 318.31 130.069 317.884 cv
@
0 lc
319.386 257.345 mo
319.269 256.331 318.914 255.245 318.316 254.205 cv
316.789 251.569 313.669 250.026 312.294 250.815 cv
312.125 250.918 311.742 250.475 311.556 250.586 cv
311.38 250.688 311.574 251.238 311.398 251.339 cv
310.021 252.127 309.8 255.607 311.326 258.247 cv
311.923 259.282 312.683 260.128 313.501 260.737 cv
@
1 lj
318.785 263.072 mo
321.453 261.535 322.689 258.668 321.306 256.27 cv
320.796 255.379 319.986 255.506 319.986 255.506 cv
320.404 256.206 319.089 258.273 316.783 259.613 cv
314.48 260.937 312.031 261.043 311.636 260.323 cv
311.636 260.323 311.121 260.969 311.638 261.863 cv
313.013 264.263 316.115 264.616 318.785 263.072 cv
cp
@
1 lc
0 lj
319.562 262.707 mo
319.843 263.17 319.935 263.259 320.373 263.64 cv
320.818 264.027 321.292 264.313 321.785 264.514 cv
@
0 lc
280.914 305.008 mo
281.308 304.065 281.529 302.944 281.515 301.746 cv
281.468 298.699 279.5 295.83 277.916 295.846 cv
277.714 295.853 277.597 295.281 277.382 295.287 cv
277.177 295.289 277.08 295.864 276.875 295.867 cv
275.289 295.881 273.398 298.811 273.441 301.859 cv
273.457 303.054 273.705 304.164 274.123 305.094 cv
@
1 lj
277.593 309.712 mo
280.673 309.673 283.152 307.775 283.115 305.007 cv
283.105 303.981 282.335 303.696 282.335 303.696 cv
282.359 304.511 280.203 305.672 277.535 305.716 cv
274.878 305.747 272.689 304.644 272.697 303.822 cv
272.697 303.822 271.933 304.135 271.947 305.168 cv
271.976 307.934 274.509 309.755 277.593 309.712 cv
cp
@
1 lc
0 lj
278.451 309.773 mo
278.468 310.315 278.507 310.437 278.703 310.983 cv
278.902 311.539 279.175 312.019 279.507 312.435 cv
@
0 lc
290.235 318.435 mo
291.245 318.289 292.385 318.355 293.543 318.669 cv
296.481 319.472 298.768 322.097 298.356 323.626 cv
298.299 323.82 298.825 324.074 298.764 324.283 cv
298.711 324.48 298.129 324.431 298.077 324.628 cv
297.666 326.16 294.358 327.259 291.416 326.457 cv
290.262 326.144 289.25 325.625 288.454 324.99 cv
@
1 lj
284.85 320.474 mo
285.657 317.501 288.114 315.576 290.784 316.304 cv
291.774 316.57 291.86 317.386 291.86 317.386 cv
291.077 317.158 289.413 318.958 288.706 321.529 cv
288.01 324.095 288.534 326.492 289.331 326.687 cv
289.331 326.687 288.836 327.351 287.838 327.08 cv
285.168 326.359 284.038 323.449 284.85 320.474 cv
cp
@
1 lc
0 lj
285.004 319.628 mo
284.485 319.478 284.374 319.41 283.895 319.085 cv
283.409 318.753 283.01 318.367 282.69 317.941 cv
@
0 lc
333.933 263.685 mo
334.743 263.064 335.77 262.564 336.933 262.271 cv
339.889 261.535 343.166 262.707 343.556 264.24 cv
343.6 264.437 344.183 264.404 344.233 264.613 cv
344.284 264.812 343.752 265.054 343.803 265.251 cv
344.194 266.789 341.846 269.365 338.887 270.105 cv
337.728 270.396 336.591 270.439 335.585 270.273 cv
@
1 lj
330.235 268.099 mo
329.483 265.111 330.684 262.23 333.37 261.558 cv
334.364 261.306 334.837 261.976 334.837 261.976 cv
334.042 262.16 333.471 264.544 334.113 267.132 cv
334.762 269.71 336.389 271.544 337.18 271.326 cv
337.18 271.326 337.075 272.146 336.072 272.398 cv
333.389 273.076 330.981 271.091 330.235 268.099 cv
cp
@
1 lc
0 lj
329.955 267.287 mo
329.428 267.408 329.298 267.402 328.721 267.353 cv
328.134 267.302 327.598 267.16 327.111 266.945 cv
@
0 lc
307.408 138.199 mo
306.48 137.772 305.369 137.51 304.169 137.482 cv
301.124 137.418 298.185 139.281 298.144 140.864 cv
298.144 141.066 297.568 141.162 297.567 141.377 cv
297.562 141.582 298.132 141.701 298.126 141.905 cv
298.085 143.491 300.943 145.485 303.992 145.553 cv
305.187 145.582 306.305 145.373 307.25 144.989 cv
@
1 lj
311.989 141.688 mo
312.063 138.608 310.255 136.063 307.487 136 cv
306.461 135.972 306.149 136.732 306.149 136.732 cv
306.964 136.736 308.047 138.935 307.994 141.601 cv
307.929 144.257 306.747 146.406 305.927 146.368 cv
305.927 146.368 306.21 147.144 307.244 147.168 cv
310.009 147.237 311.921 144.77 311.989 141.688 cv
cp
@
1 lc
0 lj
312.082 140.833 mo
312.623 140.834 312.748 140.802 313.3 140.626 cv
313.861 140.447 314.353 140.19 314.781 139.874 cv
@
0 lc
329.123 196.013 mo
328.529 195.183 327.693 194.404 326.668 193.783 cv
324.054 192.215 320.578 192.374 319.757 193.73 cv
319.658 193.904 319.109 193.7 319 193.888 cv
318.894 194.062 319.332 194.449 319.224 194.624 cv
318.402 195.98 319.892 199.13 322.505 200.703 cv
323.529 201.32 324.603 201.693 325.615 201.83 cv
@
1 lj
331.367 201.316 mo
332.958 198.679 332.654 195.572 330.283 194.143 cv
329.406 193.61 328.757 194.115 328.757 194.115 cv
329.462 194.522 329.312 196.969 327.941 199.257 cv
326.566 201.531 324.474 202.809 323.781 202.37 cv
323.781 202.37 323.642 203.184 324.527 203.716 cv
326.894 205.151 329.779 203.958 331.367 201.316 cv
cp
@
1 lc
0 lj
331.871 200.62 mo
332.341 200.89 332.464 200.923 333.033 201.044 cv
333.609 201.168 334.162 201.189 334.691 201.126 cv
@
0 lc
320.843 128.635 mo
320.735 127.62 320.844 126.483 321.201 125.338 cv
322.115 122.432 324.822 120.244 326.334 120.713 cv
326.525 120.777 326.8 120.262 327.005 120.33 cv
327.201 120.391 327.13 120.969 327.326 121.029 cv
328.841 121.498 329.816 124.844 328.904 127.754 cv
328.547 128.895 327.992 129.888 327.326 130.66 cv
@
1 lj
322.681 134.092 mo
319.74 133.176 317.908 130.648 318.734 128.006 cv
319.037 127.025 319.857 126.973 319.857 126.973 cv
319.599 127.746 321.335 129.477 323.878 130.279 cv
326.416 131.068 328.83 130.637 329.056 129.848 cv
329.056 129.848 329.701 130.365 329.392 131.352 cv
328.572 133.994 325.623 135.016 322.681 134.092 cv
cp
@
1 lc
0 lj
321.842 133.906 mo
321.67 134.419 321.599 134.527 321.255 134.994 cv
320.906 135.469 320.505 135.852 320.068 136.156 cv
@
0 lc
344.799 194.72 mo
345.204 193.782 345.857 192.846 346.73 192.023 cv
348.954 189.941 352.386 189.366 353.473 190.517 cv
353.608 190.667 354.101 190.354 354.247 190.513 cv
354.387 190.662 354.042 191.131 354.182 191.28 cv
355.272 192.433 354.477 195.825 352.252 197.912 cv
351.382 198.732 350.41 199.322 349.451 199.668 cv
@
1 lj
343.719 200.375 mo
341.607 198.132 341.253 195.031 343.271 193.136 cv
344.016 192.43 344.756 192.787 344.756 192.787 cv
344.152 193.334 344.814 195.694 346.635 197.642 cv
348.458 199.578 350.772 200.386 351.357 199.81 cv
351.357 199.81 351.664 200.578 350.911 201.287 cv
348.898 203.185 345.828 202.625 343.719 200.375 cv
cp
@
1 lc
0 lj
343.079 199.802 mo
342.677 200.164 342.562 200.224 342.034 200.46 cv
341.497 200.703 340.96 200.839 340.429 200.89 cv
@
178.821 335.752 mo
192.357 337.909 190.529 336.762 190.533 336.764 cv
190.538 336.766 192.497 336.225 179.157 334.108 cv
165.781 331.762 147.951 324.128 147.951 324.243 cv
147.813 324.399 165.174 333.344 178.821 335.752 cv
f
1.4 lw
0 lc
178.821 335.752 mo
192.357 337.909 190.529 336.762 190.533 336.764 cv
190.538 336.766 192.497 336.225 179.157 334.108 cv
165.781 331.762 147.951 324.128 147.951 324.243 cv
147.813 324.399 165.174 333.344 178.821 335.752 cv
cp
@
115.561 302.942 mo
125.658 312.194 125.113 309.797 124.976 309.963 cv
125.119 309.803 126.665 310.838 116.717 301.717 cv
106.588 292.725 95.3589 277.014 95.2544 277.014 cv
94.9566 277.127 105.24 293.75 115.561 302.942 cv
f
115.561 302.942 mo
125.658 312.194 125.113 309.797 124.976 309.963 cv
125.119 309.803 126.665 310.838 116.717 301.717 cv
106.588 292.725 95.3589 277.014 95.2544 277.014 cv
94.9566 277.127 105.24 293.75 115.561 302.942 cv
cp
@
80.4244 246.895 mo
85.1099 259.776 85.2906 257.59 85.2691 257.604 cv
85.2916 257.6 86.6441 259.075 82.0259 246.383 cv
77.5552 233.567 75.5845 214.343 75.3531 214.343 cv
75.1021 214.304 75.8785 233.815 80.4244 246.895 cv
f
80.4244 246.895 mo
85.1099 259.776 85.2906 257.59 85.2691 257.604 cv
85.2916 257.6 86.6441 259.075 82.0259 246.383 cv
77.5552 233.567 75.5845 214.343 75.3531 214.343 cv
75.1021 214.304 75.8785 233.815 80.4244 246.895 cv
cp
@
77.1548 180.414 mo
74.6236 193.885 76.3365 192.145 76.1421 192.122 cv
76.3326 192.155 76.3033 194.036 78.8013 180.756 cv
81.1187 167.392 88.9732 149.791 88.7652 149.583 cv
88.5132 149.383 79.5396 166.778 77.1548 180.414 cv
f
77.1548 180.414 mo
74.6236 193.885 76.3365 192.145 76.1421 192.122 cv
76.3326 192.155 76.3033 194.036 78.8013 180.756 cv
81.1187 167.392 88.9732 149.791 88.7652 149.583 cv
88.5132 149.383 79.5396 166.778 77.1548 180.414 cv
cp
@
106.918 121.219 mo
98.2632 131.848 100.462 131.043 100.359 130.974 cv
100.454 131.051 99.6597 132.793 108.191 122.318 cv
116.777 111.816 131.836 99.6426 131.988 99.8379 cv
132.145 99.9947 115.691 110.516 106.918 121.219 cv
f
106.918 121.219 mo
98.2632 131.848 100.462 131.043 100.359 130.974 cv
100.454 131.051 99.6597 132.793 108.191 122.318 cv
116.777 111.816 131.836 99.6426 131.988 99.8379 cv
132.145 99.9947 115.691 110.516 106.918 121.219 cv
cp
@
3.4016 lw
183.04 335.643 mo
183.011 335.133 183.669 328.473 180.753 326.6 cv
178.188 324.969 177.854 329.542 176.26 329.206 cv
174.417 328.792 174.368 327.182 173.982 324.569 cv
173.728 323.006 173.499 319.452 170.214 318.518 cv
165.77 317.262 167.325 324.086 164.572 324.299 cv
162.111 324.506 162.387 320.59 162.371 317.916 cv
162.352 313.385 160.426 310.622 155.994 311.233 cv
150.959 311.657 155.441 319.657 153.16 320.596 cv
151.017 321.483 149.566 320.084 148.289 317.741 cv
145.539 312.792 140.063 312.907 136.895 317.665 cv
133.645 322.555 136.646 328.184 142.973 327.745 cv
145.833 327.565 147.709 328.159 148.54 330.368 cv
149.558 333.114 139.362 333.413 142.772 338.29 cv
146.036 342.545 150.594 342.241 153.906 339.202 cv
155.993 337.292 158.3 334.647 160.349 336.184 cv
162.771 338.032 156.558 342.407 161.937 344.245 cv
166.008 345.631 168.272 342.858 169.338 341.711 cv
171.099 339.848 171.981 338.268 173.972 338.715 cv
175.682 339.081 173.92 343.352 177.36 342.991 cv
181.276 342.579 182.837 336.104 183.04 335.643 cv
cp
@
122.504 307.545 mo
122.721 307.1 126.467 301.743 124.777 298.858 cv
123.341 296.266 120.932 299.936 119.759 298.854 cv
118.43 297.567 119.23 296.092 120.091 293.733 cv
120.621 292.28 122.017 289.237 119.623 286.895 cv
116.595 283.534 114.528 290.239 112.163 289.022 cv
110.072 287.92 111.992 284.862 113.259 282.565 cv
115.213 278.827 115.154 275.334 111.076 273.737 cv
106.407 271.799 106.686 280.612 104.2 280.383 cv
101.978 280.092 101.257 278.307 101.213 275.737 cv
101.492 270.034 96.6197 267.588 91.563 270.192 cv
86.5269 272.782 86.5455 278.963 91.8921 281.76 cv
94.4947 282.924 95.9644 284.225 95.5865 286.54 cv
95.232 289.313 86.1128 284.879 86.8589 290.573 cv
87.6148 295.774 91.3804 297.885 95.8541 296.719 cv
98.5474 296.084 101.967 294.768 102.871 297.161 cv
103.965 299.979 96.7037 300.627 100.242 304.924 cv
103.081 308.018 106.455 306.627 107.914 306.157 cv
110.371 305.346 111.812 304.491 113.246 305.881 cv
114.505 307.04 110.886 309.922 114.021 311.227 cv
117.656 312.639 122.107 307.846 122.504 307.545 cv
cp
@
84.0064 254.268 mo
84.4175 253.983 90.3189 251.126 90.4009 247.731 cv
90.4605 244.75 86.4673 246.811 85.938 245.307 cv
85.3492 243.551 86.6675 242.69 88.6324 241.038 cv
89.8091 240.024 92.6646 238.016 91.773 234.792 cv
90.5621 230.434 85.648 235.227 84.0679 233.036 cv
82.6177 231.088 86.0191 229.317 88.2564 227.934 cv
92.0093 225.6 93.4429 222.563 90.5503 219.183 cv
87.5933 215.191 83.2916 223.032 81.3404 221.604 cv
79.396 220.279 79.9019 218.343 81.2076 216.072 cv
84.064 211.233 80.9214 206.718 75.3736 206.518 cv
69.5796 206.317 66.6587 211.704 70.1314 216.762 cv
71.7457 219.056 72.1294 220.93 70.816 222.747 cv
69.0445 224.999 63.4927 216.655 61.19 221.99 cv
59.4195 226.881 61.898 230.54 66.149 231.75 cv
68.8013 232.518 72.1968 233.09 71.981 235.583 cv
71.6695 238.551 64.8482 235.598 66.0494 241.034 cv
66.9664 245.143 70.4371 245.62 71.939 245.924 cv
74.4156 246.434 76.19 246.362 76.8238 248.258 cv
77.3902 249.874 72.9234 250.586 74.9742 253.28 cv
77.314 256.344 83.5191 254.334 84.0064 254.268 cv
cp
@
76.6343 189 mo
77.188 188.959 83.5025 189.307 85.3042 186.392 cv
86.8472 183.827 82.3462 183.679 82.6392 182.11 cv
82.9878 180.292 84.6177 180.193 87.0826 179.694 cv
88.5972 179.382 92.0591 179.015 92.8179 175.756 cv
93.8648 171.357 87.1949 173.133 86.9673 170.476 cv
86.856 168.132 90.4878 168.179 93.1285 168.066 cv
97.4078 167.808 100.177 165.873 99.4752 161.586 cv
98.6832 156.593 91.3228 161.429 90.2183 159.191 cv
89.3355 157.159 90.3746 155.561 92.6871 154.251 cv
97.6031 151.458 97.1128 146.014 92.3541 143.113 cv
87.4195 140.112 82.188 143.363 82.6861 149.443 cv
82.9097 152.202 82.6744 154.185 80.4722 155.056 cv
77.9234 156.205 76.9371 146.102 72.4752 149.714 cv
68.3668 153.055 68.7085 157.441 71.9644 160.624 cv
73.8931 162.582 76.7798 164.805 75.1705 166.813 cv
73.3668 169.227 68.8931 163.338 67.313 168.674 cv
66.1431 172.719 68.9537 174.829 70.1236 175.827 cv
72.0953 177.494 73.6207 178.284 73.2427 180.246 cv
72.9283 181.928 68.689 180.376 69.1304 183.718 cv
69.605 187.52 76.232 188.827 76.6343 189 cv
cp
@
102.112 128.253 mo
102.566 128.451 108.01 131.936 110.983 130.254 cv
113.563 128.751 109.715 126.422 110.728 125.188 cv
111.88 123.737 113.426 124.515 115.834 125.297 cv
117.302 125.761 120.488 127.123 122.713 124.614 cv
125.849 121.349 119.139 119.626 120.243 117.196 cv
121.268 115.071 124.403 116.871 126.755 118.048 cv
130.58 119.872 134.098 119.704 135.459 115.469 cv
137.199 110.719 128.423 111.371 128.558 108.888 cv
128.715 106.598 130.486 105.827 133.151 105.816 cv
138.72 105.641 141.065 100.839 138.272 95.9092 cv
135.47 90.9649 129.195 91.0645 126.759 96.7452 cv
125.602 99.2569 124.348 100.756 122.063 100.527 cv
119.272 100.276 123.313 90.9659 117.665 91.9463 cv
112.573 93.003 110.586 96.8194 111.913 101.224 cv
112.652 103.885 114.1 107.247 111.738 108.238 cv
108.984 109.46 107.973 102.159 103.925 105.968 cv
100.967 108.954 102.398 112.178 102.937 113.626 cv
103.827 116.032 104.694 117.401 103.446 118.961 cv
102.361 120.285 99.4195 116.851 98.1919 120 cv
96.772 123.569 101.797 127.868 102.112 128.253 cv
cp
@
229.66 335.643 mo
229.689 335.133 229.031 328.473 231.947 326.6 cv
234.511 324.969 234.845 329.542 236.44 329.206 cv
238.283 328.792 238.332 327.182 238.717 324.569 cv
238.972 323.006 239.201 319.452 242.486 318.518 cv
246.93 317.262 245.375 324.086 248.127 324.299 cv
250.588 324.506 250.313 320.59 250.329 317.916 cv
250.348 313.385 252.274 310.622 256.706 311.233 cv
261.741 311.657 257.258 319.657 259.54 320.596 cv
261.683 321.483 263.133 320.084 264.411 317.741 cv
267.161 312.792 272.636 312.907 275.805 317.665 cv
279.055 322.555 276.053 328.184 269.727 327.745 cv
266.867 327.565 264.991 328.159 264.16 330.368 cv
263.142 333.114 273.337 333.413 269.928 338.29 cv
266.664 342.545 262.106 342.241 258.793 339.202 cv
256.707 337.292 254.4 334.647 252.351 336.184 cv
249.929 338.032 256.142 342.407 250.763 344.245 cv
246.692 345.631 244.427 342.858 243.362 341.711 cv
241.601 339.848 240.718 338.268 238.728 338.715 cv
237.018 339.081 238.78 343.352 235.339 342.991 cv
231.423 342.579 229.863 336.104 229.66 335.643 cv
cp
@
290.196 307.545 mo
289.979 307.1 286.233 301.743 287.922 298.858 cv
289.359 296.266 291.768 299.936 292.941 298.854 cv
294.27 297.567 293.469 296.092 292.609 293.733 cv
292.079 292.28 290.683 289.237 293.077 286.895 cv
296.105 283.534 298.171 290.239 300.537 289.022 cv
302.627 287.92 300.708 284.862 299.441 282.565 cv
297.487 278.827 297.545 275.334 301.624 273.737 cv
306.292 271.799 306.014 280.612 308.5 280.383 cv
310.722 280.092 311.443 278.307 311.487 275.737 cv
311.208 270.034 316.08 267.588 321.136 270.192 cv
326.172 272.782 326.154 278.963 320.807 281.76 cv
318.205 282.924 316.735 284.225 317.113 286.54 cv
317.467 289.313 326.586 284.879 325.84 290.573 cv
325.084 295.774 321.319 297.885 316.845 296.719 cv
314.152 296.084 310.733 294.768 309.829 297.161 cv
308.735 299.979 315.996 300.627 312.458 304.924 cv
309.619 308.018 306.245 306.627 304.786 306.157 cv
302.329 305.346 300.888 304.491 299.454 305.881 cv
298.195 307.04 301.814 309.922 298.679 311.227 cv
295.043 312.639 290.592 307.846 290.196 307.545 cv
cp
@
328.693 254.268 mo
328.282 253.983 322.38 251.126 322.298 247.731 cv
322.239 244.75 326.232 246.811 326.761 245.307 cv
327.35 243.551 326.032 242.69 324.067 241.038 cv
322.89 240.024 320.035 238.016 320.926 234.792 cv
322.137 230.434 327.051 235.227 328.631 233.036 cv
330.082 231.088 326.68 229.317 324.443 227.934 cv
320.69 225.6 319.256 222.563 322.149 219.183 cv
325.106 215.191 329.408 223.032 331.359 221.604 cv
333.303 220.279 332.797 218.343 331.492 216.072 cv
328.635 211.233 331.778 206.718 337.326 206.518 cv
343.12 206.317 346.041 211.704 342.568 216.762 cv
340.954 219.056 340.57 220.93 341.883 222.747 cv
343.655 224.999 349.207 216.655 351.509 221.99 cv
353.28 226.881 350.801 230.54 346.55 231.75 cv
343.898 232.518 340.502 233.09 340.718 235.583 cv
341.03 238.551 347.851 235.598 346.65 241.034 cv
345.733 245.143 342.262 245.62 340.76 245.924 cv
338.284 246.434 336.509 246.362 335.876 248.258 cv
335.309 249.874 339.776 250.586 337.725 253.28 cv
335.385 256.344 329.18 254.334 328.693 254.268 cv
cp
@
336.065 189 mo
335.511 188.959 329.197 189.307 327.395 186.392 cv
325.852 183.827 330.353 183.679 330.06 182.11 cv
329.711 180.292 328.082 180.193 325.617 179.694 cv
324.102 179.382 320.64 179.015 319.881 175.756 cv
318.834 171.357 325.504 173.133 325.732 170.476 cv
325.843 168.132 322.211 168.179 319.571 168.066 cv
315.292 167.808 312.523 165.873 313.224 161.586 cv
314.016 156.593 321.376 161.429 322.481 159.191 cv
323.364 157.159 322.325 155.561 320.012 154.251 cv
315.096 151.458 315.586 146.014 320.345 143.113 cv
325.28 140.112 330.511 143.363 330.013 149.443 cv
329.79 152.202 330.025 154.185 332.227 155.056 cv
334.776 156.205 335.762 146.102 340.224 149.714 cv
344.333 153.055 343.991 157.441 340.735 160.624 cv
338.806 162.582 335.919 164.805 337.529 166.813 cv
339.333 169.227 343.806 163.338 345.386 168.674 cv
346.556 172.719 343.746 174.829 342.576 175.827 cv
340.604 177.494 339.079 178.284 339.457 180.246 cv
339.771 181.928 344.01 180.376 343.569 183.718 cv
343.094 187.52 336.467 188.827 336.065 189 cv
cp
@
310.587 128.253 mo
310.133 128.451 304.69 131.936 301.716 130.254 cv
299.137 128.751 302.985 126.422 301.972 125.188 cv
300.82 123.737 299.274 124.515 296.866 125.297 cv
295.398 125.761 292.211 127.123 289.987 124.614 cv
286.851 121.349 293.561 119.626 292.457 117.196 cv
291.432 115.071 288.296 116.871 285.945 118.048 cv
282.12 119.872 278.602 119.704 277.241 115.469 cv
275.5 110.719 284.277 111.371 284.142 108.888 cv
283.985 106.598 282.213 105.827 279.548 105.816 cv
273.98 105.641 271.634 100.839 274.427 95.9092 cv
277.23 90.9649 283.504 91.0645 285.941 96.7452 cv
287.098 99.2569 288.352 100.756 290.637 100.527 cv
293.428 100.276 289.386 90.9659 295.035 91.9463 cv
300.126 93.003 302.114 96.8194 300.787 101.224 cv
300.047 103.885 298.6 107.247 300.961 108.238 cv
303.715 109.46 304.727 102.159 308.775 105.968 cv
311.733 108.954 310.301 112.178 309.763 113.626 cv
308.873 116.032 308.005 117.401 309.253 118.961 cv
310.338 120.285 313.28 116.851 314.507 120 cv
315.927 123.569 310.903 127.868 310.587 128.253 cv
cp
@
233.878 335.752 mo
220.342 337.909 222.17 336.762 222.167 336.764 cv
222.162 336.766 220.203 336.225 233.542 334.108 cv
246.918 331.762 264.749 324.128 264.749 324.243 cv
264.887 324.399 247.526 333.344 233.878 335.752 cv
f
1.4 lw
233.878 335.752 mo
220.342 337.909 222.17 336.762 222.167 336.764 cv
222.162 336.766 220.203 336.225 233.542 334.108 cv
246.918 331.762 264.749 324.128 264.749 324.243 cv
264.887 324.399 247.526 333.344 233.878 335.752 cv
cp
@
297.139 302.942 mo
287.042 312.194 287.586 309.797 287.724 309.963 cv
287.581 309.803 286.035 310.838 295.983 301.717 cv
306.112 292.725 317.34 277.014 317.445 277.014 cv
317.743 277.127 307.46 293.75 297.139 302.942 cv
f
297.139 302.942 mo
287.042 312.194 287.586 309.797 287.724 309.963 cv
287.581 309.803 286.035 310.838 295.983 301.717 cv
306.112 292.725 317.34 277.014 317.445 277.014 cv
317.743 277.127 307.46 293.75 297.139 302.942 cv
cp
@
332.275 246.895 mo
327.589 259.776 327.409 257.59 327.43 257.604 cv
327.408 257.6 326.055 259.075 330.673 246.383 cv
335.144 233.567 337.115 214.343 337.346 214.343 cv
337.597 214.304 336.821 233.815 332.275 246.895 cv
f
332.275 246.895 mo
327.589 259.776 327.409 257.59 327.43 257.604 cv
327.408 257.6 326.055 259.075 330.673 246.383 cv
335.144 233.567 337.115 214.343 337.346 214.343 cv
337.597 214.304 336.821 233.815 332.275 246.895 cv
cp
@
335.544 180.414 mo
338.076 193.885 336.363 192.145 336.557 192.122 cv
336.367 192.155 336.396 194.036 333.898 180.756 cv
331.581 167.392 323.726 149.791 323.934 149.583 cv
324.186 149.383 333.16 166.778 335.544 180.414 cv
f
335.544 180.414 mo
338.076 193.885 336.363 192.145 336.557 192.122 cv
336.367 192.155 336.396 194.036 333.898 180.756 cv
331.581 167.392 323.726 149.791 323.934 149.583 cv
324.186 149.383 333.16 166.778 335.544 180.414 cv
cp
@
305.782 121.219 mo
314.436 131.848 312.238 131.043 312.34 130.974 cv
312.246 131.051 313.04 132.793 304.508 122.318 cv
295.922 111.816 280.864 99.6426 280.711 99.8379 cv
280.554 99.9947 297.008 110.516 305.782 121.219 cv
f
305.782 121.219 mo
314.436 131.848 312.238 131.043 312.34 130.974 cv
312.246 131.051 313.04 132.793 304.508 122.318 cv
295.922 111.816 280.864 99.6426 280.711 99.8379 cv
280.554 99.9947 297.008 110.516 305.782 121.219 cv
cp
@
12.4991 409.969 mo
19.3716 409.969 li
12.1509 419.191 li
19.9517 430.907 li
12.7598 430.907 li
5.85792 419.771 li
5.79981 419.771 li
5.79981 430.907 li
0 430.907 li
0 409.969 li
5.79981 409.969 li
5.79981 419.162 li
5.85792 419.162 li
12.4991 409.969 li
0 0 0 1 cmyk
f
29.8697 414.029 mo
23.461 414.029 li
23.461 409.969 li
42.2237 409.969 li
42.2237 414.029 li
35.67 414.029 li
35.67 430.907 li
29.8697 430.907 li
29.8697 414.029 li
f
47.3277 430.907 mo
47.3277 409.969 li
53.1568 409.969 li
53.1568 418.263 li
60.2618 418.263 li
60.2618 409.969 li
66.0616 409.969 li
66.0616 430.907 li
60.2618 430.907 li
60.2618 422.323 li
53.1275 422.323 li
53.1275 430.907 li
47.3277 430.907 li
f
98.6866 416.552 mo
98.5416 414.666 97.1207 413.594 94.7422 413.594 cv
91.4073 413.594 90.7984 417.509 90.7984 420.641 cv
90.7984 423.686 91.4654 427.282 94.7422 427.282 cv
97.1783 427.282 98.5704 426.208 98.6866 424.208 cv
104.777 424.208 li
104.864 429.486 99.8174 431.341 94.7422 431.341 cv
88.2173 431.341 84.7085 427.426 84.7085 420.409 cv
84.7085 413.391 88.2173 409.592 94.7422 409.534 cv
99.8174 409.534 104.864 411.274 104.777 416.552 cv
98.6866 416.552 li
f
118.581 428.152 mo
120.901 428.152 121.394 425.687 121.394 423.627 cv
121.394 421.569 120.901 419.104 118.581 419.104 cv
116.261 419.104 115.768 421.569 115.768 423.627 cv
115.768 425.687 116.261 428.152 118.581 428.152 cv
cp
127.049 423.627 mo
127.049 428.993 123.134 431.341 118.581 431.341 cv
114.028 431.341 110.113 428.993 110.113 423.627 cv
110.113 418.263 114.028 415.914 118.581 415.914 cv
123.134 415.914 127.049 418.263 127.049 423.627 cv
f
138.126 418.755 mo
138.185 418.755 li
139.2 416.754 141.114 416 143.289 416 cv
145.058 416 147.059 416.929 147.668 418.698 cv
148.654 416.958 150.655 415.972 152.83 415.914 cv
155.961 415.914 158.282 417.944 158.282 421.163 cv
158.282 430.907 li
152.772 430.907 li
152.772 422.352 li
152.713 420.931 152.366 419.394 150.655 419.394 cv
147.929 419.394 148.277 422.38 148.277 422.555 cv
148.277 430.907 li
142.767 430.907 li
142.767 422.352 li
142.708 420.931 142.361 419.394 140.65 419.394 cv
137.924 419.394 138.272 422.38 138.272 422.555 cv
138.272 430.907 li
132.762 430.907 li
132.762 420.089 li
132.762 418.785 132.733 417.915 132.588 416.349 cv
138.04 416.349 li
138.126 418.755 li
f
170.056 423.627 mo
170.056 425.484 170.404 428.152 172.724 428.152 cv
175.043 428.152 175.392 425.484 175.392 423.627 cv
175.392 421.772 175.043 419.104 172.724 419.104 cv
170.404 419.104 170.056 421.772 170.056 423.627 cv
cp
170.056 418.408 mo
170.114 418.408 li
171.216 416.697 172.695 415.914 174.841 415.914 cv
179.162 415.914 181.046 419.597 181.046 423.424 cv
181.046 427.688 178.9 431.341 174.231 431.341 cv
172.607 431.341 171.128 430.443 170.114 429.166 cv
170.056 429.166 li
170.056 436.475 li
164.546 436.475 li
164.546 416.349 li
170.056 416.349 li
170.056 418.408 li
f
196.967 429.312 mo
195.72 430.762 194.271 431.341 192.415 431.341 cv
189.283 431.341 186.962 429.312 186.962 426.092 cv
186.962 416.349 li
192.473 416.349 li
192.473 424.904 li
192.53 426.325 192.878 427.862 194.589 427.862 cv
197.315 427.862 196.967 424.875 196.967 424.701 cv
196.967 416.349 li
202.478 416.349 li
202.478 427.166 li
202.478 428.471 202.506 429.34 202.651 430.907 cv
197.054 430.907 li
196.967 429.312 li
f
210.51 416.349 mo
210.51 414.145 li
216.02 412.057 li
216.02 416.349 li
219.21 416.349 li
219.21 419.829 li
216.02 419.829 li
216.02 425.6 li
216.02 425.977 215.789 427.862 217.064 427.862 cv
217.79 427.862 218.543 427.862 219.181 427.775 cv
219.181 431.051 li
217.934 431.284 217.036 431.341 216.223 431.341 cv
212.482 431.341 210.22 430.82 210.51 426.354 cv
210.51 419.829 li
207.668 419.829 li
207.668 416.349 li
210.51 416.349 li
f
234.463 421.772 mo
234.463 420.989 234.232 420.206 233.796 419.597 cv
233.362 418.988 232.724 418.611 231.882 418.668 cv
229.969 418.755 229.504 420.119 229.36 421.772 cv
234.463 421.772 li
cp
229.244 424.73 mo
229.214 426.615 229.708 428.239 231.767 428.239 cv
233.304 428.239 234.261 427.514 234.463 426.151 cv
239.568 426.151 li
239.394 428.036 238.205 429.399 236.813 430.21 cv
235.537 431.023 233.913 431.341 232.202 431.341 cv
226.373 431.341 224.053 428.848 224.053 423.135 cv
224.053 418.524 227.503 415.914 231.882 415.914 cv
237.798 415.914 239.684 419.307 239.684 424.73 cv
229.244 424.73 li
f
251.11 419.075 mo
251.168 419.075 li
251.805 416.668 253.604 415.856 256.04 415.914 cv
256.04 420.583 li
255.633 420.554 255.256 420.554 254.879 420.554 cv
252.008 420.583 251.023 422.293 251.11 425.078 cv
251.11 430.907 li
245.6 430.907 li
245.6 420.089 li
245.6 418.785 245.571 417.915 245.425 416.349 cv
251.023 416.349 li
251.11 419.075 li
f
285.184 416.117 mo
285.212 415.305 284.952 414.696 284.43 414.261 cv
283.937 413.826 283.183 413.594 282.197 413.594 cv
280.863 413.594 279.703 414.463 279.703 415.508 cv
279.703 417.044 281.559 417.538 283.096 417.944 cv
286.605 418.843 291.708 419.191 291.708 424.846 cv
291.708 429.253 287.359 431.341 282.516 431.341 cv
277.644 431.341 273.352 429.92 273.265 424.237 cv
279.065 424.237 li
279.036 426.208 280.486 427.282 282.574 427.282 cv
283.908 427.282 285.619 426.585 285.619 425.194 cv
285.619 422.352 281.327 422.96 276.774 420.96 cv
274.657 420.032 273.613 418.118 273.613 415.856 cv
273.845 410.897 278.195 409.534 282.574 409.534 cv
286.895 409.534 291.332 411.071 290.984 416.117 cv
285.184 416.117 li
f
306.992 421.453 mo
306.992 420.728 306.876 420.148 306.556 419.742 cv
306.238 419.335 305.686 419.104 304.845 419.104 cv
302.844 419.104 302.728 422.12 302.728 423.627 cv
302.728 425.136 302.844 428.152 304.845 428.152 cv
306.759 428.006 306.992 426.528 306.992 425.223 cv
312.501 425.223 li
312.501 427.282 311.602 428.79 310.24 429.805 cv
308.847 430.791 306.992 431.284 305.078 431.341 cv
299.568 431.341 297.074 428.673 297.074 423.627 cv
297.074 418.35 300.699 415.914 305.078 415.914 cv
308.76 415.856 312.241 417.306 312.501 421.453 cv
306.992 421.453 li
f
318.562 430.907 mo
318.562 416.349 li
324.072 416.349 li
324.072 430.907 li
318.562 430.907 li
cp
318.534 413.855 mo
318.534 409.969 li
324.101 409.969 li
324.101 413.855 li
318.534 413.855 li
f
340.428 421.772 mo
340.428 420.989 340.196 420.206 339.761 419.597 cv
339.326 418.988 338.688 418.611 337.847 418.668 cv
335.933 418.755 335.469 420.119 335.324 421.772 cv
340.428 421.772 li
cp
335.208 424.73 mo
335.179 426.615 335.672 428.239 337.731 428.239 cv
339.268 428.239 340.225 427.514 340.428 426.151 cv
345.532 426.151 li
345.358 428.036 344.169 429.399 342.777 430.21 cv
341.501 431.023 339.877 431.341 338.166 431.341 cv
332.337 431.341 330.017 428.848 330.017 423.135 cv
330.017 418.524 333.468 415.914 337.847 415.914 cv
343.763 415.914 345.648 419.307 345.648 424.73 cv
335.208 424.73 li
f
357.074 417.944 mo
358.321 416.494 359.771 415.914 361.626 415.914 cv
364.758 415.914 367.079 417.944 367.079 421.163 cv
367.079 430.907 li
361.569 430.907 li
361.569 422.352 li
361.511 420.931 361.163 419.394 359.452 419.394 cv
356.726 419.394 357.074 422.38 357.074 422.555 cv
357.074 430.907 li
351.564 430.907 li
351.564 420.089 li
351.564 418.785 351.535 417.915 351.39 416.349 cv
356.987 416.349 li
357.074 417.944 li
f
382.913 421.453 mo
382.913 420.728 382.796 420.148 382.478 419.742 cv
382.159 419.335 381.608 419.104 380.766 419.104 cv
378.765 419.104 378.65 422.12 378.65 423.627 cv
378.65 425.136 378.765 428.152 380.766 428.152 cv
382.68 428.006 382.913 426.528 382.913 425.223 cv
388.422 425.223 li
388.422 427.282 387.524 428.79 386.161 429.805 cv
384.768 430.791 382.913 431.284 380.999 431.341 cv
375.489 431.341 372.995 428.673 372.995 423.627 cv
372.995 418.35 376.62 415.914 380.999 415.914 cv
384.681 415.856 388.162 417.306 388.422 421.453 cv
382.913 421.453 li
f
403.734 421.772 mo
403.734 420.989 403.502 420.206 403.067 419.597 cv
402.632 418.988 401.995 418.611 401.154 418.668 cv
399.24 418.755 398.775 420.119 398.63 421.772 cv
403.734 421.772 li
cp
398.514 424.73 mo
398.486 426.615 398.978 428.239 401.038 428.239 cv
402.575 428.239 403.532 427.514 403.734 426.151 cv
408.838 426.151 li
408.665 428.036 407.475 429.399 406.084 430.21 cv
404.807 431.023 403.183 431.341 401.472 431.341 cv
395.643 431.341 393.324 428.848 393.324 423.135 cv
393.324 418.524 396.774 415.914 401.154 415.914 cv
407.069 415.914 408.955 419.307 408.955 424.73 cv
398.514 424.73 li
f
33.5816 462.952 mo
35.9595 462.952 36.1626 460.719 36.1626 458.776 cv
35.0025 458.776 33.9004 458.717 33.1465 459.095 cv
32.3345 459.5 31.6963 460.023 31.6963 461.038 cv
31.6963 462.082 32.5376 462.952 33.5816 462.952 cv
cp
36.3653 465.707 mo
36.2496 465.243 36.2496 464.779 36.2496 463.735 cv
36.1915 463.735 li
35.5245 464.779 34.2774 466.142 31.5513 466.142 cv
28.1006 466.142 26.3023 464.286 26.3604 461.298 cv
26.4185 457.761 29.6666 456.311 34.4224 456.311 cv
36.1626 456.311 li
36.1626 455.035 36.4522 453.179 34.2486 453.266 cv
32.9146 453.324 32.4795 454.628 32.5084 455.499 cv
27.3174 455.499 li
27.2886 453.44 28.3614 452.25 29.8404 451.584 cv
31.3487 450.888 33.2334 450.713 34.8575 450.713 cv
37.8155 450.713 41.3824 451.96 41.3243 455.238 cv
41.3243 462.72 li
41.3243 463.329 41.4405 463.966 41.6436 465.707 cv
36.3653 465.707 li
f
53.4752 452.744 mo
54.7222 451.293 56.1724 450.713 58.0284 450.713 cv
61.1602 450.713 63.48 452.744 63.48 455.962 cv
63.48 465.707 li
57.9703 465.707 li
57.9703 457.152 li
57.9122 455.731 57.564 454.194 55.8531 454.194 cv
53.127 454.194 53.4752 457.181 53.4752 457.355 cv
53.4752 465.707 li
47.9654 465.707 li
47.9654 454.89 li
47.9654 453.584 47.9361 452.714 47.7911 451.149 cv
53.3882 451.149 li
53.4752 452.744 li
f
74.9639 458.428 mo
74.9639 460.341 75.399 462.952 77.6612 462.952 cv
79.9229 462.952 80.358 460.341 80.358 458.428 cv
80.358 456.485 80.0679 453.904 77.6612 453.904 cv
75.254 453.904 74.9639 456.485 74.9639 458.428 cv
cp
80.358 463.561 mo
80.2422 463.561 li
79.4878 465.33 77.4581 466.142 75.399 466.142 cv
71.252 466.142 69.3091 462.111 69.3091 458.486 cv
69.3091 454.628 71.252 450.713 75.5728 450.713 cv
77.4 450.713 79.2271 451.352 80.2999 452.86 cv
80.358 452.86 li
80.358 444.769 li
85.8677 444.769 li
85.8677 465.707 li
80.503 465.707 li
80.358 463.561 li
f
118.174 451.352 mo
118.029 449.467 116.608 448.394 114.23 448.394 cv
110.895 448.394 110.286 452.309 110.286 455.441 cv
110.286 458.486 110.953 462.082 114.23 462.082 cv
116.666 462.082 118.058 461.008 118.174 459.007 cv
124.264 459.007 li
124.351 464.286 119.305 466.142 114.23 466.142 cv
107.705 466.142 104.196 462.227 104.196 455.208 cv
104.196 448.191 107.705 444.392 114.23 444.334 cv
119.305 444.334 124.351 446.074 124.264 451.352 cv
118.174 451.352 li
f
138.068 462.952 mo
140.388 462.952 140.881 460.487 140.881 458.428 cv
140.881 456.369 140.388 453.904 138.068 453.904 cv
135.748 453.904 135.255 456.369 135.255 458.428 cv
135.255 460.487 135.748 462.952 138.068 462.952 cv
cp
146.536 458.428 mo
146.536 463.792 142.621 466.142 138.068 466.142 cv
133.515 466.142 129.6 463.792 129.6 458.428 cv
129.6 453.063 133.515 450.713 138.068 450.713 cv
142.621 450.713 146.536 453.063 146.536 458.428 cv
f
157.556 453.556 mo
157.614 453.556 li
158.629 451.555 160.543 450.801 162.718 450.801 cv
164.487 450.801 166.488 451.729 167.097 453.498 cv
168.083 451.758 170.084 450.772 172.259 450.713 cv
175.391 450.713 177.71 452.744 177.71 455.962 cv
177.71 465.707 li
172.201 465.707 li
172.201 457.152 li
172.143 455.731 171.795 454.194 170.084 454.194 cv
167.358 454.194 167.706 457.181 167.706 457.355 cv
167.706 465.707 li
162.196 465.707 li
162.196 457.152 li
162.138 455.731 161.79 454.194 160.079 454.194 cv
157.353 454.194 157.701 457.181 157.701 457.355 cv
157.701 465.707 li
152.191 465.707 li
152.191 454.89 li
152.191 453.584 152.162 452.714 152.017 451.149 cv
157.469 451.149 li
157.556 453.556 li
f
189.456 453.556 mo
189.514 453.556 li
190.529 451.555 192.443 450.801 194.618 450.801 cv
196.387 450.801 198.388 451.729 198.997 453.498 cv
199.983 451.758 201.984 450.772 204.159 450.713 cv
207.291 450.713 209.611 452.744 209.611 455.962 cv
209.611 465.707 li
204.101 465.707 li
204.101 457.152 li
204.042 455.731 203.695 454.194 201.984 454.194 cv
199.258 454.194 199.606 457.181 199.606 457.355 cv
199.606 465.707 li
194.096 465.707 li
194.096 457.152 li
194.038 455.731 193.69 454.194 191.979 454.194 cv
189.253 454.194 189.601 457.181 189.601 457.355 cv
189.601 465.707 li
184.091 465.707 li
184.091 454.89 li
184.091 453.584 184.062 452.714 183.917 451.149 cv
189.369 451.149 li
189.456 453.556 li
f
226.169 464.112 mo
224.922 465.562 223.473 466.142 221.617 466.142 cv
218.485 466.142 216.165 464.112 216.165 460.893 cv
216.165 451.149 li
221.674 451.149 li
221.674 459.704 li
221.733 461.125 222.081 462.662 223.792 462.662 cv
226.518 462.662 226.169 459.674 226.169 459.5 cv
226.169 451.149 li
231.68 451.149 li
231.68 461.965 li
231.68 463.271 231.708 464.141 231.854 465.707 cv
226.256 465.707 li
226.169 464.112 li
f
243.918 452.744 mo
245.165 451.293 246.615 450.713 248.47 450.713 cv
251.602 450.713 253.922 452.744 253.922 455.962 cv
253.922 465.707 li
248.413 465.707 li
248.413 457.152 li
248.355 455.731 248.006 454.194 246.295 454.194 cv
243.57 454.194 243.918 457.181 243.918 457.355 cv
243.918 465.707 li
238.408 465.707 li
238.408 454.89 li
238.408 453.584 238.378 452.714 238.234 451.149 cv
243.831 451.149 li
243.918 452.744 li
f
260.825 465.707 mo
260.825 451.149 li
266.334 451.149 li
266.334 465.707 li
260.825 465.707 li
cp
260.795 448.655 mo
260.795 444.769 li
266.364 444.769 li
266.364 448.655 li
260.795 448.655 li
f
282.429 456.252 mo
282.429 455.528 282.313 454.948 281.994 454.542 cv
281.675 454.136 281.125 453.904 280.283 453.904 cv
278.282 453.904 278.166 456.919 278.166 458.428 cv
278.166 459.936 278.282 462.952 280.283 462.952 cv
282.197 462.807 282.429 461.328 282.429 460.023 cv
287.939 460.023 li
287.939 462.082 287.041 463.589 285.677 464.605 cv
284.285 465.59 282.429 466.084 280.515 466.142 cv
275.005 466.142 272.511 463.474 272.511 458.428 cv
272.511 453.15 276.136 450.713 280.515 450.713 cv
284.198 450.656 287.678 452.106 287.939 456.252 cv
282.429 456.252 li
f
300.061 462.952 mo
302.439 462.952 302.642 460.719 302.642 458.776 cv
301.482 458.776 300.38 458.717 299.626 459.095 cv
298.814 459.5 298.176 460.023 298.176 461.038 cv
298.176 462.082 299.017 462.952 300.061 462.952 cv
cp
302.845 465.707 mo
302.729 465.243 302.729 464.779 302.729 463.735 cv
302.67 463.735 li
302.003 464.779 300.757 466.142 298.031 466.142 cv
294.58 466.142 292.782 464.286 292.84 461.298 cv
292.898 457.761 296.146 456.311 300.902 456.311 cv
302.642 456.311 li
302.642 455.035 302.932 453.179 300.728 453.266 cv
299.394 453.324 298.958 454.628 298.988 455.499 cv
293.797 455.499 li
293.768 453.44 294.841 452.25 296.32 451.584 cv
297.828 450.888 299.713 450.713 301.336 450.713 cv
304.294 450.713 307.862 451.96 307.804 455.238 cv
307.804 462.72 li
307.804 463.329 307.919 463.966 308.123 465.707 cv
302.845 465.707 li
f
315.75 451.149 mo
315.75 448.945 li
321.259 446.857 li
321.259 451.149 li
324.45 451.149 li
324.45 454.628 li
321.259 454.628 li
321.259 460.4 li
321.259 460.777 321.028 462.662 322.303 462.662 cv
323.029 462.662 323.783 462.662 324.42 462.575 cv
324.42 465.852 li
323.173 466.084 322.275 466.142 321.462 466.142 cv
317.722 466.142 315.46 465.62 315.75 461.154 cv
315.75 454.628 li
312.908 454.628 li
312.908 451.149 li
315.75 451.149 li
f
330.394 465.707 mo
330.394 451.149 li
335.904 451.149 li
335.904 465.707 li
330.394 465.707 li
cp
330.366 448.655 mo
330.366 444.769 li
335.933 444.769 li
335.933 448.655 li
330.366 448.655 li
f
350.549 462.952 mo
352.869 462.952 353.362 460.487 353.362 458.428 cv
353.362 456.369 352.869 453.904 350.549 453.904 cv
348.229 453.904 347.736 456.369 347.736 458.428 cv
347.736 460.487 348.229 462.952 350.549 462.952 cv
cp
359.017 458.428 mo
359.017 463.792 355.102 466.142 350.549 466.142 cv
345.996 466.142 342.082 463.792 342.082 458.428 cv
342.082 453.063 345.996 450.713 350.549 450.713 cv
355.102 450.713 359.017 453.063 359.017 458.428 cv
f
370.414 452.744 mo
371.661 451.293 373.111 450.713 374.967 450.713 cv
378.099 450.713 380.418 452.744 380.418 455.962 cv
380.418 465.707 li
374.909 465.707 li
374.909 457.152 li
374.851 455.731 374.502 454.194 372.792 454.194 cv
370.066 454.194 370.414 457.181 370.414 457.355 cv
370.414 465.707 li
364.904 465.707 li
364.904 454.89 li
364.904 453.584 364.875 452.714 364.73 451.149 cv
370.327 451.149 li
370.414 452.744 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (oscard) (Intellecta)
%%Title: (kth_pms_comp_science_comm.eps)
%%CreationDate: 05-02-27 22.46
%AI9_DataStream
%Gb!!kpKmF9[Q+3A!;@Tc$47'4@j;Oo6Nt;4l(U!`HggG!j*0nZXB?DR6HTH$SGbPl7?YcW263(#a-.N;qi+@cSK7VU]p=V\KbK<N
%BI^_3O%*CrcY;R>3S$%o-BlOSZjVVO&^iQQ9La^]Gp!_6KP6l<,n9.g?F)jFNX#1=Gao^p#GZ9b/_dDY^KhoN/G:]?\kRH(l;]3I
%U`6fZH)Jo)a45>h]gi%Ab@gd"GM6^GahuBC=c_>Z_i;SrrO^jT9ZY^SmpXJV\`n>okco-@7IdBuI?e.Q;N]U8mdAXrRcZ4E0/Uqp
%o4t%-1pIf?s%OT^/dS&as5)q.B"KjjN1(tHPuf'Q]@-$T]@BK:6;9usK!D_^&0ekHIk*)W0PIM+3#IYepkOQ23"\fd`KEPa#UbdN
%8KegB6t0#0YCa7ZY>4]Hl*Xt1JQFjqAV@6HRZoo66N@uKgERtQn[2ma9K"Mg`;;LBDKBpSmn=:3i`QV8\/[>o>r(5=064N/^^\]k
%@HE^N`s.goW83sT'H)"jPKogscm,@A\si="eUO#4Fb&ddZX4U*d2<05nQ7K6Ue?X*+/*(?+:s>Sf+J.9C6F17i1_nERf6^`ckl>m
%L.IC8.M?j5*d-2-IQC.@7M/9g7\,9k,RIm2M8/7XJk=3_MZ)ITaiYupAm^sTik=nCmFD'`:)EV\b`nb_!N%5;[_=Cp-WL5U=<\Yj
%4)Ot0/c3isYV\cI73_4_*f&XP'`?8<f[WLq4sLZL)i;Ad8-JCu5-h*GEG-)J_mak1>/fOK.NXpfen6H9D,MfrP9U%bku8!nV,GYI
%rds%S.[Pcg\K!`"bJB`S%beuZgm-uG*1iI-\1c&#%*f^QMt=asnLcrGmRJHR&,_/_YU9,SX^Fk>V0EMO"M^W>X9a9m\eud_=]c@8
%L2X:?p^KA0S?QX.&c@B+_^A]C28PXc9cP6Y_7JP`[#nq0`qBXLN\EpN,*_"E5)Cf1g#Lk-DE']$SF$o(JcDAXX:KbI:Ul%eC:o<`
%#+s6Lf#MqNTn:V-qVX;[K@Sr[_f)&*>_1eZ$J#HsE>K3[&?[uVN6#r<B$Tn$m2=1[Tan19D@A/-Eh#;:*9W%9@aAl*YQan/D.%Jp
%1LYFq1p.bc_YW1LZpO\Foc[#u=niGC@!+(4_e_e(#WWk*Z(']+_\IoC0QY/H`!&UHCekZ23'2dSNf.k/RBmoBCW!\M.lKH^NmHa6
%r.d'ub!^'c4\+.4%l4*=po@:S53)2fC/l^@_+DUo`,:>(.fR95.Ln1*=*L&u=ks=M&VD>kX[7ZbQ-GYTMuDY!iGaVPK2:Qc@HF+(
%i#VJ(s$`^X?2_]k/l+$Q=4C%DQUp%Yob7?OPP@;/A7I!PJ"haCe5-"/c/Ns?'E>U*P(Zod:]-R*j*1/0s+P(bOIsGI_/J+1r6E%8
%-X!&Qbsc-J'S?9/b90"^mjI(C%\M*sd\iFXP%X-K8Cdn\09Q8@r==I>_,]?as/W%2H't`qPa,elp56#sfdD(!i=jp@3qK2>ZlXS&
%<u.ilVjE1MqQqB'WE<ogVk*2iX9kT/4In1)RC<_5*@LEP*"s.WYBF_Jk1Q_6lrZq,8oQNu,3ql#DSMb/eDF1r1)^hFPTVVH--jN=
%k'sGe0j#$maQ6E!.0!%&Tb=EP74KJ-PJs=K_n(:mU"3^,ZVq?X9ENpB7U\_pP463l?Mh>TUH<$9Vbm4CLZS:fh4k\L1$YZ-G[X:Q
%mU=eREMl&D>omnGd\"l`P-0@TfpG;Q8G7r=Q,9rFhg_DHBW,["qH>)8aHJ'N?r(/p>TTO`0a6m;XX%/T8FMJ9<K=2J;lbHfO[[E!
%^`$T>n2aC1qAo29Ubmsg8R2")G&1#R=b#G[Ah@DGPZ]2bV/R-q-q"rm:<!ol7WC\1fG=HW7[$^)`T>*?5E352E]XIf:9eQ.J8:eq
%;-p0%$ReYAP*mgr^jUe)GX4gULq*/*Cb_8Uet7k$%H@fj*S1PgUrk.%\3sYb<@U9eJh:qIb&03ZHiA)/(0**sHC[AW'']sWN@LO;
%hm!I)8CZ@u-)32F$d@p\oY"Fd$Fq10)=.\!%!GuC&Oik-p.=`k-Xi(XHJ*[V`ZLb2D'Z*0Dc)':"c:C91S0S0cOA8/^ROU!geY3J
%i2U:]8or2DQrZiX`pWm]#@*!$iY?$Z0nd3F"1+Q6lTf*mD`BX;&"H"``+=<;cKm!,h#TMR__h--3=#+m_Trr+ON=Mf9Qq6H$!>*l
%(3Ns^:-%2d,:U$j`^OK2E!p81a9l!AJkUl@P#Xrunj'f're>d0>@chn-mhl+r77TGSUN1f/O?9)'D;j=#l#P1PH+5j.Ki@RAA-)e
%"J3In`-kg$D!O5fr%tlt"Bk=f.09''OLCf8^cp,D?jaCDI+SA%*Fa1G?mN0J]n;:rfP72Dnql&8r'0+&!GVUP%58$3;r<5O1^]U3
%5T]V#\/EL-ed^Np)SIMUeC+lmJosC5^^l9VRtU[5X@b&C*OE5Nb\2sX:C3[eZoL^CQ[hX-It@0%W[/6\JXP!#UD+N&^s2q@6``sN
%fs;gIaNEag!!>;S`$:[p,SB.jFJiRZLe,>8e>I;PbYF%lE98iA^a-M.-rLV`T^lp=f3fnVN4=[e1-b1XBR?8Z$FBju/m1ZHJ2Rtp
%+`%`lo^#[2)MniZ70lcu?k5Kk1q=OD<MIusREsrON-G]C-"B>MO27d-(6tG$16r,P'ei73s!$8$/M=qg:tpW283Lnqg>OF))S%oo
%k$%b@()=Vok4_Q'\>`c]p)I12@,2u2.+TYOC__G%9=-/O.geuNL>f_3k.t4hi]p5:X/"hZoa6+CAel,RI%&qI1-u,pL,pgT.D;:P
%rU*Wl6gf`A$Tk4^/9_V.q.+.8U\k?6!Zf'k'K\1?N3,!-V<AaFPg5M#-5lP3dKK5Qo4engeNi$-]r<!G*b49Eee2M]*J8cpQ,"jL
%Jj=I/kNL$l)p_&=R<cSF*`5\%!rb^_3B7kGDmr@-4)tak?g,08'HQ(i<n4I#205F<d*_p[W.pl&e^*kP:;!j]@tB*-'\XlN0B&cX
%)\4oSKU?A24(M)6X7O%M,q1TRZ!sfrPX[mHKc3c1?ouhSrmCnOrW#rL>bj3H@[u8BIVt1FYU8QI3>5d(eW1\IM:57FRU?As.J-X`
%VH?()YFgGbJ6YmGg7"<8rT0'5ecOPY8pNQgRHit$Q5&Zrn0-RAe9ZX<R,bOoQ.UN1pOIDnBM9OC5T>B];0+\a5qf,Of8\K686j(r
%e]S:aY[0Ub.`St@rh\8M'!iY0++1rh*feKKi2:`L;+;LY=d%qED/W"&MHgC7)>]f2W!HWPbYsPW,8O_X)RtiXj%M_DJM[?I)#[%9
%&'34eY,GMUHArH.L0f&qV(k0D3,<$lVj773bOh"<-"'Jo9i(:./!:(tR/2g<o$F8L^VMBXHCBhQZ<`5AZgk:ZrI+(Wm4Bf@M^YVI
%4KSi..8?'Kkgt\?[MSPW1-:??$eg2W#CS:08tpKMCjmuli\ZWP^t;W_S'[t%74$#gBqqLtXhk6u%VrpskVH).VUh<F\5OeS'j=26
%Vq$.@;QhSpNW?d,qG+$@^G5JhZDbS)!Bj;0:D3USMcL:g>G-9[_`L6M+YQG*$M1'R3YJA'l$Ga2Kht3RIlWFE@4oA37<@$hs85VD
%HG13b>W-mHD2a1>9$KS[5D\']WF.o]]g[WU2u8WD<2!bTbSI^_&h,W'*eq3rN%:X`^`V\HSSor*H6:?80PG`iMYRNWMop:B&2t_(
%AdU]$Bc?FSqU4#WZDRp(9tc*LoUb:nQ*m.1lYG_?;<ZdHLQSI\CQ?hMh]da%_lsBAWS,o[Y+kYri$[Ll>$$#1`FDcMW!12e[.L0G
%4;e)c?_4O!V/eg!dq8O(GUKHaS`2%e8;qedPsn+nc6V\(eC-k^qI7X9S=6R;ktF/&@6g$8qp!;5e/]<<;o2\aq*`WrKG%mG,V+c[
%p6`Z4nNl9io/ih'[FoF@5I#Q=9?E*=:#dNKS-)5$:b/d0J+FL,aI)8slUH,NT!ps"<9IY1JF@5(I\&kT(=+88g;D./Sm=j7E1TZ9
%%7Na$5h_rR19e!a/ZMoFM-21P5J.7b]FK23,Vt(P7cmX[J/MCFmO#4)b0qg4l'[9r>g0KBM]Vh.OOXKhFubHf\N+uO(L,*G#+AX/
%?:W<C]<578ZUgDM$2*c^>f9:Ga*%m)Ah4S*]L@N8([@($Eab)&QM]Xc)+;Zjap,;`W)/AMR2iuaqW#jM1B(gHH]$Jhe+=G\nlSk%
%a!9M07m#'=Spslt!#ceEM7"3XMbdP[<)aJYSedu>;<)e/\g$`bX)XS!*$?D$c8<-KdTZ[LYG$G<I8Zcd\=P%t3<:]\(,T.Qe4]/P
%U1-t)N'!eO[&Bmt-;T',$'9jSojAK*C3u+;m<QJS[,T3!V_I.,V!nq,<J-sT58*Ym[XhcA+XPBBH-pmF:.nN_(6uhF1;mMC_HWfK
%Q4o!/`Ec?D:cSYTM,<N'`TV<<W-L'WLO7-"6*N+P0BU;aerQ1bY7jG/]g(CL:IiM:1'+.cClS$NkZ=J1Oi1oPKu4>m@$e)g(<0q$
%-\Z^bbITr`KA8e_#sMKM^6Zd+m"J;G.5P8ccCtr9=>R`-oCV\/)tfB8Ql?Dh+`nE242a=F3b1Z$^g%I;aWeX8,`L8-)hpd2"aOG+
%Pa,oF`a,r8%r4b5k;C%<d=WXa/@&p,Oc[:R;BrR<)Fequg8DKdOrE.CcP4Q^J[s\PaCgJ,)Qjf0(N\t;GKS@.Jm8e];5W.faG,BE
%IE<=+_J!b\:OjAK;ui9\qn+X5KS\X0SoLP*(#?^a7o8PKcjQgYAFHEMomk)WngnDT1A!!8RDWIq@?&3f]?raDW%,bgb_"!7K[M=N
%EX]_#?g)!X;#M8Q%^aq:A8n2j6o,htgbk7tHnd+hIp'd],@$WPk31Vj:GS3_.HK2r?)]L^T/>[dUULu0VOSkLUUCd2acWH&<ImcO
%)#m#2aIY;Z0jfkH1HK1h2?b(#D1Sro6)f(DPpu_,BJQSk2/;7mc"'`'$\'s=K(]e&d$[%s;@2Uga?c*i2PiL,(_pY1_;AoBC$f8p
%4cV*Eg+uVNo@Pah\"LYHE'N7fC)=riRC=*0/@[M-g'"I)6(]5e'cDL+`hEOE5b9Lo2b"hM[5,<@0kQK@LC;[j[&EXZ0^0c3)/gpa
%"W8maJ/219?kraKX;-X#Zdhq\DPgl!ccG+Im4Bf\98k!f^N[No+L1hm70:d\("La"od[e%J2,=e,q$R!@2%er0U\i*<:hW.]hU:F
%WqWAPZ`$ta07u".1f5>*/P%@,Gr2k+')GCXS*@+LW:(t]K!n0X4S'@+O(E6,+e5c'#_"#LB`0@UT@I+EQiX430bjYM\Rjq\lOU6&
%r?^[(1@jMrIIcPWaYM'2`e\]SeFTk9.VDn6Qu@\ISUL4RWiE:".oPa8]-j.[rF*DnmMFk)kl*+%4.*I4`*#i!B&eL!U:n=!X?Y(B
%(t;Y=Ni+@Dfc@sm$C[S*!U5?$F*g]>PH6tp903VCNkAG`eJ57^A.%u/-'7krKL[U,o/5n`PeVYI]b[u(:si=2/I7T\PF'M&@qZr?
%SWd'iZ.PS/=2JpS34&UGZeu`M2PPYi6r+fO#Zm/]LR\j\ELFe*qLiu%cEmN&&*DG>%rdD@;,QhoUCPT$K:PG"CDP;j_^[,[%$HXO
%k"RG-7I:Ga%7/+7a".su2RT+@5Nemp$#p"+"t5nDp'Ph_;&A9Wa][2eSi8BbM40K#oo::>L!@N*;N_[+7&VQFR40p%]:,fc,@!_+
%Na)]3O!#OdcV-"QbPFTK<2u(FHkq[L/45iK=66[]'L5Qq&"R\mV!hG;:=<ab0[1&LK31P34!ZQ;M"1hXS2!oQ8#a\NW&.JJ]okXM
%K<@OM5!cDp=BlRm0;Lfp"[uR<$>VBD#9cu*KNT.LX[Xm;W5M$G^gLuJ:OA#Blpm^p'(-"MOiHO^Cr+af`lB8He4!IC0M68n:G]k_
%84A-3kRO="fi96'/9B#QL%<hkYtqL9`j--f_pIfdAB[gaP\P5-qk/6SiYq4gf(C;R$6<r<h@17D`SSkZ[ef'kW44*T$8!kGX2-3G
%H:eXK5SUI=%_jO%4\<!_fsOgnpWi*'%.uJ(Iu*48;4hk;^#MX(QuSh\(gto[P0k?"qiRV3ilfn_s3@@EgaUIX9qmk\qAT$B,ac%C
%B?VPoe-DAXl9D((79<e6>?%&3>":IMWO6JC9T\?a?u7gNgmC$X7A=3:ZdW9Eg:G[C`a75jEptmN%K$2C<CEH9<jseJ5AP+IQT<qX
%-Pi!?VnGN1jj@2tfZktPs"a;^\u2*&<;)rbXJ8sJlt,h]s/QtOn'fH^<'6euoX.\ZXgP*((IQllqh\rY/Ft.0Z"9Q7*F"gU),?&H
%p`3<(4CflLq#`J:2'F7g;D,okpk];V0+_`>kUEJ;8P%3DP+^l&6VD_aJ`#Bl3(_<&iHeB%9gTu;POP28/TM<?+]#ujH;[1*T^Crk
%noPXoU:l/H!`f%-E2594/]dO*k#'>4`$,g;!WTEV+%KmZ7I6M(7/NZ\Ir&]c'[0'HH@WEPGpmGC''sP22^NG*clZSLq`#Ab`9&;m
%eO!W#'pjHb&E_UQgr$n"?PjIV`ZF<8JpG96QiQI'Y)pLKb%@DR6!,:Pkl/ADi,:UF(Ajg(afl8`8+8IE_>Ti"`3B;HOqbbf[\M"C
%BobR^a'_uQ5O9!]VEPLsk<mjs[))HPQKi@fqZh2;fV7%b\u2o"*/"3E/*qPm8f:*rYrP*FW__YW0`bnsf+dS.0e?A`8Csu&-*-?1
%0gcrrJ('h,b0D:^NR:T8,NdUuBRsSU4afXi$aKhTbmG1Fc1[4cO0YZ>\B+;VATsE)W%4CcPcRc[$>k.pko6e1Q)Q"42FndG8)X@i
%+//"d&Z7(2'`J,Tc1[S(/Q+'pXd%ZR;^j<D>,qNWg8-o@Y(,LOFPX72/aIW[$6+91Ds0D&RpIC':;M$D^b[\k;1W%YiJ""XPmBhR
%%MUB\flK!r9YkL:/Q,\,.Qjc[/Zb?%,?$]ig6c<)#/9jHS#mHD#]gt]rN4ll#&P)=m$^7NZi/@s;XHm[LDd!W$s)m/nJl86X[1,`
%(jshGfTWO/PQl@AE=dC*r66VkrtZ4SockQR=+EV;]Or2f0ii^Cp9t_G@9]6PKt/D0OI"Sg\Q-lK.@V.E5F=Hr%S=[$[%*A_K5haJ
%<NnXJk=N*(#Zl]f-?5S+[:t+@f?)[L'')OK3Q)de5La]hj<$@.^iOWeppZQU@9[mJZA(^h:K@4Eg,n=Oo.+7_YTAq)CAOiT_Y+7J
%cZWiZgF-]D0apnS-uqFt:?@`*Sl"3@0U9%Y]-8Tbeu2,D/MCY_K'rALGAn%n*KEHuQp`RdanHbDZ4d'c2sA))AB*sn-H4B*4)!Zf
%g#)Es\N-&fn^T/^qtnoo[-mSF[48=0H7/MplqY[)PL3c!4R9H\0!EnEe=(0`C:Dr3O/g+D:44]URZ9Va.YC%=\#.rq;!teRj6sBa
%ZTi?E4eo'D_\D'P/Yi;fTD\4n1sY3@&/"bKdKmGM<_"jdJ6_<Q#[q.07cPCW*)4YtR.%5ip8a<dng%?S]h*OC?chJh&;pFe3>t[_
%Upk$H:U\'MT5pKS`b<*JiMb4U*l^"O03kgNqk%23d-Zd=C6tA>lJHbh8"eOPp)E$p2p*W)Yf;-]JoK\3AZ&G42&Q!cnBn;s[3>Ji
%(lee'\U&&C4gI:hEZ>$\)q51I@$g^sB&1@@>Fg4q5dWZ@9Ub7h-e84+g/ruIai-lMgP)6QmBm8rF"LV`IocGW,KMe:I7R%bd'TS_
%#[#QCis/J,#@7Wmq5;se]CmlRK7EX[QaO3Dq[@O`<(DpLhqHpe[F\[T]CsC<hQYaFD*i$i0)""sDt;M>MnKPa_POsZlJWiUjdc8=
%75"Oc/\6,9pA>h4CQPS-2_K??dmM$\=0.S<XmNaOp;lZ`:HCkK,^"REM_%o@9nLW3'#g<_llB=bV6OgpC9]sLig\^T<la5AV9/0Q
%hHfe3'lr0Cc30WA58YB^^%/q<UPUb>:bWYpcX['/U2.<WE%&):Go2Iag6fUSN*Q:AbMY.$Y*bcrQ\!Njp(RcXk>5c!s(I=%n2)-%
%>KALkS,Z9p9KLU-2!J85/:0Aq9"F[Zp75SHI-];@4_<0k5PY39Z>_[72!GhF7RLl_BV@NhN*5cOVq:=""p+ML-hQ@B"QF\c^AkBO
%GH*JjXmM[A1$<FMrY[20pVbIXC,CQLF&Hk:M>r#+iT2C?DZ0J4DX;8=hAlPK%_o3UWIK*&%:IB37Y`=ZL.%2b3jn2T-L.M<r5K*n
%&#Q+JPJ0*J^N*'?;uXg\MLe/>6"Y,cXEI<N.K&X$*bN(krVpgf-(.B`Rhl%9f(0uYp&)GNR!dVj.3+Boj((mSs0ad6dpHA3B=$(d
%ZtHf*GVkWlL-sqpJ(_]kr"iF8)b_T2?D6&@i9MfYf=88U-!L+oc-d@Di4"'QmppM\_3/Ht=ep8B5CP!>C#>`Js!?@X!k;Vp^N?4C
%FfMi%]Z'So;b39Nir=B9s-9>,l)(>u<A:(2"8uT`fY=?"3dkT1Il@rX/2$lS^?#qh*<3K#%bC-9I$h"+T^*<rL`NR3*Vr7pn:)OY
%[&[:sL@1`6h/(`IY<V6?6/hi_D/AqG-.;S'R93K!V#R9_Zp"c*&lN*bSqY't1KOeR`ig,WrV!VPDQX]Z_s(!q8^[j$UZT'HqH%a?
%deqF%/`5bcWjPU21K!M9GUsVebm$_@<C`8,TK6hhe_sNtCZ2Z56T3\bm89(Lf=#O5L)D]h.O<9.$L.b1>A>KmgU=O5=;RIOUFt>o
%N2ljH&:Ct[J&lT"`nIro5L%k>0sIS,L=K^R6uM^qh(!5'2Mm)Rb^b76f@.i\3a'(o69M"65IBD'9liG\:=X!oZ+4L"S)[;6-UMnO
%cZ!U#6X!J;9sX=:jkH)\^\`]/%*7M`i:C"5rV<bPBQg;k@2GXdj$(%QB;BI!T5kab%XeBdMMIBQ%9(j*"N)#WH3NjG#5Z?D'@]ac
%g?jiAQ[73P[fY`\SN*]/<*h#FXbkNK?j8fL!$Mf*L"9G6.?A/S^qZ?2$,N$5[9N%M(H6^/&H]7UVr(aK&7X[83M)06hi.?J-B7?I
%cB-s0BU&N?"OSQ(Z[$$$aF<W^k%G#qd]kOZkBV!VffcH4a<hZ,okG:$CJ=19n`a321C.Za8_TKagD*QM@8qE.lqMm^C,?lf'3a/&
%)GH[V<mbh]jeR6u`b6>[2-$hd0/Ta'qh*!!R#!X.N>Q'D.ah1Q=_p(bf56rf&P<&Oi$0`=e,L9i<U";K4_ZSe2PrAA`caMp#P4H_
%f)Uo[]"t%8OD]Z;D)mp1;Pb/Om>P3]hEK9I+sE/9,CRa'bdcUO5oX_?&3&HlgIWX,f]Lq&(qmZJB=6,,26HcAL4RpV'?`iJFq^mL
%>.3Yr,8b3-K2K70ZV=uP^T9LAqE?&hAUu0ADuL.(a(CmLqNKi^=rUZs%%9#a_bk2'j&ecQL<Y$4JPm0l6ZBM]hn`WAoK=8&>![7D
%EAnu=Sir+bPJN?mD7A1r!FX?C0Sj=.5AQ;ARTX^=T$<_!mG+cZpE&$dV5Zom!h4?XN5nsHen>@aLIAW=oNMF0O[kk*(cS,r;;)/,
%R-B2AbneB3NQ^%C):QT4KA*+Wkq;aM(+2Xa;6/0R+u*ajL(L@ZRlLLYe>b]I"=HUZB1ea-"[SVt^#$4B7VjmIf)O-28rIZ+B%:cT
%pb0p9T,))FXTkOYlcZSndZ4umLF0pT\7:M/d#.2an8g;[+6us[;2;*X2E4q0Ne0'@X4FE(^TH6G8N@ba/;OL6WiXJ_b6THK-jS+n
%esZ016bS",CJ@l-*TKL,9aB8E4_n+t!hr^))pNB#h7!L\E&\2&S'24@T[>,q@H44"B;EfOc.>W.p9EgTAKbA7C800C6Zq:L67S?r
%)Y,6'Y1"WNE)%UqP*'.nVS,GEKS<f%Y\lT;$"9<XW]WgA9q,ku'h]E#h0DO/1-O'=YiY/WCF+O&,C>E"4R">tL;Sa+F+e/JLpM9e
%*Kha7Sm<RZr^'g3JECMtmUnOB[V*U32H@q6#U4l49kl>\LA(Vj'*O.n,&=igRUe<7Q5P\!@+C)C`K-ILVq?[Z7cl4UQK.GZORUKn
%[iM(CV19,*gMhT(K,UQLBi_,mGY"TWZ+P7^1Pt;M1.n#;f]M1,Z:<c3Xtr_kN:PK?W7h5+6(^JFNL;LVHNq.qH["[baI7AlPc60>
%K8OCuRC4Q6Go!Ve%X\UD`M[[ModOi?HCtWRmnR!N%I4O(2oJmt:H]R<RV*SLJ9#C.i-[-n%#m8R!!.8h[0P<k<re6!Epi9F)3[V+
%%EN8UllO+JS!gPM@9pH(YIA%L8J![Bff*jAq"j#!E?>KEp7#blT75T\,KdUq;4)7EmbR&fmb7+!?#;5?F=/g5VBT(sl/?D-rY4fa
%\NC+J%s^E%,NJ0P`U`ZP/,!cGZ1?,d:J\X5cYnb38(IT1p[5)JrO=D8U;%e!h*2D,-)HU@1b[rc?X@GJ]17WD:NRT0/F=L.:*Od(
%/e?!%*),Ft-MiL!kF%7XpaCE6E$(;L:XM7j-U2p&$;"%a@mrQq&*l^V3?%`(L1Gh`5Yfror/cNZbcR7WH%1c;%`:_\X7Xb=`iG#%
%;JYJ(Mj<nU<5%Gbi73_jhh:WC5*^`OT*M,g<9f-iq"c[c[p@k/k2B.A.f1Pse\(qTC+gP#$gUDL++qdNZp1^Tq>/E(iP8Mu"kJ.r
%-J*?b`^tGr-bKo&\)O7Hc>Ljso3Fis9'OLdiD'5koGSVi"=&VbY^:KOhMR>InKjUJ>r&oK:7ak;5PngKX3VSsCctD^K>*:N04.=n
%:kE3K_ieXGDmArf>L7?9\':t*l(IRl`JMWK:mYfO3cKF9j030,[+96&(k.=E$gA\,6-%aZbCI^-Yto:\q_:kOFa4bR)YLf1*XM.r
%iLoN->BJnKfI[pL)NqEC)5BK'*\qPZA$\Dj*?##>qY1hh>?>Cr5u68@>N,2JMW(3UVa?(I$FIPR@,^@Knj*KimteCLr3"n;?D^3r
%(j(7I:VDgOkAJpB"qC@X6-1O28qg)B=_i#(>;p4HepAL-%Ji87rTmTZ#0g--$$e>no&tg.;!Ic8`ba#Nc%pTD`H]`3pZm(aZ[&;b
%P].HZ[ZpA(rG;077YC-sGLK&/K>p*!Nh8)Y`e-`&+%(&uF@C/mBW^T@40a(['<[<!%EYfWZH8d0%F97u18c(UN5C=OL/.XgGK,9,
%KZ*8T2t:PehT:NP=;g`ci73DQpaUUbi^-fXk?ksb\[=UAKF3Q$(^<-*)"b0qLu2/6!Z<g/d''hGr)D2U8k2b0ReUdADe=VoU!'"Y
%PjtDZ5O$DDkj$0,d.70ZKM\N8>2pP<c#P(?1?`d%<.=SD)\777g:V`\np/bO>oq7pGME))l(I.adRVPud$)i4`ULZfcpG\2o%_BU
%K1!Pah@7f_9aA@Y5?XVG%=0&+5JE6/6-3:e_d4DGhqq&0YD.\D?@ST8%f5i8CWIiT^;.q>?H:lPnQN-1L:unP11E6,qcTS13p=X`
%hK>lOJeZ\^l>7s,l(&b'R_0!/]/-XA4;fsge.^+!4n5Z`>)W/t7-!k5SdO!g3ioQ6j?9&@CE`>TP87TR,Mf#ggTM^=o](;p6-"V[
%6Y4WdnLiL]q6de@Wm<jK2#A+RRqIHSdJ3FV%>/7.H.#iGXn3a;)jEU(s)^Da_]FRd!]jBG+%EG1dR6"B\Vp8L2b0WXXUg%rod_&>
%blP`=/AX'S.$&eQ'hNJ:/d6@t?6;!g.O\5bebAk:PYQ/+h?I\h]2Tup:*3-fhOW?KT:s^Ecd_S>@D1*Ta^)1S>IunV_C\."Y@^+F
%5Fr:uZ[%VHPPVoich.Ol]8>NMqF/*0Ykq"#kN9\Sl/ZLMD;4]c-u;&sNUA8W9OYD[/=8V,W*Qn+:%)Dlf5%92GE\q/V['\@#-lbQ
%:J1BRm;@]YVlfH7>(=#)?LF<>]p!WS8*\n6Lu!DmHZ%<1mpDm_U$:ADcWal-kcOulY=W_YCARSsSWGFkhX,a77rN!`$)gJnYo1Iq
%n"1!8UBf8[omX#J0Y=sYhE$#:0o+C^?G*?s9qOTcNn;0\G=B!Fkt@L4/9VrS+7?@5VnMsgRbk02`lH6X>jt"&\+4OE,AQ[:rAVMg
%8ncH1!]rE:>>BokYIX@>jZV@8MMF^$dnRWZH`pm1+4nsgB&EA,F4[uTMj91_T!BcLEnQ92X.s=RDK[_J;Qg\EZ9!<cVL1!:::dVW
%1NW"im"aDGl/pji^O%KCrU5`'g\^?,_I#``K&8S4i8Qo.BG<Y=`DWM%,dYe`''jZ/*T'Pd>%!3U#]=6U^*_t9a\+Lt57F_gkIVZf
%[^<0.30;u&RVnqPL$ce;Ojr1.HRR^$3V1IfB\^me/]$.5=gt3oNmbK$8)&4*%'+7%I&lX>*n-E:Sce`&[`A.ImokN!QFQIuEqHlp
%O6jW&[.@OH/uot-M/Ro@YB0?GI9$`a=hBZbS84ZCpFad]$1`4O6VKUb,A8>!Li@/N+J+8+6<C7EI5uBjMs__AJGXt$b:u9t]^b[8
%k[jamrmTTe*7fN-Vg.0"Z'uD2UR;,-M1_F)+)mUd/b++IT=`\'"'bVeB6*<Y25p0tQqf:[?Q9c&dkfd=k`tdK1c`]1e`f62F%u+6
%1X7eePL@I77cu_"?Li1J=\N8uG[ilsJn)<u<u6'Ce'$omjVdD1Z0_MI,TW*jpGs7-s4dUd#C7@_CSha$NkJ#dMA1Uj7q$*:l:Stn
%gMfCuF>T!<66(UjSUZ)jWZ<`Qk\b]#ahsc=$C6c-c$\Y;U[Q@>&68=8.-9d68t<F,gXCQKZ2&q%(a$MSc5MI+;j+'7`.$s^#ei`9
%G4u4?,"D?OlAWs@s"3Dodq-,X)TuU&HZYM0-F5;m^`7uKeOMuFA$!1TjrKDjd^H&(hJO<b<Y/FNb?aj5c6mQ(PYSFI5J'G)XT9:C
%KNW]^%A,$ZDDib>S&rm[H_4$SK>.[5glp$@EQ-WUj3>#c/jf[fK06mW8`NgDbOB1o_8tl%T41tK>3DdWj(NIt.P7Q"Mjt\[cX:cT
%VNZY?.+9.,9TNX2`CcuIo;(&[VeU]tpIuGtIbiq&d<B*)>[gqQXI&6nZ5_Qa9;7<\P8AE&Ut>bpD?D&!+P2IB;`48$H'CA#/J?6@
%b<pacgW-!DR)ms^WtOH?`AhT0$jRje"6kheIlWU/&DkNXae<Z'p6CJFSj7q_o$2V!Pu*,"WlN#+7<]GtUb7;1#XnN!1p2sXg(3ZS
%d)ALl-SI^!!MHHP.j+sXq<?K6U&n045,HQ@D`J%h7fYC(BK&C#D+9eOrh1CUU#B3n3KBD\fpnuP;'`G%9MR4K@,r9Eh9Wi@:NUpu
%)t'P[]"Oj)h;pA&n8gbL\N+t8IT7I8!77_0m_@j.S,4"U\\6_L2Vb?F0t=(HMZLbVe"t7<5YTnngrV.7_@MWO_cn0%"nt(Rl?l2V
%%nnIo4"6XJ&Y&I@BM&K7dLK"q]."24%oj?rZ3$hgF,T;EK$T_ogJV#`/bN$)-(CdT@mIe?$]Ur//;S\#lD=Ae8ADHm@V)e6Wc%K'
%HW1&^F8`X3f]04qJ&-h2)Bj0i1?O^0\]C.N<(D'J*Sl")`i@o9W&5Dh?,%)TTa:9GLD/t$ajZH;g!YXjhoX$lp>nm-jf8t#B4'@j
%nE/<*LAU5VUoW74b**NBBdAnDe_%DR+3)kecK1H]7!h)_4#q;`\%+Ve4\f(R$-o@!GKS1\j'cdpV#qsDKuPLuh*9N_A=[8o0e_\_
%j`=q^qi]Z<otI63X;`PaOrU/H[8UeT#c0dde?0Gu:>7a*[8rX7;XNIP;Ta0Tg^Qq9L[aA9aRF(5aB4&Bjfp2N;7O3JIJOmZl?!jE
%9Kip:#q0S!OCGY%[U[5Q<[S)ap-+2UjG;!hjATPa<Ai>3a&LUG:tZDc&"e0Edg-dCNR;1IqibMBCXSA&FV$Xs@NU!;o;QIert]()
%lW^E@f[6(IousM:71C8[(kN5Fjh;t_d<&!@D.I._!N,KKF>P;&n/>)[Mm%(nl$^K=qstT3R8Vj)2,L;)r*qMj]=^?MHFdP@*dGZB
%Rl`%2Nbd>'BB""]?!R;<=g3VjqK3QgCfg3B(bQ?6&PfZd%++fmgp^\l/rp$,:/,-eFlmYHf]6<61f$$CM2b]u8FF#N_X#.XN<2R]
%[ViX67Q-<'a`KHg]A'u^F7JT$j<35=o`/^.RlR'fm$/ne$t=MCq\3YI=!r%9KZfuj]?mpR&hc:-GG.kCf#0fV!)b2uDZE<GgruCl
%BHR!27eguuI)2?3FJ0RuHI$_/ZmEC=Oj17WPO91EA+iYS%dGB(#5,9)m;HG-D5k-kmbEM.!jR"ug<pO*rIbsNAJottn!q:Lk2Mq2
%j>S\J--Ck(1390ML/Uc),pL;fE.6)615GD<CuB9X\u\j9-0=2k'1=rX(FNf\`!aBP4Jt]shLA<TE5U']BeXfRGD6np+.!::E1+q7
%.S5])e*I5KTtrBtW=h5*9m_#07<D14=1W=.EWItPq,RYR"$+"&@NXKR,)[&iAJbE8;JZ0m_/r:jO[Rqql)BYd8ih;@-FFt69tdgO
%qXiSB\W%e6VO1r]o/8;q!IZm"FW.j6`u`C#Uq9=YmA/ABk?l7W3h:bW?qua+40$nnN;4<obQYrAj45jFm;t]u$$/5i$*DlW07YWp
%Hrml>gO2/fq7QDBGTOGk\?Xu:j'CQTLP2bURYZ5\(cKd>)K*=01#G<*g]/R(][E/?a;^u)pSYh^K@n6!O%&F#Utk,JF=n)ZW.Wp0
%r$L2UZ]XG5k_*MnCfi%V8*IoM<bU*[JPu[C9qSHO\30B::6':H1acFFUlRXn;BpndjPSD*ptLP>bqPPE1-uh.F+jkM@\WG/*,QmQ
%SD<?Ek[bL;$;>/XdD)Y3&h<5fYS>0dnN1+8bbM+(N()(R;Y&pe5g>Q/iRmQBYL31MBI;efi7O?6!n_=a4EFq@(Vf29:c&V$K30nd
%0Vj+e&W[pBEAhjECM*QV1@J5t0+W7Wbp"8de2\S/Z3^4R-i`b3GG(CVc/l2sGI$$T0k*D^&F<Nk,;-MjirgE(?g3+8h&1JKQc?;,
%Epnt+19KJh*_i@<^POfJ$eqLeg#Xs2A1#Ns^^1YqYtT4b=5c;qH&)2T%)5nnq/I[G>rJ8[Qt,d?@Mq2MrJJNKR8Ugk/=XR/XGO-l
%Id&D1cI>3Jf!d-6r:0q0Aefb_$7o,\XQhK7`Ni?)Q^Lq[M9L#<pr)b#a?hGU^&6ZK7kBkG4kgk?c,o@ETp9.(=FGEJaR$C[<`EeF
%]PkrVha]2`q[]`mqsPa7Eo5)J28@u;Q!31/2oK4\C\fjYot`!04$mPh_rL7(pqAoYo45ENH2WE__kTc9IP/rUAH(P-[9c)=;c<RC
%-4&okPn[1'4mOhYN,YVVC=+7&n@`_QP=fA=gT=!nb3N$X\.o=g9L?WNa,*"LDm.5!Z7)OI7t-<=K=\Iq:;+*[['rY)!ncnnWn.U?
%bWNT4[%Dbk[rjGW-Dj]icHCW)CoKHa2ViZM5DWnN_a(m!f.O@[jPY=b:9ua`oVZ7,j0h%r0>4t[:d(@n#K4]Q4)ge6.tuI8WCOGt
%o;_r-JoFG=;X5=)[tYPA%`Ip^YEc<K+4jpQH)Sf3PcEi?K'XGIJpVW]>F)u*lVL"j<AZ!QYV)MJMYZ(JA4r2pn\_Qa=hYZm//HuH
%*T*fBA^RZj(RhCO2/cVi(HL3/VB<X);*1+WZ"5u?1\/-TB%Z-Q]>boL>1VdgcB3koY-l%G=Y['#:BDt>40qQ4d5\g$eso*:?H=(6
%pajY7-SR(34]qHI(@jf96F.us+NO+t&,(?/[ZcVfD#D5L05BS(][$;?Y=?-:;a@LU$l5!2PmYS([L1:*L4'YU;`?^G]c,J2?^2Zl
%?l-sm4eH\0XNND$phr@0daEis4,8/$*943BL2-('7t\B8Re=RD6d#lVobDIC`O/NeaJ<BC<LEs/P2cFK3HNQ84@%f5q;%T2:qR8[
%hihj)Fe+D$&WW!O,?oM%2$_>_GU&u_\CEB._iRj"c6dUWLU2q[Tq68\p<uDB[/j4tWmLuo$I@eWXJFk,!gN'[<D4bF*+kmPlSf.J
%P(CFqkpu'?Qs@UIm^aCP)W!oRcl&k-7sKqr"25ap_Y!UqQ?OA1>OimYDe7)(6>0]uD%P(&!?fXr[&Wub8k?Am+H3%FE$6.p$Ne^%
%Q<@2>=THg)UHSJNAfNC`-\?A@WdGfRd;R*nSU9;Po$/74=NP+iD^R]N,dE<qIfAHV`m3]:;*G0m;t60)R.H](EMbl%;Kt>d[[#3m
%KNA^"Kdh"2hK^GZQR-).'f(Q3Gm)"<*]Ba!gjMZ,2.9l^^[c<Af-#jE-?,f:F,*V-O`g(37?5eJRJQT8W(o>`f"b3tmpiNC]G9rh
%K;I='n.:"0@oC.l3)M2NXD:<#CJJ`)16er+BED8/,aV\KW4*Z,opp&nf#(e9afSdmdt)d]Z!d[n*)G]O0BVt>;>U3:?gJ:(Ek3oO
%.]]=miB%@e8[YifC]tlCh]0oEe]RTN9J0sgaJli;5rh#DhM>k?c33,,V4tj-0Q!SG:-kl11g/EU3]>207mBIP:p#)p$c;!7o?!,$
%%%?/-9XQh!KD)8hP@Jd5b/3S=E\]U=C)7u/gP74l15Hg8cV#5'P@M:n?Q*B1;gTf%j't6P5%]NXA"^t53Gi1bRSV&1NGLYT`IK)_
%PVaH#fqc.Q$HJB1S'@Dqk:LM6!$qc9(/eb'rF7krg[:Gu@E\S9S(DXaT>][YfGicb7F7RZjPh_SrR"i?N[CZ^]RQJTVj]YH5=p?t
%k4"rMB32ho]M?-%-S1Y^PUpRVSM1kl>\b`k?H*(X@,2r$5-ni4cBkT\64?Wp16@D0--I;!bdC"$('(]bEDliUC9V>?eX6mJ32_,5
%4A'a.pj?miKV/:uKf3:@+21i25F/A9jZ%b6&Ts9Ym9OBXrp%_PFBF%2_,AfZ"Ca88=o=Q3r-9*%A]NS+(tL&S67)7R$G0OaR+1SG
%:mEJt\Bl4cG,!g-oBG73#SssgZYWjX4KSk[+<m&'En9f#q<ou&9P2jf7'Ilh0Mcj)pJD4:[u'L+ZYgbR-`X5k2*D;_=Y7t=P'P8@
%&G+Pc?TBX1B1F+Y,.pR7BCjK=Mm#8?QRU.9]ap=d8HS!I!PL1I=?4U$1JD%+p.R>c3"*=oc;fkM8%;Ao)Up9C9:Z[qo6(hVdaVBe
%QALoWSQEI#.D1hmJ,sJS.IZ]ZJW2U3jl.asrbXe1C?)\RR/<C_gIgo<,C=,EF*'0hbJ)=>HK6aN23d5_b$q(5=4:s]AqWujl]A$)
%:DIt-\Slcq_,o+Z^gu2='5Ds%3=>]Wk%]sSp$8Eg4mmB<9RAUr?QU0M3j[:0TgX%>LLijh>j3IU-8crU`aP161ZgjAR6*/*eZOVj
%Op[7AV=7rqA]`rgaD+IeU;b:`r_;EHH_0e>q]hb-f;ES:[=$Z9<.V[041I<k1C5&e_T&#mO+!T`<.3NO@2c!UJ/#=A0d6D9d?.#Y
%QklXSq&EWL+s&+m_^0M$mn_4hH632irQ"VmYf\MKS8%E:>S[>VjZF"h4c2n'$^Yr,;?Yb6jgtPs`FlZo<LjSQQ/2o*_kh@srlk`H
%Q43.6][ZhACrPsUfBOo#U(sh///(C5?b<P^U3dBT4KIK&'[,&"GKu^=X]W$3'OHc$-=Db6jt&An]PJaWFXKu=PqOd>Q5;Y/[![-f
%@_'(!\Y>98.Br0W1>)KL.R+6l*/eBGO(-KdT8OJj>)6aVer&H"bO6\=Fe?ZhRBHd;QE=h"pUS)'8]r$u>Dr:<IbG`HWSAjWr8-M"
%q])M_6d<)m\k`f/r-cMU`+r9FWVH='I6VZ3-[4D0p>K<0T(X18]$>U"C1EgdDpGY=;UuS/rIjN)@qpAQYesF<./Yt`Y!<X<0gDnX
%">+@u?FM-Ql#Vod5(0Rlk&r9G**840-61Ar?cfV6o.J6Gg$*J[*4/MGs0p#`-upEKQHC/,ih_HU1WWP%h8DbN?oK@E)3Di(7Fd="
%V"WY]-D4hZ$l.4pQcC+;#2Ter<4u3Bj%I+b>5+J#Qfh.N<3:LA2<Fb:Io3VVS]gUP0<3U:VV6>J9>@FZF=f"k;75gLeSl/?+2"Q+
%kY9s8Io3UkE\>\1]Vp.#r\`5:/V!;bC>IsL%sIV!Wn+k\Rao-SpdN`Ef2P,'g)mu+=uRkB*W$@R<"3oq]V^#;<ESXHWop4>ecW\0
%(KEQA*4@;k1jMs+5pT=&g&1D0eRk#o>=lI\WoblU+7n%P0)))T?%7cFFkW9h4>3^X<5ZoRU2#$S_6n6sW1(>/H2]\Ok4t=UaCk:B
%CAWD%hnH&C!.^qbqKA5gD@JijZ]".R9O7c<(qjG"W5=Q6J.&Ln]2JcIb[.@@lkN$99Zj\%r,rHdP[<>EH"q=Wn(S`H1/"a-Z^pl!
%:!0f/J_4^tbgdG@s!B4qP\70Bl\;/sRq#'4?[c(Jbu(!J#-fJF<[Pf=m#BGo4Bu="38<Lg7S_+4\T8I7<M%Io;)=4&n<[d/'PFIG
%\TE*T#F@5P$\*F[pKPgj<M"'3M>H4JEui7dO1)HS7T.H=H+!omc&/hZp4]t<gVLW%U-.0AMY"*-Q0aF2p?V4L:8@CHhnO`5V`^G9
%fhgSKZugRO7rbsqRdf'(GOsh\j\@\*/'m>XV-/8QKCWi=ibZY4dDbZmN`'A^]KV,4fc7ua2WqsIP\5%OB?t5H/6/:T1rLA7:tc[t
%gX-C!feJ8HG&^:"@J-I79!`?gjiatHVdtlJrp0,kcH>ujQ=nqgB5;Rj@BE7PiZRtfNDA>u]fY!4N,J%;Zh\CeXkoVnofdB`Z>h\?
%UoUc[SY!`CBA7"OYNFZoW^JaoHhPn"1&(*PmZ[9lp$QW@%G%P>RS0J[=K^o#d6IF:Ej72aVcD6rhI".'kNq$XL1bXL"-?<@iBLE&
%F.k@LqtLeu%Vbk=(OoL@DK8Y@MCZ\,]PoC"(gj?ZrJQPQF,6s(@XJ>,*-,#;o:Bpr]8CTFcILfPN:X^0i:duH/t7NhePqJ\Ae=o0
%`V?OOcEPrG<>FP/V/V$Md$CXJ?hPL`c76i9+h"D.EQCp^^35CC@U("%rL8[a_ohh@=,caC7IZe(nbK2l^T&-[arObn`OM\L#FDS1
%2gno]8h7n_;jV#r1%(\eknb)p$T[^+;DGle*93t7GO\>`?W<!1iRjc&N&u;trUL]`-L\$CEQ'n#&QI\JXtEp5md_pCo6g3Gj"%.7
%ZDe\m?o!4GRcB9Fo_"WO4KGJ!8*qM+.^5>*VE(i,?)D)dfQXUcMXf6UfO?CYna&PsV.gDi`a+TuQXq\eok/IH9uXX<8Zf%p(nXem
%D0)>a[RA+0DpGrQY8DJ']^Ydlap*3.3CcZa0.OudhTN7ZMK*DO>HAZc>2MJe3fr;n+')Gt%e&=6b*QFO`AkRVp%Q"$eeR4k%eDUo
%j">[S`!S!6B,i82cMLYj,q?p$4<)FO`OLVWA;(cY6lVcKN;lJg3#0X!DZEpO`OPaK&-qY2G$HcI&K+_;`OLJaoEQ,kFSAMQM-!\3
%Y,Qa0F]^:o0tuELLJBA>*EhAp=,\)g&b-)@j0W:ZDO'Z[Re-A)(#pp-nLO$/>;8n(192;m]8CUGaN2LS`mr-9[p*j/MK,*:BDRM_
%<E5"(BKm;,r*@:O9r@lH.`NL"5IP[Q\B4PVeeR5'E3cDZLY?]l#PVS*LT@iAK_GGI3a?M,&GrNnE4)7[o68aDen\DgFh$/NjnZOR
%E4+>AnP.oAWt&3H_ptc<eQ7O,PFHn,o89Tdq't][>90lIXT,'\E8/P3PuNO>A_KQ8s0M!0[5OPsQbTI/=%#Ba4XC[:Zg)L00iY6M
%5H,,ObCO#;Fgt2%q4m4o]hdm2Wl%p4VECpEn0RA=QDb;&I!b,#Wl*B@n0N+$\Z<WujVkij@n"r,"rZ6H:`XG@dCo,9E&ESk;ePX$
%l>RsuBk>iR%!G*_(4T.$XocLPMbhMtLG.0Hr^h5l?iJ\rX2D>J"FjJn^0((+(Y.JF3Jsl<%_%AcY,46bXUVb][f'3K\/E4c>90lt
%L@\pc03]H7P!->7l>TbS/(GVh;B;nA>'I-d8uok[A0dN)n#F9"f<WiiE4%T/O(55l%QE!J<`pG\,fNek*H&,8/$'4^CVs5c04qEU
%rl)T2G]gKL`V8]`E-8JrFT.P*LT?mR1%E#Y%_&Lu>YTA9S1XGIe_scr.YLuZk_g`821>X=iS$8s-:,N1@4;i&VYLUIZO_!"?N>Ca
%9)J#)<>G(FSuSJVHUA7'XRDYE%DX(&)gJMH`J:Z,.V0]NoVZ.[.cjocR);fs1PkRmG@;#e`KPclSCod/1fG(Ed?J;inXV0Nao6_Q
%VTd1FYKmnX%Z<m@XB45RQ8lk./C6iC^s60QaeA=D8f)Ml@&7p*^O`5!Y3@$TV3.1CJ#9R$J,L/Fr'D9i$0UKPp0Gi*BR1:NRGNNm
%r#;OYl-JDJbq-:ua"pYlUNIWZq/1"1+rVCNl"mmT.BP)c%8t&lpBpDX5]h9PEH8qZ6@/Mk!);=fCB6\Y`,/EQRd)S']Pa&U`XP0M
%"cCq!lj3i="qo?,@s$M7W-sS?VM73u%=C@lhRV&%09Huo^@Jc4SZhaH#)#W#&GC.@cYC2gD]r`i_EU6!,ud[DkT-Yc1unK-H/j!=
%#-$HK-ae!1ak"cpT<a6[4D$$G:qZeNf;$X(UN=ClOlOSP1@Zt+0:'iQ2YOsVNc0.7-bq:>:$E:KMV@1AnV['_adgS@3-"f3H%NLS
%`"%2GJXDqWMu>DnqLTrKN:2au0WEsjG&(Q7(Il,u-/kYX)HfRUm$)lG?0=caF?)#$(g8195\[;#i@]Q<1rP*XMgSbN]:*1mR;4Bo
%kMD8IqN9@@>F%K%!_V&^okG\`9>,&KqTa/tK8[&MRnN7>U:C%8AuJp@`G#od[6@C'bFY_"X4I6M__J(;f1>V8p'^8m`f4I<P/kao
%i5m<p6u_d;Q#YOd3d(2?IFI5<S;4@XL-$m.[+-`c4dqX]clOd"eT#joH8M]th%=.PAjnD_L)uN>A"c:aEelXj%rIDRb<3jYlF:3&
%ZQK[,pZrd#g=..J\9R`*;WVD4"7+[j\_X_H`SObGI+%hS.<_ei2AOB<RBuOpncc&Em;#XGEGU+J5sk$.ZH>EdH"Xekhpa_S3""bZ
%JT8hrff:&UN]X,[U>c#CNlNP)ni7Pijj)7N=dBfASF<WBNg^ROGGSs-_&T#:pL*uLj?#lpAQ]gYZg-7O+4=P_U1@s-ftZd!)=N4*
%q^\@XIAoT?N.>J]NhVYoPk/IRd%ab=_[+:&*#VUZ5<1V8bP/#=[c*OB@eo-+=tDas0@f_#*j;H'=>i0pK^:lUh=6;4>5)3)J^4M8
%Ah')_GMi,Uh;"I58pZ4Sq0lma)9T.>=C/fmRTQt8.@)"5fVRs9%jkc=lCIUK'?^b)70pO%9uSlUj"6=+VA%/8CO*-#bM8A`Wg33?
%Z;mtAhKa!G^FlTkm_=f`/GIV"h?,&dF-/kKo(r>=O'8'_`#fsY6BiNc@Ae1!E)]!TMb0jS\#4YG$?cNThn.XclW;QJKYZ:SkO\PX
%E^:W`&c==07kRo/1k44"\1jP+lf'nQi:5E:`J&@INH122iDt=_bdUjRoO1q7c7b=U??a-(X^8>;*YYeiQs-l8JID(Vs2a6`G@F:H
%64<?9$dkWXfQnRID2nj"Q=9GmLjA=Z2SE`a*_40(FM-:`3f:rii)lr=CO>`GfWPMa@]VZ)eB%\O<4:P?LGB+lf.Z^?ehpqiF`C&h
%%=M[Tir5o2gLjtAWKm2b($V3;>cGuu``T:<^nbq?m3^ZJgsphP.3IVXJn0<(?J/Bm`6;$NbmTdcBF`7h*nOueZ'a4JPbq8!I@:SS
%\#/uum(Ib;\;F0I?#AZg+8Oo0,`G1d:4#so$[C*(Oo*=h(lRjC5L9$-e#LTtIG.AlG)i1RT@Vh2';&KnDt_a(hr<nFo)4=(q<jRW
%gWe&Q+C6\u]I1E4Km)VUj6H61=\bfr?;?"<b2M;JX8H,cFDjtK/uNp^-U."rHZ%I0obdS;mM0s?>;"6@pF.m9H-5"2d3u<b?6;!/
%H_/UHkJ$Da:qtaZm9Y+"IPuP,[.&'V.#&3AejlLqFO@enH?/6cZIdpgrH^:6P!d8[+h;VHLJB`3=.tiDX3]1lEuZ#k5E?)Z*,k_X
%C;EFaPnqO^m;6#n:=f0&%jVKd?cg6+mNUC[P]gd22Haaj6KZX2ll$kR@$'Q%46c;Q*kC4pFAqV`DR9Pa7o[u4$e=WBjreU]`IdgN
%m*CYGN4\%^q=Ae$B9_Z$Y?W.CrRJli%>^l'_9JN&cU2\.\_kYXMWL&nm>phk@5PB7)(2K-]#Dfum2-2k/%^R`JU<bh,.%=Ges4Oo
%hIHD*m)N!PJ!YC%NSEV8+eeP6+XUMO:$Ja'r/aJ\?Oq7MI)7*]J+EU"31)1eQT?qfe_iHM$cSW.'J9n@Mq:U%]SD1.j<417^O@GT
%21?4\?JNm"oB\3s>7^J!=*a*)IssPrGo([CH+3hEiSM6s,sU1sp#%QpJT1aH?<kiHfH_S/:&tt^nYYl_SZdb@'=?N4I3d=8LL/?B
%p7$!>:VqAF]jsDJ#FU4negjlrF#<HG]g6(#(3KQY<uZ04lX%nbD2@"QVn*ZSKuP3=;XO>Z8kf):KAHI]_^T<tYYN3mr;ap2$1Fc$
%Ijk6'iQ:er?^#M*S5qG`EOa"`#!7^orV:bf@jeU4r_4g?iaP7AV3!C%Ch-!SNDVTqls>C_gV1*uY&@+TdSB@.*"7E&cqua^Nu.bQ
%9_pgEQ2_,s-^fVIW(4uGmcq$BK`(@h4Tmqq4UD8?rJ+9$oEZgjUr%5UnF\#I&9j1c,(-_4]`VW=:sO7]gB$O)(,dn5rVfB8Z6aKH
%SrHKgT4RKL,:p5(cdu\>+&SuuH#66JT1>mRHCr9%1Yi?/84,]2guia,R_IR:49Gpqd)csF$Co<8bIaS:p><s^]C5P>4rM'La^-"b
%a[Fq@PKE^+7TT0n'eAIr?)%#Z(Yiu*m`pQ/EH.Ei:N$C!qXJI0c&kK"n?JL!#+i0K=PlVGJF2TR-heK<CRf8F4UH8'o@8o.FdIkW
%^),Xkr19nS4Ztl"?Y-.]db.c89>.dk(*:5sVmlUH*)Dqc#07u-lY;XY;uGra]P4cD;JU4B4^[+A5+W5PK@>@#?IJD)cbCFV83`@1
%FoOaX/s@mX8g&auqp]DWc8#3EH*^$1i+3&3&EG6DP?QZ:Ub'KV"G01*"Z\72Fso%L*bBX:n)'O(G4,gRL>.OcR;Hh/Z_35SPC[?:
%L[rb?h)2Jac_\j!.W5u2Ge=DQh!7N\Gl9)=:#'[[p,C+]Qe[X=ZAc`4FT+#O,,4Mp2'hsdh/#2ps$K4j-p2b@'!Cj\&[0*'ZEcKM
%@0uZERq-<Zb['Q.T((1q6FQN2&n8Xi&W#Oa2ncNpEa!.6f=C7CFE-HWUURThg7`R[h1sj;s!.MF\BW*5c-8cCXLig*[0EBNjB7WD
%nlE3t<4^h&9oD"sg_WSOllAHXHd*HLHDeX#ahc>.Ps9Y1#pO6<arI$t^@St-Vb)7\GQ#60V0HK:p>pO_oR59qH@`[]KYneD?KCjV
%G/.;qPOV%;Q6%Q*!k-$g8=8b%WM6<hY^`7Hhoj(#PG7tppF$Y;WY,Jub)5;rk%3uOYb+k(7D1D#Q:fc<fm8/E7e\4^Dne[?@\j<+
%"##8rj7pM`/q4P*-n'')fZc;ArV'3j1k#]/HRn9sUJ8j;rIHsm"f/is_,e/'hnCE.MKu&\pc,:hc5fVVr?i9k$58$5n,BpUBWreb
%`F.bm&dn@93VS`AImljPZa2aUa*'5DSGPub.*buRBS91)'bGhnq!DKN-f/b.Ih6pW7W==-4ZmeWm<U7I>e<.BPBgL^@=$%C4ndi-
%giWuP._R+q9$\7CX&kPs:7b601S`RM=7,r]](;5(OW.^^"[;]ia98;NBCL<.3I1GCf.-T`g)8j_g"Z9hFa-Ec)j%BW2'74.g"2;O
%[rCP#8)7&?F;mu'Bk4ilRpBJ'^&#gX4@nP>DDX"nS&__li:D7b0tt^\j[S:r3FAo.;Fd]B@=XHQ4MCX;N)"[eFn!)0Uu4sQTQfSL
%r>b=kf3J3ZndaH\.39D+Z"]1fS1ppb_H_"<1])g]A+k4H*Ubr9Sj"'"BB)9Nr[:ILeH>pGg<=V\o[BS5e.A0*Z(9_i#Z7<0s4h2Z
%-9IB\Ep#[XUUTmM8b_YWSBD*A-Xsd];.*,("fbTLmK2^@o#Kim6?+jm`LohqTYmEj';kU%dik!72ai0:N.<`H!<+dK#"0Zb@faMS
%U"#C\Y<N/3mIIkNnQ,SWX*0f4"Ys]t[liIKbMkQ>]EB4lX79mW;Bsrp;k`Bld'L4f"*hma23s>Ke4Y&N:S$bg#D!D2TUsi%9F^]!
%@X0`!MAK(&,fMik%F2D9X#L"GQ[EXckPb&B-$#&=nF_jGT"U_5H\%6K9!,Sqn'd8cP9=<'0DBE*d#[NVs7-f<$pr):dh5)56F.j8
%?C:*P&a:bk&.Z&$Bl=Ou^3rbbp1K<I0TTQ1VE<STf=uf57/7Ds0N<g"-UJ(;-c5[8lP)YKTgFOKqqV_c$sbKnrSXMC5t]#QPIDZ8
%UZ^7j]];`L>3]B-iC_-`VA/kP>1*1Z2NX4_O[m]G&Q>pu-6:mCMl!K:QPaR8lP'MYG/9P&S.^o'8EW(\S"tu):o!O1ZUA1'pf#T7
%kF2SRPOp%lrqNWcF<9<ZgrnQVf1s%\^6n&,$UO:>Aj+R2p4MjFq5(@LVRm@?_h@aX-UdX@G,MolrFN`hlg&*I5O0O_Ec8+AARD^+
%hE=KdS`W,MZTD(VA,7Ic:HlCY[-Xd;DQFLXnp3]l#<h7MrBaJg$]Q>tCn>l<QF_O0JO%];puGn).)1!#gmN85^F5uQ0*5s>r<&d;
%[&:4^9DdD18+#X</-73=K(e]G^h.3FHWZUecC[:@iS33kG41XtF#R9>ZK&1mi@o8$p]5\'c[LYMF\.%mD!-",hk#?"5H(2'fD1<m
%&U!>eRM\Ig45%L"i.96aqM!#[cV;7tYG.HWeTWKi>o\$D2NuuiI?!%.$6kW*;B0J+ZJF@kJ>B72ekbsNBJ_d*!sZ5#Pa9lhQt!_^
%)4E!YZ%73LeftcG2s[d<Yt,S#>i80#/Rd[.0\6D7S:oC;09/!F<IIu)hX5iJ^pEFRr.l;[b^mOVTLXE-&&H7]I!Vc,OhbDXLpQW/
%RWGs^@"Kb4jYi1kFt7tRc8?Y3_mRcZhQU;M@)mAcn7EH\>)>]:a_j]hNHoNV'(8HKOgF3l2&4J1!e%F]d_Rgm5FdC>cDGD]W9n`C
%>cWJDn3ob`jTk-Am6W2akhZ3Gg[dj0#5\t;h=J<$Ym?D"i+L9N.g6:N7sY`3]rALp+4qSB<V't/j%fb/5,C%/--s0]ZYus.dI\n)
%M0(*mI1d"l]G@<V(YGX8^Z?P#jVi@;Q\r%pPkTg\Q6KAJ$%ZP;ZmiCdV9$l6oh!!XR=@GCgiAT*HZ,od:0lbbYN<6[_#W[&<db_J
%^;m-1OaCR!T/B/(`>J9!^aY10r>n/;M:[I1-d_-OnqS@-&B>:SHT*,,oQi!X9G5Td9FBQhmdA]108UYuP#7#\8lZ0FY)dQd<!/M:
%KJdE?WKX(IdsOd6,9gb0VF9!ePENpsMb/&0YNVc%:8tbRUJi@!H!sTqHK:>?SEA-G]HZLeqaMnq%Lcb*:\22"K*nktY'.`mYM>Fb
%opZqIH_,cKKO![o]5'Ci9i$"D/n/NGSaYu_A>Alc(9GfC=<@4["KD*lF6h";aBd\faHZ9$d$3[I"n0ouL@2FW?`/QBPsq[dJ-Q'p
%"R9._5rU2pbOd#"2?rL.kf<Ko.t\2rOpY1X.PS*DqhtnP?tJX["Y(BHF2(YM;^,c7J(*4rH/OA((S"H=BE,pV]o7-'kX+0nAlF$)
%9aU0Q77`e@$;TH*FZq+<#KgeaGUKo[Pea?X?r@R'oJpPS1YV#%8.K>U;P'O[68+A(T91*)j@"GO*0_%GRjtcJ@WNLYBL7fa<@^*X
%"?3)sKACruH!l,_@/&uc8'g"@:j:f5J%Godk8;JF3`f0N^Qr4=T.0$0h)@d&<\>4kRa!O+6?[jD!p/KaC;`s3UmM<`*==-6l=J&Q
%Va2LGG&,*qMsimUfg"/<]@f*_VVR!fD#E!$"QOX8*E$A+Mqnlu9+!2>Wr]c2CKVc^5'$U8S!*)^rT#e.3sCIW8?e/'PA]^T(>[,?
%L0O_!'U<R$_jJ7ZPSeO0`S>%efrZZiPN,s<Ss>.1)VQ;ps7)Z0Wk<64>"9s0KSI-Pbbm\9"+iUgW5I"6rp\t=TSD3kAAI4Po]0a0
%p7;*9IG/)s@!_3L4gTY.d*e<<o<&bhZHKFadLY202NSodd6!f`>S2DNoVh;Cdt_6R_P</?d'8&&Fnf)BZPPd\#QC]E:D\lEQ^NJR
%^KKgXchosF)e8nWo<GIG`kfOIgm4e?ejmHgj"?P!OY(&*`ln1.4)iBW7W)c*7E?^EIJr6[[AOtDg+-H[4jiP?#._Usm:O'RpCZ-*
%?@L\;2)1SVYJ3A>RbLR$XS_Li$eNUS2%O0rFQ[9pq/#c:n23Q4QspKZ&$k"\_^ALQ+D*q5njY;A\59A+Y4[)h^V0K82>sJCUY9P'
%j49J6esXK=r*la)rW+#dqQ\/F7XSSnp'G3`*NIMVHu5oSUHno<UiMVY.V\f7#QDu308^"@i!K$rlD;<*ON?Nm9aY`d7bCO58Rg-T
%.G4SLeQgWU;E2?7Z`W$T+Zh,9_o6=J0#i*L-j8QI6KoeXpK-X81mZX^jI.abmt;N9I2XJOFT:`-rL0h#AFHk^^;qklpu!GtWNQ'2
%2[e/AB"QC^Tn3]kic07.U\jMPT$Tuqs*9Ii?T`c"#_lZhe)DlmLhKp3_4kIYqKsW\om.Q\KDI0K7!BH"UdXl!]u6Q3=T%9pQM)I]
%B&O>D=?e*TC)Hc7^QJ<E4Jq_]A0I03-r\DsgkaS@cnu92.$f@us$<_3D9Sl'LSP4_3Rn&"Kls3X[h.=PNk.&*a+Oj?H"l`@PgE,R
%3V3\hZ7k+`p*U68I_X7.bJC1P3.E-d^>A#sLQs(fC]k"KgZ.E86s\ZThj:sEnTFZ@,k(Mk@Hmok*(CnV&'J_cKuS!9m2qBraNQOP
%2IQKOCqJPPcIN67@RrJEMtu)`dngiJLd/it:\gp.\K>;jUr`m`'ngJXPP:u&DjgRNh'NS_&p<CdX[k1c0haM$T\=-<J[nO@!5\T4
%%(bf^=[^/RA=)9-^DqN7,*o-rS*9Ai*:4\]Z1=\]3-AjNRhRfN-a-=f2Dj]\R2&)Rg2`h7S,5m*puXpc1Q/*bco@"3;@9[uD"f6@
%ShW$ING,Oc;&>V81fkNkCLST6gWF]')p&sLXomJp1Aeb[*/gK2O4eEpF2krf5,dpLM9*[1[_Sf*4+!4cepWBoX`3D1#m'K_]Y55T
%B.r^`7De.^;OD@!hC&MuSh^PA.3>]a+WL:5Quo.dcHUZ9&@t:50?Z!u"'+W>m!A2U.'L+Pi$'bu9A0G8&eDs1Xnna6&e&!$JQtPn
%DUpHqcA;)W:5F:sG/%^<s)EZ_Z-]?bI=!Hf[;8Vp5FLbend5_?pI*hT$0?,S]GB.c>2j];7,AptLn-"1d"EkNah]Jq,pXdp_D`Gg
%#<H_tqD/L=CbtUQ&n]b00q+bK+\+a.E&c4_2M=sg8>n<8p,ncI5k^%2\.<,i^0]a9,=af%1YKGTHjW=1dh0rkR]&*BZ'O]l:X4-1
%NHLto*,j-LCQ(WOSNUe@5.6gFMIh9G5iC`&<,+DPXTX;e>+56)H0d6#iY)XJW)CU:K,-bF\+X&gIB#*VQeYYc)Oh+lcr_\!5?S+'
%k][DnNu*Bjil_B1&3-Xl;`""/arg)kc1q83<Ls!++jDE_gWW-Z6;t-5%X+67g\0d1eW!-Y)J]l6kYs%?Q`<X%YOc\<gaY>m;t6(4
%B<G'Er+(_rn5E*7]R;,*.UiSdeWV*19#BA#[3V:b$poW3`:`K[<On^gS6oTS5*j/,iLK'Yhaej^#k<UeUqLM,0fQ;fX\:#h2?D4*
%(q>*P"rRSS)UmjSM!?q*V\S):`o3.Y88q2_k:B)SER4Z/j@U[rdC!LI/?J6p9Y8Qsor-@-o[j#DIFk'8((T6q)ZtB8Cf[#)R7Mu,
%[+FY?f$\>\@Q?p]4Q0016).#?Hfi0bop2$WW+IG<$BOK4fh_.p'.=#p1R*!Zq#2-$0YM#SgLK=_25#7pm@SLh^1u>^bE=:Mqr-0*
%j7$>Pg1X1O;XX2=Q0mm6?e=?/E(n6e6k4",Is?+-\O_^@P,AQZ6$_r6"k@,Tne@7YjN!.*-m$s!k//Cf</X[;o;`BWbGbq[0!oLp
%H1<^t3Tg`)?[PX'[0-CPlppF9f>.pfNksc12n9hk)EqMB;usM+W.\Bs#t&DYZciXIpX:tUWu=*/J%JDWZX,*s3X=*P`PM7sF$!]]
%nX`#Q.1iPQkD*</U7-uEjH:Xe`nQ0b2;koI*Q8BM<f&^fSVE6tKL=1g&oG`R2o-KXVKOXi5tQkN@*t%N/&(9Op0<GjZ\1EjE)Nm9
%0>`'_F#FBh+-hHf=n9>I+Mm,0XIA=;c'q0--f(Q<Hu3gpm#7jYjh-uJc-234&ti!*ra\K@Gd/i#eL=!kbSR%O_c-'cou3EG29Wtn
%7Irq]0.S!p5O$@+knqm`igQFP^Drimaj8]Z&>DAfd9c-a[q0LV,rjq'6!5[$m:cXO@"T&.rX`#\\rWKpUuiA]rQT/fR13eTf>Eaa
%nS2@,1hIK-!4FRi>H=&**f)]kqPMqd!.:1_N.WC/Zg&KL:d&]QI5pq57\.,O9hua#BCaM4qg&gL[^pWJocMN%E:YZS9R`;fG[6,l
%Pe=QB1VPghhaXJX-'2&/BM.i]YEY%&PpX]Vco;_j%ZZ@RY]KghHd<aNAt*k@,_Q@WB2k.i6$/HK)&ALk$lf:[YINJhN*4C'U,NQX
%o:(<WH\7QgF(TsL`,@Mem5:'q;U^Gak0oNuIH3QAfJ'N'WKu&j]r5Dc)JI_Ye)qi\5C2-.X7nh09^-7^e0rBf$td8f2gn:O&Ci2J
%msFk<I!Uuk/t+FHYD4c4\O0N$\*K,HG,;NpBKB=E,94;P].AGa;u3(VZ#"NN/SWY[_LnIZ.aA&`,cQ*=I[f"TSk`6HR:u#$pT!1;
%<IUh7J*gj[_=imkXLANjY;3LUi:U#^Oh;`d+p]<kHZPbJ6'rE#bh%d<c:uD1.fJ<&g3QS72U;j0RmH()\'Z]\F>+a$lmO8_hV/kh
%m,%/kYYjDfiMFjKl!ofQ2@IAOM/mMNGqFm%[(VV%#tc%0'c%#*RY,9:s#pRNO=Xm)VYW-JEG(MjVO/AlPuT`1+CoM3SpsbT1(@sX
%%JDU`fb&[Rj7n2`fKh^QRjFjBdltLPi([Z>c=\fJ)DIgbM;%Z.q#Rbn#VMAshORG0Vrc`0E_D'P"iC#+6pqJCp7%>.)^9+!4al]%
%25(dafC@+@k>Ooi4W'03ad1\*E#!L#p9sGJFc)>D+:94Y5Vhik%eND*bWF_L7LQOL"o$<g`e\HQjf@Aa_lT0aciR3FIj[*L&b>NB
%Ac&Ut8R'KI1G9Xs/"E_i0!lk'^Nc:f+"K!BS$U.)#;hQ/GrjJqkI:=m,r2IhZT`l0Vu^4aY>k9(.XAYYc6)C]*`oLN:'9[OcgJq5
%VcBrRRacC/A02j#q-(#MUrF+g^kn9s.jid0mR0Y+c=YnNc8`tNS2B[M7D>P!Ek2@Cs)A$a?lMV[Ye$HY3cRo9nP9\QmQuh$@+6El
%4D&>;s4BIW3#:DeMSR;a2_)fc-b#M9<kGQ*5Q!2AZK%oFrq%hq<!0CG^U]R.L_&g?Q4%9gnP(bb)<=Hg$Zr8.U.<IWJJlL;;9o^0
%r16APc^5$/,Z^o'o4lggDu[r<I4LWj#ohd(]^MuV-6flRc9F06>>/G54ILiS<sL_b/"+Z@5!>?P6Y&&Eq**mooGURrKLdFq/bHBA
%+."Y6Nqi1-YE^/Al@b=m-Js:m&Q<_`0@P#"@^>gpO>dAAl9V.'>b8mMIJb+Ko/i&T>KZgnXZaqQi#R(GIt*]Q/t,BQ:5L'\K@=':
%3nm`a=-_T9'.Z)lcZM:6#ur^1:L@jt&AWl1@_Rh5hrBNY"n^mY\ImDnnRrMJ$c>`9VL.M3)QIH<.VDaAT.DjNK?3ZhUe+<3D:nG&
%IE<oRUaCe"R99=OA_?&J%8U@D\].@t0"oMmcu.*la5/>1=%JMp8%*$bb;ru[A",,Oh_N?@Ed<Ua_r13Q--L\8477JFpV].j0=RGd
%="NK,L!F$&5o/Cd8uS61MEdsgV6?Gsb72p[]Y8i:Ht'Y7>MVofIPFu@."?3,[omEd4grD9;FnpOmTnPCe=CKJC($r":NiRB0`Ha>
%Hn*:C4@$GsY7l"W,/aB93jD>R0?a]kAUNl5[e??21_";fK_D5sWQo"iI9eb!r`PuG6K.U9T&,XL;K"[U2V#\mDs\*u3H$.hnBUU=
%gTrVL[7'W!JadgrWoKO)QE"!_5[rH&/3\jF7"/\(e<4aS`93%Kb[[qF]Au($X/6[:"&$UD?S?]B`+35(S(GJ2-0dVi\GC>=Hm'X3
%kjPSJ&%_D-jg3R=lR->BksLhG@ZfuMI=\`Eilgk(YF-`))!uG>B).+1FBElHSHc1b/qXn9:(eQDFfs/4pj?nKklRP=gK^(PB=bT8
%g.A-!P@(6F(eokRbL5W6G6;/pA46;1$u&:V6tu\o_\)S]AF,^rF?NNBKMk.73F.qmDOAfT[b*6S]'M2`dU&[@rGg[L74GMXI\a!3
%V_`<<af\sC!(o+KPVSM5(5[WTktL6,Wij=R>;JJA@@>VYS%NPugU^CN<+F6rY*b%DCt<Ih(ZbFmOt1d'9aK<)\RnOAH>tN"l_JQ/
%a$0daMI>H*9t8!6L'nhGaFjH^U!st9H3RjSaZ[`Q+.$>62IfJ$<Gq8bqTJ'&1L?&5s-:G)e)LDXPlA9Wf#@[$.k1EEg:1_as(Y1+
%+^)gbpjY/ts);eA<Up*(9)gWeCgR%SRaQ[hIV2OU^RET#)B#e.ra/Ca5?N;6`W)tfrMR\h>87+@VY#@=6uGp#^REUNfg,cg`W)tf
%rHEOgMuQjWqG4d37`GDG!4F>lG>Rs.0q%(?!G@&M$iUJ")jL9(]&4ZP9;>V4C(($?kA$^OJ&MTk=]gSgZtekF$Te)U;_.#D.u=BP
%fJ\n:]Y4lD6gfCUNU/)#?6M:GB<H?*?TP50hT`O*5.[Olp4%"\Bs-Z9>CVT<k+<Q`2K^=0^$7,"Nl\mZLqt/_Q9cJaH;F8rlc#u/
%`l'r]S'M4L:CT*2k&fET`H^I?,K:Wg>O`)c?8gpi)C6<`fcEl<YQkGc%jD:nIG*KFeg#?]EBJp@mm.kT]MA\[n@Yf]V)6ohq;$%>
%/,/iPnVa*9BgSrfVtjsBhll4bNXQ3grDP"qHs"%T5o=H<i[>n974"2M=U>"h)pmbp^7G8R>qQZ=;I=9h5L)S=\_4O$>:^IT#T$/E
%RX2H!!h[f4nE]1K2WfpYFIDue<\#RQ$TQ>q=_d(@[L!Mp,j>,sr)";!M!;AIRI+6i`elj><Q0T@^5(No,hGeC6r=8tAT'*p#"A*j
%CrnKgTn>\b$4n-!8im<tC)=oU8qEM:H2&NdVrJ"+I4A0=,NKXkq5k.Oqik:=V\.U/+fa]1m:=Z@4i0Lk[::,XTWn]W-=A+Z^6YbR
%,g3LSCQt(^AH<>g:E4tGC:&'Os,L@]jRKQqpc[MQBJ[_7*Y5eZDGI'JR+#4)4kjdsqM"3!c&jNhLAsX%5Q"9Pf"sao9o-dH63o1[
%C+aFug2;r%_S3EEhrT.@'1W_8;kJ.9rT`U=[5;-7\1HF,8SdQJD#6u]m]UoXF@,Gl27_h$]X;r=`HPBs9dDq6s)s*\Oi`r>aHuq!
%[s-ZuCe:f,StOr6^DJ("X0qPjBn)jLL&eb9)Nm,S^b?2-N$0US-%Y1eIGWiV>7l.[Y*rj6Ae#uCfX9$(kK]XML_[CK4ob$o-M3@+
%nsBC@bQ%Qk4CA)+T)5uMEMTd6c,4ql^7W1?=_fU:q=aAls5qYBr5HiDPCHkSq.lpG51Xcsqp4q3q!sdOA[_G:o,l<1h":;)qk*oZ
%hu#-Wol'hb0=0X.jn2])rT=jlIp[53?X#*^D7')bApD>I81umpm9hfLY;,0#Z2NG'Yj8d5H26jN?i635q(K'EJ+GE;rE;i2?ZHH[
%Hg$mDSQKh%T/l*1h=D^2UVo2*SpJPGR/#KN'7%=CVr]RM0*b-[IVLP-IIZQ/gVY[/_q&`R(1pq&ec,KY5;cbq#lX(QSpkuHhmfrB
%^SWA:DomI]ldr%.Cpi)EVU+5Rn*f:P$)u>#`l@@DIMfhein#(dLX33tgM\`XFS6[I#jsnCEF(eVrFG9pDU)$/ID.6:HYX^W);,jF
%X\kiqT!.jUo=pPS=3-p-Om=!G*kmpqf31l>?2^2IBP"=Lqp6%kN`tUbe@CI.`,^mKIEbPrB]I\l1js&*Sa5l31BF=:@;\tt0b$i]
%WHCs-9j`83L;_J$m=V7G0:;6j]-_`N?_#k5V`*_-4d5cp&0G*W,L.SKkJTTqZNB:P[%XYBo!OKAf2F8Ka3aV1<K6%/juTU@Kd!iA
%Dg<BOZcce<Y2O\)R:ATs9'U$h)2X'LJc>Abi%l[/n^m,q']R`3T;_ePgG=QU2'fcclIYRe1u$s!LUj$RSHfAGgp+CDR&l(@oe5Qt
%I1Eg?Rd"p?bf=M!#FSj;EK9!?,WGGa_Fg7i0ti5%LW;+[.ZcDT3#cTBOH&S6@1RNuc?WHL;<m>s[:+FXqR"\R/N]**$gq>;`4Pm>
%EhM`Vk'DGBMXRbb^S]0!hW%Q3>XUd!)T+P$7H"O/,L,eKX#8FR:C,;.nC076h`dIPDeGfn>^)UH3G7?fjt8/EHi[o.ABo8-e%?IE
%>_]Z)oPT=@G"+9A0pd%Y4kLY2'^(Smj#+\?fOk"W9Q;]SH1'OEik`p6G^d15Uso0$Zq_^gZ$<Ko"J0Q.$p2Mh)56k\B-'l^$tgq[
%let02=5U0CT"8MP;9a0\A@Cc9f_(XOgM`HM*=TsQ7,`MCj5!dSm/!G7]_A%,f2oE$0%i%@':B*SFngUMRes_Cgt8&UCWh1;kBFDL
%f>-gl[E:CNXf21mT4->$gB4h7nK,WVe2M=uZ83_HZ_s1=_L:Q1_<sC&m^'ZW).3C0cbKBrs6C'@M#G*g34EY_lC-09kPe9Kf(lJD
%+I=P)#]#U.g:Y!^k06).j725T3^cFd@$/'f1[pfNS>3qUQhYCX\;i[.#5;!B&]dL:.?"p]mYRU#fl#,5m&?WLe8.5QRkpMq58o;R
%;Hk'rhapN&Qq:*EIeJ'.4R1C#$1gC-T$P)Qk(Uan$@^7-q6MhX6CRZ)URUtp./\a+^uCd2r,-?IPkO7Z^;d%^89Bp;r3k11q:Nnu
%J$%L1HYh,om4PmR-\S[KpAGo"q'!>+n%kDf[Dp7h_+DtcS*Aig3"1[^qD10'e^i2,3ceMJjHY(6jqj&)Cd*dZA!<c43(gf<B&9\3
%W9^j-\:s*Y[X2]_CsD[]Clg\m^R*3X-;3Utcu>&jl_U5IM4HMelTI)9m?m=JDE'YJP(-^q'#4.ecn"Ra%h1mp=b52O+FL!<r#)"8
%_k=9&U2?:Trbc\HA:6T+B(XcK.IauS2ebm3i>S2G>T;rc2KRXG.D!/2RtbT1Y%8:00btsbh_d;?-.el"@V^JQ]9/L#BZcq>rM%EJ
%&8fZ72Pk]jg]K?Z=#=Z=?p9MM,BM/'kKCW2lHm;7s81DTk&7/NpuNU\fem,?6i&Pa\+u&0fZeu*o0DGORmP+/i)6hJGodM\TU.;i
%Cf=0eaK)aWcYCWXA/ooc/dt=jTCURn4L/JDqn*HC0E9<S\A,W#9pF>1aA1h%;/3+c;hd^k5Xp`A%RQ-7?mnTfN'"=-",$;TfGq<u
%%\"rj'5DddgGg"j>j(RK^iGg/#ht3h1d,Xb<-s])fY&M9UKR9.9lY<(hLfl4^@1p<k$mda\7c&2q`+QrCbFH)O]4>ZZlY>Z5K1,u
%9HcI3r</T'Sm(ZeBR,%6SZgmWp)3SG8E>&e:L35@85r1-jkWIDm/$"H^_BN:B@unVWS[;njaW:r^YO>6%/Zjh;bHM"gV)qM4;eeK
%n_Nr!?1#pq^-$JkIZBs:S,9);$MY#k1Nn6E$$N1^G,7`nq$]<ZZbPi_m$!R!&je,E)Kgk3Gt/8b9e#/\%%HFN@A3F>f_)C2Kn9QK
%rA3dYfm2#)MElAqCj59m\[?daNg58]26f-;Sp/i_/ViS(Z$hX<IJNBG\*?(/QSCqN4HJm\Ou01qV)%KP^:QN!/E5g6&Xd[27&`$(
%!2N,,l%Qe7?C,h\4Z.R"L92a.RhsM3KQqjS0^&S[*R8JO4<5T$>G_,jckqs*oi(bqfE:NW*A[)&>+-6qMAIrmN'?Cl7gn'R=e0#%
%qk/Y_I6ZU.@QK$r>k>TMf0aV*,_W-?Zi^l]/5rN*:"[0T%*Z^b`sib=K3<tR6"5Y(.BfgWlTesu*MB)5"&c=8k1_pYCMo2hS9H-o
%g9jd5CjnX*77.r5/HTCH&=cHf#LS?P\!sfSqY4<@#\afqq&8#dpUh)R;\p6,n)>d%,YbamV:iYs?P&`Q4!V?;;e;jrF$IT-&/3Pi
%E9Y0"[8('n=hE:sSsM3c'2)ile3cViE*[9g-p_o_O6?JMRL3>iZICsP.SG&+gWkj%]T_Li=Phl81tP?I&+-h]_`%J*F!%+AQZ;9u
%m7Ep[GMi=rT0V^8YCXg7-N-"'k%6Oap26TuJLBUS,?%m?\9h3=;%N-#\NmJ2kq0(a8C>lO4"S^![CmAO55(&OLG/[*4n<)lasq5c
%n'[[ueM/o,X:U^N?,X&(=KoKJJ,AVsp<G'L]WYB5q)qUp]1/V#;cMX_`C*L1ZU\@86M+52[A;thbnn5$Ji\H9fN@\beEU:ad0-$i
%_b>ot_$u.*U!`\V>a>;MJ+88rZ2O/\HYcI[amP5cXUWu-h8eh\%#g>$qTV=/DqN^tf2=.q97E"0mrO'>oohSPT9"9mc=;I4@-Tdo
%>_aTgNM2f6j)JQkoBg87qM@WXkCD1('J'@gHZh>D?/g0F.VR-j"&DPpnb;RcKh\OY:Ae(aG"Zo!$VJirSHEd`VbcWHh<j%BLQ?fR
%WJQRMWBYe(`obS6DO#KfYuMP(qgLNq-D_kKlKisLS(r'g3lq!I)f'WJT9_mc[rN"c,B#65=8SuGo@;9EmsBCGm;UYJL=7e2;P7_G
%Z#V5:adR6AP)2UGgNaG:N;>nk0Y=Q*pI!Rr7c`[]8?`I^T78P4+]RIOclU7+[VN6oT?^B9hfIZ1hQjmK5_[t]]$jC^1IKOQg.P@^
%$7Y5+6eoU`<2U+Ni?\d*HD!54kLQXb]Xdbhi;VMkq$'%Mm-Sg_pM?kcU\!"#oa#a)?/OeNq>/2A?aBMjbi_]$oEA/)PSJ:M#h6PW
%L4k5[rd9=Badr=9\n3khqu/U!rO0SN+MrS^XhORK$[r$`lY0SD:1$3$Y2=^'hJ4ZQ6jpA[GsrOBYWh?g9[B)#]`4R#SS5[@#N<_W
%9AK3;/#8QhIh*f97S^V#o3OiXd2-EnqZON\lULbIZ)`BO\"@*pHS<e/H+o"Fo6jMCQlkX-8B>IkO\1R&\[e$3.*<,S9[\.,l"]E)
%Hg;Yf*UK[Mhh($6H^jFUm713TG:Ob!D-[Y`Ooah-h+)D-%s8H*[/28_]!2bsfgeKAm\^+bcTcSG#J%Qp@t(AKQI\WSNUf8n:Tr&B
%]B?5k&)[-\HC/0\*1<,\!s3L?MAbeF,>#\2=K8FpkfIt[_p1SB;dc*SHMeaE$Sb)k`Vf/>JX.;'V1TCI>?HOE#-1Ya%sItr[MM,_
%Y+C%9g2$N1UEalPmjOIm+!r(*"[6VM8nT]]JIntg&]*8h%+iGA;gS(\h:jA;ZV/]-KX2'N[P[d8`o):XB/1M_XU<Ir'ZAmHL[nC2
%B8'(BLKGHsfB1HtO<L%bWg.f?oPf(4*"8%:p>g$]qV9q")>5MGHadPp"Acb'R0+6BUj9FIdoAqDb<F/ll"BT.j2Se>lfpI]BncZH
%`_5?T%+KnJhFRpM,>t606]fEl/>W>5?mGWT9@:c$Z"RGON+PiiPekM3DbHA%Udl@:ms2li1(W&ip;m!MLZ/a26'-5D%Fi8Wm9R,5
%k1@kIA6d/!*K]sc3]p&Y9)h"2:[LCXAkP0+2mClulR2#m>2*!IP]Oq&*oB]4b3@^sI:;`_>diV3HgqtsmB)888,X.5IX-81)<O*P
%T$*4MEnkHaHZFc=X>NRCM4Pg0[CN.J>YH#)7*9ppFpU*e%B^fNeih[b7L##)P@5J_+3O1WS&`c9[u(@tN#%'M>q$HOo5"QoD%%TJ
%R>Y/QU[tMCNB$*!(g]?lo&ELTR=JCHhXXWB?U*e+HoQT@H9AKOV1C)iob_gHc,4P>mMP*j8<3t6:qljB%eCoGUYp5n0p,KhV*muE
%;K<r:QL*AL_5<qj-\BkR3BWXJRAt"I0ObfnM&U^R5;5n/nG]Db@0E#imMs+UoCE5CUtE^`XL2qJe[Y_oVZ6m0(EPbFo3XgPJA6t!
%M/@.,Jkm5*(?aH%S`t^_":#cU^U$;S0U*5!;S!b.BMKg7_)G0g4:g%rfGRX4dr:o<Yb1Joi<5_WaiIEA0,tn<M/_K'HV+qu>8p+M
%/<>W]ENf]t1"r[M^;#R&R=\WS-F85?!HqLPAa<[V5de5omH)3h?m;Oi0BkP&:2*N;o5(I;cMU/uJ59+c\=Z(nla*FuC$.Kd-[a?k
%kefCC=.OOY9i2?Nb@;^9q,O6sZ"#f;ibZAFW,hmL^lG(1*Q#nmCl&bJ](uo!DICMcA'),oR)c1A9r+.^HepQm:)8F#%ZK.)iif7>
%9a=J=A];#M+?g2nNXnLc8LVfcjZI'9mIKeh.9ZsK7/3@p1[d7GoB>q@c2Xd-0Xrtf:kH]-0';H56B6#5a5FZuNm0(Ab!X$Ram'dm
%9"QWmKGgo@L%)^p2sYoB6=o>SQ:d7n^tcXm#RoRb3JcI[O7be/0ZZ@2BW2n_$8S5+6:08n2Pmq:da7:]%aW4L16rV*/etoFcEVo*
%h?Z"BQ3o_44;HIA%Jp3gW;m/HM::ro[YLc?i(l)gaHfV[6KWS$6<`@cSk+JTIXNrP(tK@U/k@VG'$1B.5[)\p/8X25Y'5Zs+(n(k
%,%3@O\C9*$)_jKf*lmYsC5uGcWthGQBEBJD[k9q]H2o29@[ZNdChf*Slkk/B$UR<%6Cp$3"(\!Krj)]L:3M`#^N17fh;?1R`e>,V
%MBi:](A!bT^HVEIb"(UjS)</j&B"1be4P*F3.-W-ZWG`K'M#O?*^%r8TIB(@2ju+96TTP=dql^MY[@1UK]5o=C4&&J7Qg?)oH+[R
%mb>p=2)>b^SN_2C!V*'Z>*861NOT`ajk0I03<IO2QKE&:KfnsZot:B9d]6@.Sth92W3JtL/3O,'RTtL-aVJAAAD!?@QqeZ*%g36\
%)(TK'3[U^CQm[,lao/dZ_[$H0-3k92aCEuJpgao?EO/<*rK=VS43W,?2DQ4"E0hN#o,'d]GSR!9B?LO<g?\>KhoN"G%U8C/dSJ!;
%PoX%;\<.1/f_oS*X'@CI=_00B4-Hc@3V'=Sql/Cq7t,T/o/sVDqiThK*:q.a^7LdKB9_RX0b]"1;chs,60=,oh67GqR-3Qf7K)O$
%DRhf^R,-*nf%Xf_Dp8'"OOJ:K]=ChbpYgfd-/O:P>#o[(Y3VcrQ@^o_#MF`Y@6QQHTf'mRD.b/b54,7kcQ2i3omL"DnTm_6YIk,$
%R/*a8M;!>\__mg>ob83iSa1,#3P47e+@\3p>X1$u[S$Ce)f0Xf@1@Y8n+o-dCdWC?kf-YA]==9\[r1PJYFD"`3sS*:9'G`qTn-jC
%*/gtp"g<j;iI3r?\=Rb*LX_%EU[1.@DLuQ*Y=$^!(9Wi78=/@#?:!S7l8aId2"_fFF8F8r0sLk<^JFIR(l\>-^q$Sfg?s:gf99NM
%\Y$ak<pR;'/nEj*n$/OIUPY4ucV8"B]rsMjLCeua-fTiX!0M\JJi$quY1lsjHMQ@3Z_P$5N,qSNohqBZgfJccdBD[/WJpRj3C:PO
%0%&W@`o[mhf@U^&Jg2Qo;+8*5@WD`2JHd2r<4Jil,P6L[3O@S:OaO$t3fX1DU+NX(XB6(?niK]":9AIV^m?I(=&hng*MErgF@j&:
%nq2<3S8haq"KB)E=P6j*&G.:lDa>%1/B&Ap,F7m*X`0,u\8)6V"d`UY:Qi76o=1E=9RbhBnqCmGqSHLm"rZo2>9m8aO$7,Hm6'DQ
%ZA\E!\b'p\It]>>/@q)L*69sk99[.tUEaD%)\J'FrpEfYjBG\Q\Xu30C.G`n^fGu'aF$fq0[kfE+pCg+L$IAmd);V95s(H/`gO]i
%#T)3@)_DTul7VH69TnVj!G0/`:HNkHJO`W^H)FAGr6l:lT#*5UBVkUpXgr>fP[",,A!Ebg@Sd`!F(ra(o1"R,QNkR&%3U(gb5q(\
%r4LM$BjEn)7HR6DM<XLV<+4&;39FPY5G;\1JWB%F%,2aSRmf<Xi>O>m#`1MEKniC,3=D:aD1%][0N$_srt'dGroQa:jrN&l-3YrT
%S.FMoqaN`-%"D%bVVSlo?EcFW*UTa1qKl+&%+%9M:NU$L8X63`S=)nb-XImqH(Z*,<OC;l)J`'s<Ag*C79^ZC,[\Q/g/=on5FYH:
%El")?O9Ue/OLjHLnktoY?&^HpY.:FS3DeV6K+%f1[1tW&ZPn_`R)U<Ugc:)+"2\/UCOYG7K'C(S156=1#hW[1Nj'Z/F#Wi7,6Eu-
%^/::!_MF/K`>.+]@Q$T:F?0"Dl]nR8^QUafFGTlp+r%;gG#qn_('e<e<6drp6SZd!]'/4+,0l*"V!fa*pY]!711)H]2)0+1oSA`r
%_2WLrGn91F_4m/D3[*N$3DRN'5sZ:AQk]O$>chR@EqHguF%n=M!7f%2c8uMhRm.ctRIksr2YP4m=Nr:=fl@BQ&<N@756*k$ceakZ
%Y:mXF_q(M,UFkNplA3gf$e$VbgjEqu+69.]&(YRnq#L@`QF8b9I3_,j87;63-(0'5b-`MBZGf3I&.BWa.7%0M8ib^e'L"?rr[5>k
%0gZJ9"eq!moLW^112gd<$R,^cXYpQ:"f[sOM-0Dl6*>-1fGT7JW6Qgi30kBn030p`.JR30m6"%r_*eAE^P\,M5dg.h$X4*@gE'R[
%ekiEmC$aG'`$in`WcC<]=*l"MC?PZ\D&YQb=q.$Os7ga5k096e$t0A=/utO[SV>0?c^7cZ.,$o,iF`[%/:-\u$,_LH\)6A)n[#(e
%jl]D_D7jXt!S?'A[(E]7g"lYtj7LHK6VSntnB$`RD&\+SFZ).h=lUV@B7"&r1U!+kR;9;m>=XXYSK_dZT:5=`CZT<q7b7GH[X*("
%8fp%PZim\l]NjN420nf*YjpKcQ>!11>t;PhMp+nNnu_W8D@&lUF7=II,B%Tic.JJfV]I).Y*Ltd]l.Dm=1b=*JNU).`r:sH3=joQ
%E3cqE_)U(>nn;=N:fWP2ObZ:caI@PZVGN]KVt^MFl"OcTFW4Nq`_5<Xdh#H=m:X2YJ[^urU%Q@gZ+'8^Zh1M$d$^&&eS.#Cd)U_q
%>ub8]\uUG;rYuRqofrd;>&$\G4%EVjrO/rs^H782fm`;*X*U)i0S[M4>o2CPaU]FD5sdhkgMa@NL0t%5)9L'nZ$QKi4a&W>R3=^_
%3rsG:<c;[sj&%r9KaeD_82*TUbQSda\[4lF!TLp2@WTp/V9`(DN]P<a9*[KG3uF+djDGr,,o>Q36a?0F9Mslg>E%:fV&8mTO?44q
%.I$pX1r1=Wa7IPGfaSV>Zo2uRH"9HO)!t*6au32(n_6UCHhHdf_NLa8\6;5MibCOCF2UT%$mGMIGpT:ln!5kP]l.Dm=1b=&_=5m=
%[SK0Q2HL%A1G!"3f,>0SRDTIUo6;j\+65>@*3@mWmZp,0f_[CaCrFOBU=ufKMG<rtdRLD63Hk(q0%)q20ZSjciV_hL)`*?`<8ZeZ
%Pu7km_ZV0p0@-2f.%9eEB]9<6S&q22]T&m-29`Pq4oVo.9o>>Ieh`2[&K/(33QQKt_01<O9B?Bl9j(HNDdG'F7Q%?r*81V>iPlQ>
%DFTfSL96)5VNd(6(*gScQ6<#5]hKr9]I=-<%3YPI7&X_.>M@0k^5_MdV.3-nd<&;'^\XE9C]nd:JfC:bO1_!$Cn?OGM]m!3).m#J
%WX/Ul7P9^=*a<pn4,XYT.F_%OmfC,fooo-">J1Adn\-/nYA/(Z<F-jl,#gt&-M;/3/]";Wb,u[GZl7`U)lps!_$K?U3h$9uB:ic2
%jdFXHO)2S3np?tL<)`.-]!<r!^;!mlUDo]'ctl'X/G%MX/S0Il28mQ0*5.gs-#"?>Yq[&KUbNq.#5%km]_Y_ZcAJrVSqPM3W\=u'
%qrZOP@J7mYIbE/9+5/JVo`qRJGcFPnqD\-0Q'31`n]*bP'^-m>F8sQZbkRD(Y?nM'Di6;RJD#]g8\Z=`;TRff6Z*2J;>2rV$C`c\
%j:B-B?\9r-5A5]ZpC39CCns;=$1Pff&J%=6CL`b"+EpHNZLeNMe&SlShCefW4@+UI1j2M23Ub]>]o't&5StNi!2#%SlbciY7.3m\
%,N3j+ePsfI_.4g+L`]$:hLFNKC^g3\7^,h_1kUi+Z0pdd$aD@FWV?:hC@T,A9+/;eG;+/R2m`DZiQL*/pJsLHkK^Pjm@g*jUGZ2T
%\,tB/b)P?9>dAS0Z+qDQ?`o]66W;V2q])k_92iripJZX)i,Z<6Om@E7gV);mm@O@QIJ23Y_.#K]b4kXtGT^R=C@[7LVaO;"KhX9]
%+66-@363Lh4[f?Oa`gAoZ4F4"&RAr]j:.B>ggRtC&K<:ie:).VHo:QVf=ek%fgB)P51)iW3lE4gnh=j7R9L0L/=h>D29-%ONI@EX
%6jfA:m\T<,c'N;0o+]l&7_DsZaS!9,m9]1G<l]^b\970g:9P9ipC)aTi.5%&+j>n2AA[P8lN-`[9E;t/Qj@-%?XGE:R@3B10R5L*
%.IE76o.]q^P4LqL5JhLn]%=*u0ihL)q3?hU3TfC5LXV<4fBLes*Ea,4,VH=i_RQOq'EeIKM-[53AP">f2KG5=0<Bq;^WQf61_QWf
%m3Ga5-A[!>C*u$1r5P+_??80KY?rmj;n`)h/u3MDrlV[>/=NMK_)H>YgtH;f8kqU?F2L=\lT@a%h+r%R@95ZFanAQ_qjL=?`[in6
%+BRHifnljbFGXW2^XCiaRr,BeM/*I=[/o[n4gKh@?qcSTZsoYErqqKiTq48noe&Dl?rtAhq=XE+7,=7EbsmRZFT(Ld$l/Vrr$sUo
%,mpVRNm=:N`"&B/nH_0OXm%o!X\#tqaY\4GCAQ#Z'MdPnXNL3e+-uc,[&)T:e[ABqIQbmORdJUi]`jaGaeL!sJ#A2*$<p^lo\d8g
%*"++5Hdia/PT9tG]OW)3O6XM'6m[_c*/;CFJiVL,nRH)3,NUE6OBffXj,,hpd.LK?TFmqZ;9dK;SutCL>`#,`+Frel?"TXOaM(NC
%EtQV@.bIZ[\pQ)DPaIl:n%6G)\g_,9(X-0r&\BWjU'*.f-!<SaRuNtt=6A_nPi<-*)6q[<Pm9[phFY;u$dF'5TH^2J9_CklM^LF'
%R;R5aq_>@^DnE/geIbL'rl11jX6*&t]TD0bE\LSiY*N<A]\^+t8('"aD)^9H4j+.D\+G&iPr[LbeS_@8E6Ypna5bRQaT3#;e`$Li
%ma4r"g=Y]cKj5ZN)fsR/C<>$+l[>6J+B+_L]Nn=0jVtO18tU@TCi&i\[o>P9ls)B`jm'-c+<4kGRE70gAoa3tOqTGe\QrJNk2ad)
%BbNW+I2<>\5\Q0R^7VFKBkFhR5B3g)b5l8KC://0ro*b@X63lf;/]nY#FHYfPslKYN/DXd2bGgI!QJe)&Wa54c=;^g"fEa4/%3bF
%SAB%;!]J;K+Ql'CMA>a#i_+QF-`cUQWmYnSh")4,cmi@G[<.N%\f2=7/)R%p*]P7C`3t?K?E>k`<g8J]b<`j0o.4X7Iu[l"%d"[=
%pG(C'Wd7P'"k/bb&fb`sLVLK`c#R-XF.lZ.cBhl+gT5.k_88@];fbW&Y89EM+m47YgV);m[1>H#(TY\3jYFD`&DsT'.J=58QQ[?t
%`W^1b`.baejKu6E.Hb9_hP+R<n<Q:79cYG!EFlP"ORp2=H)GgQX4ojfRXOXJdG!_;A_Chk5do8:9=I8oaQ9,'0t1kfL>;-<]kn_/
%M"Hu8jRlJ7Y$Ts]r59apA%P[OV>A"/m4s]-Sm0q\8qan`5c!MP"lCW80K2!uaQ:$V@5;1r/\-`0HJ^W6i_WNgY4kk?H\$H0q4jk?
%Jp*K(1[0Nrg1:FN%UI-1NS@N-nM5<Pik!_(Z7TG)EU#TP>H+flglQrtDk"B/Z]S474k5R>Qs>3r#7!"S<e!j`X3Vm%beEiI_.i64
%Ke6p<;VXk0gTCRDP?9qB@WPha&FZOZC*FG^C2"iXPM!^qKAeYoS/fi?N[r'4e9U=>hIb?cO'fB1fmUZEUPtB2faHg1'[%=8ic,Vl
%aQ3MI0R#MX8Ngn!PU])df]Bc_#FTdKF_`$].*qI95r9]3'7Sc(YDbYYa>6<B1bfJE+ms7^bR9Jf0KJ7I]5X'SFh-p*kf:7sf:(qa
%(NT>\/SpJ56tTL_A,P7\G<*gM)Y&J6-#K>#\IfX%X$UW[%08e[@^+P=$pg1P('0moKr*^)B_.TlrXGG3>?BlOL!iN"K$Z&poVoCr
%U/DV'0R"[Fm!%t"CUSoO^YL=rH"oKK-&t<=L*RETV!bmGH?-r?X>i/5,bR,!P,2<QUH]70\jG/%@+#$cm6+u2c7jue&B1cHR6:1*
%eVL'a5^2\-3U,se97T!2[!p'6i:5:WW:m_6O`;P`G"L-&?o/^?NhjD+Gu!Y,Hs@E+8aN<0h@R>mpJ3ZR2KOj(1L2ip\Q4Kr`hnMA
%X=/.1(1JnM.'$>dm5tqsZ`')?(%V9NMq78:;(jAHOK>"nDh.3(+HR3@kA1_<p+fF$UD!dG]c;b%cP224FJDY)53?Ab.<WBK`IF3N
%qAHgF5a9N#PF$o5jWQln80XMs:%tB&hVpYRW6POi!GT!27eYn$bp&ntAbDo>G#[jK%"Wl<8bT)sh&-?WCA5lKGH@9fN*]mRGu<sL
%'U5a71iN><luum'otV#1RmOE_h*5@[5[#%kWQ;[s4`!--ilqsD,X=]l?B):/IVlWY*d0#.rW0&/X.H6sSPF>7H$C*;>)5sn2s)AW
%Iq"C`-d'd3a:5H"6R/#rZORG)-i'Fimmq.$6tRXhlO&EfJRo>%WNO&(A0s;41eKGtN3ZWM]uo\I;_>=Acrp[ZF#>DmJf24mB!spo
%];SaRkN\cf7Y1r-p3lEf;oVjrGh=&W.SZ%[@>ahY"G/a]ag3OE"9g>gHUd]6;nt`"B!iLVZ>3d`m+g&:]]N!XhL#Id-PR4e/\[Y>
%6Lcd-\`,?fjdestn>bBf7iNI"M#f3m.!%hN'Bu:/[igj"^agSsOoY](l9\2XKiaY)k(g8Pb#@Eio;M$$!RRr[Q/cN>:#/BI]maR7
%JGq(9*5qQ=HRA^6)dcoH9&#&4m*jdc8Q@5/BC.jRB5HWCc,3/<\XUJqRtIl7loM&M4FKA".$1O.Kr^Ta[BM9gi,ZDQ[3C+EC52o-
%,c8JeX<Y*9>.I4#Khs;2."_H,$_sHULZ*RFYT="XAth#?\BYsh$KTBFQ>p=s&m\<$-.op-=EIAE8@Bd'+"o%kG=gi1F,1Z8fSrcW
%:H$O'$]a1]n1\6,kBShapLNZ#5#_.n+-8q9k.'Z!YKiAJ>I+nkVe.V9Hd>U0"I3T%drXCV4nOi:R1lS9XopdUN%'Pqb.MGik1BK@
%i@dGLTh9EcWUe>iO4,KNC1atR/?c:Sld'9]7$UPiZ5'Rh5p#'ndTh#^+mE4Xc?Z@M3(EFM5sME9&loF-Y%d9H.j!0(eMQ$?Y:;L;
%QV#%-#8C5gJn3FFIk9!4o0uPjQEnELV(#($E7Z0Y1X%#bd6bhirp$U61Cq]q1r>si)p6nWX^Hb!X_?*S:e?aKp:FjB2BE#ZE#pD1
%YT!2W9]g.-+CQB])#<9f[GG],e&&t>aRf0P3uN,]]btmHKhWDmG\S?1g#D2XlO7FbM;*Q_HV@,5Su2ifUkXs\cN\uJMJf^LLQ<pY
%2FXkpc"nC?C:S#EXdcq2Gg+&1cSTJuct#/k=JBX]9"9n<g"MHu>T/#AVlFFe+3'ts)-`Il#>RG*mN'OW;=4G'mH+06OB#=ro2mYK
%<)dAJZ\3Q;Ka;`1SPf0qje(u"Z"%"N\sW2)S=kP*"%3M01$2c0s1gB=K<1Wu'BN;A.X+r,/G?D[1+h(Cl#,Q\N27Q5.!=)?\t08)
%iJC_jG.&HfRZQNn\mY_2M,I\4OkV2((:;r-&G*)m;LZ0JJn+#\[RaKn8IS<)/%PbM"j_0/Ve"GM@XDj3(XSC4oc9cs;9NApQq!ga
%CYDF_f<Onaa^`@'';+Y5<#2D#(WQ=?DB3l!L-RY"XKW5dbEM/?9_cLM7(1-5YuC2jYZe;fX7:nF0"ANL@<GRZ.2L+L^_j7+hh`6]
%@`&c3p!!6Ee]rp\2A\kM@:D5EhKNDSiu4E473r"2;M=u7<;LR5L?F4iVMFHW0Og-d9IPfiTpc0l[\%.nP$-Q-Cs,^G54p0ibU/:!
%J).;@#%akhl'g^r/_Af]#TL=@bD#bdb#Vm0>'S`C)807Gj<a*a?GuI/kc*AGI:Z4.]0Ra^Cj6u\CNX+RI<?][pKa0TdF6P#a6Rm"
%AfiX'?4Y0TbC6<=;6GRmn-+(g<cC&Hl3M.@Ib1/&rLg0&JDZ_lBUd28K"Rlt7/pO!SolL3>!-GObH;W.pJ"IPkLC1!C3%Y=eGX(K
%AeK$J!EB@a]!@F_#C&OXOQ/lJbJ.*G@e)N<O3kqcB;K,^8\/f$oN:s8$a3\,bc;MnU:,1dAP5!X637=kJLNEN.124A>:Nd4&8>Jo
%`Ict!7($-$mW[tLDn6r'<^LD1CKh*9^Nb'Qb>FO`9X%Le_(HJQE`3>=?Mu'Z1#)/]I8MptC%aRq,@e0ns3;hR5XJ\i$e6;E.)Z5W
%`*`tM=iU>Nh%`*7fq-!J6c$t,.*,=;BE\@'"WB(gH2UG0dr[&`7=p=BZ7++0^N6e;W8<j=/6C,ATX\_]'S#6o$]nYR`+/3hY2Y8g
%[cS=CiWU^(p^eU+HBIE#&VQj'jt$Y*C3?q3%6TqqqcB)bV_2*YKhQ2OCEG0(=nY`b#+*Q1,"3D0(X+iq2-sL3_hWSl'Q+LY[@0uS
%EhEaakg3S?U'a179^tZ<oY;APEi7KT@Tf%6b!MX3?G%Rd@8Zs'X_s&^DuoaoSaki"VmI\8NaWM$c?[L7V^a/^W=PhdNon;)`1Bt)
%]DANEM^N,S,%84C[&5L['Z%(><m=08!H`3W]a$sQC.I^mME+tr$'!,.@Oj,P%a"M&XlcQE6HYWMUn(u4i!Rqg04'3J`gJH6OC0J/
%,p5B(*g+*?Af>im&O9K^/j<1\<_BR'=A+6MieWBB<%LbHn$G`9+HB&u#IP'Np#rAIJ>HAfUWk8_<XJ`g]W)I<7!hQ[<ihD>GI2!O
%'GYc><,AGS![X0G:,cC#!npXs^;[rLQ9rpl=urpboFh<CF;c34!3B1eF[R;_Ve5`)(VsM<6oEjY"IRLN#@m>SA7NP2mfTlP"`da2
%Q>L`+,Po.B)$ra*7+)*AD)p!a&90Fj61#Pb3aj9,bMnkodlJ3&@1YPq.@DF+Kj8UnnVW@d`b,hi:.C^c@Xr<b*]AnR/0DdhXCu;Q
%lA=-(O:u#G0^$O@H,q3P*_gWT3i*AAVGqIkQ,C]iQ-8aV9(@'ISpKeBB?a^-Ijj=Wan8*R:.8)7Sks]N(%g*?2rCZ)e_1K#S0RR0
%-Ftg9&k'k7RMWrM*/dtQ4Vl!Cd`TO\.`J,KMk)?*?a\8W+]Q2oVKdI8Y15jqIJm-',>i&Bm0404D'`t^Hic]B$'7t(Gu,B4KPW!>
%Vq<?5^d*-tCfuQi$J`+(D>]K2oN:6`p8pA,Aql8Po%j?S*WdpcB![)O@5(W@/_Dki=Bnb4BGT]ATU4_o$t`,\-Rh0'3*dOerdWTi
%9KNQH;H!(Up2CL*.68"jKpF;7Q"1#l,H;[gKd`iHLb]3G05Mis4Z*2lZPr!jAPLZjQ_t+9OHu?)"3Rj16o8mW<WF:di$Z]n,".3.
%9pYduITK-cUOb0?;a/nLMH*CsY6[NNrK[GDPRE^kg@bLi3X_rLDuE:(4_t`i/Tc\N\*Aj,.X-DF&e>j/qT?gG/Zq>6EMOf*l^M+f
%I)LKW@MH'I>j>'C^Fj(<@40'f^*=.<S="$\>Jajm;fdF)R;#cWBgpXpP!]88*5"eIpNS?dV3@&KN#\A[ZK,Ue0e:L/^SEMmQK6t*
%`RA%UBium[F#A/Rh2JkA.kJC/?!4K[4(_G)lm[8omk&kDkqV<=`Kp)brjJm3a\insW`lJ.1+uF5h7_?Z-Nn#+=nZ"A`808;2(ToF
%Q?opqWLT=+Q-Rg06_:K8=Lu1a$=^nSRbc:'1]868Q]eL"<J^e;01:-)gWP;=!EKYt2U?7,$WOcm-TfRic-&_S:"gfQ-s`-Hb8cY7
%^uU=G//5[aQW70;G:DX`/^GM/o'OI)\4SMp"WY)><?uCPj]4e@];OaiHBd=pO[A_#].eWP@bTnlKqP2@-YX4mFTl7t]@bnr/H`:"
%McO;jR1Z%1HLKuQVc!r9cq8@5^Egss0W"!%=3LS2e4WC$3bbGC$TU-0IN,;9KmCj8,hQr?JMF77a$*l\'C)%og++fbM-e%KRLtbf
%L1?9K<"(K-Cl7>KYS[dI4=S&+fnraHPOC&Bh,J#LMUrV&d],LY1=eQ^(kZUt\4U[.)A>Gjj%<b/4;G$dU*NV!<Oiq,hH6"][oc]1
%mTEW;=6dReR(c$\Q*PNMSrrr\&."R!m>GPbQ;s<aGuY@Q/mg&]$%h.!`P'?Ii]U.&!KXN8!N>dJ9qc88AG\e6PFDPU!+$016->kF
%l%cB#R,sO%c9kt==E8?:A\@7)3p"qe2i>3MOj!-mH77$ih\@qk@mf?GOc<Lm>!IDelao3[iQGU-(F@KKi]D4eN7Zru8h_bC4$nT1
%m\SoJF"pAk6p=h/_t-IE9b>IK;n0,t%V]oG8e&]R0@NA=fD.jN::]sol2"[.T@VnfiFF&XPH_fi3N:1;Q\u/F4S$Qt,\OGES%WBN
%ESGuc,qM8d:5nNR(q,,I9/[q6?1.*D;'6nWJ+J0ho=t5#J,#@[qt:PMqk*o;^]42'^AN0gqD2ZaGn'C1s74M9h*:i9hu9Ogq=81u
%ia;WFgY6Y]s4dSO&-&4ks8:&i4!4ChkPpe5SP^^F6N4CGM0KC6Ql<rj(J:f,eJ@7sVP78gkXe!^ZJA3X*h(ZD58>c9:m"g\9.Ms>
%HCk?hq,9[)NTRK[)Y[[>S??^'mC0>E.b^X"Cm_,_pY>I]2V.fHmsDh!IV\V+]:SN"O(OmK6sL[!.B#8^edg\U0X^`C1U&JrVI\6h
%":,[gCpS.[kRH.T#;^C<D%>ZA;5P_q5QY]kIHS49B9O<YHn3Y,+nf_hf8h$IaY&2J;IJluF&%r1?\_gQn/Fj4Y/Lbm`o^Ia<]/Rn
%?Q29;U:]hMgFK!&LJE?V:iE@pPBAVU^AC!ePN7/"G3?#K\T]`,OnX7lF"m2b=JnG_/[UVcM3/LJPKno/qd^9;7%<PSr;Tru](TBR
%k5Y7(-0CpGor@KY5JF'uE1QPc+HNLrLP*4BI2CI'HkHtoCZ\F;D^4cSZnoccr9*q.(EpEoh>7J_F*9s#"VU"?X90R;bZtuPV8E&G
%>&gm#4>O=^N*uJjD<5hsmN2R@hV$;1;r/;'"0a-]ZOiO.ah7a=!+I!Pb/TUEhP]FTZlUc0qL"Q@_@57*U@_.+kE8lj?5G/\2<,s.
%(o5<_cOthS4g,7@UnY>bJ+n::Qf@"9mec]b3P3&6bnRniLY8M=:27q"&;"L(G<*)k<Efdt$6@uP=J$;K28rgDD:6I=`QtaRO&>r$
%Drbr:V,k-j5nHb>dSo;E'8j=iYmN&Q4!ZV&"AJ%ec^&u0<K5h)oLD\Gb9%PEj/-"`fUO(;B[W!LSG=rl2n$Z!ST[+0Z!%re,fK?D
%CgngDa"U'D%gjCEk"m5\`le'bUu#GWT0MkYW/c]]V3tJTGKC'g?.d4h!(;a]S1nh=Op&Wj/c'@YEU%WXrN9ER$&ih=>L8"mgg,`'
%Gn?gQ"&Y*N?Xh:UEAEf:QU#ABr5gOn#t6HXd4_Cu,/_Kn)3j3I9C(PeT!q0+?6i*5<c-b[/9"'9-KH,dc+-Nlf<15/2rbfB2L*mo
%T4l%ao/aT?h2Us@)^G]nS0J6^`C"=*qtUNXJ9X28;@U`CqHt*_5r4>XbfAbrr,nPKb2`q"EMDLIqjDO7kg+W__9il`H9\$gc%%'u
%pB;G+.4L-nJh"QT>4m1#B2_Mh2h)8ql]D*]DhS#3+GU$8^HOV+@Rf"F-*&P(ILNq5b%=4#Dsfs'BeBZ:cF1?DNsWssWash)HpEom
%H6*Q^Nq+R"(S*Y)n7`>2;rW6Pe8X'4%G$8:&\/*FnQKBuV!HH$NuH/U<&O+W.j;i'H%Y?tcI-$OofGT7>D(-+il&Wf75]Kpd1&R<
%WjX_lP*3[(a6@5sN'D8bp5pN='HI_3N+:('20UXik&q,Q'mXW?BC8$H-q>A)lu^JYC"VBW81)aVC![s@2O%[Ek5jp^Y>T_&qMVGb
%qo%E+`sXcBak2coHAM9cd=AK(JB0)F7!5%G(a(VFLuV"W'UE?AXXq`0g[QWl18B+=L4]o_+6[?+7KU?7Wj&;=\aWG_ob:@KLq%Lh
%1ZWo`VBiBR&aMQ8CgZJ)s%GTe!&Ddg3a>6sed!R3(Nc-U$I7!D72"/+=h'FP*0$51dtR4b&rcACK-*FIZ^fU=/s5EBB/N4<lgF54
%4_beA.=;"*k=&Cd<:qk$U/XJP.VO3gM%m@c])WqS)iM=4(-tDbou>jq%[9:0X8Gl\]$L+U"Y@DQfi.B_=a<&\M$=:B-6n!"+O=NE
%3LggE+G2_u7CD1?WNsf(Gk'224;On+dc\%OU7u!QkZ6f5E!!+64;D6=ZXPDQ8K#nq%5P:!XLt@K_.97L&Q\FAXFB<Up]IF+T,@e.
%4BdNfW]GMDL2[0hYm4)@F<TjG611/0Q>"e6S#5e^XUn3($5bH`ZGmu<#"%u">s2+smJPG:])0^el+>Xn:jn/gK'"h%=tERY!c0<d
%NQnY'_>rhkQo]925I)[BE\6>,RUM<:hZFd*f.fU&%):!8m?hs^iR(Yj+Xi+&[EtTs8WX":ERN(*f&qkm,,Rdn$OUJLP>@*ca%cde
%poe5iG\6>R<Ubt4VMn9_O5$nma$;?Lcnfe=1m=G]P"ZZ]Kh<ekFE)irABS"m4g:2B&!g'[,pLLueI7QDmUnu,>3j\Ds+hnP"P/rM
%EqVnhbT/$<AkF/a3JN#G+XXc$0RX(e>*!7t+DLC@D3_uH.pc=%-s*kYP2(N76dc*?(nELm>!9h8i'PdpOM*j^F^Q6!(`U?@2(lK>
%K5>JVQFS1tK$nqFj3!akha&\T\_GscJOddVVeP>S<q&1TFth?*="%[\jbi@aM!jSi6hRdCaWE>qqnso5==JZT<SRbAT/i:Ojd7GV
%N$3KPGq]";,I7N*-I]YV]WBF%1@FCk6$AknPZXhsM#:rco]tm./37?s0ek18<>l2<FAVqlC*TeV]ikSXV=;tdXd%;qkqFW9+B\mg
%]%%;P`$D7JS;Kf,S"#j,<rP&3^%?%`S<pC=`$b\/Wi`/Wkr/ZH7:NO5T2#lH`@"hfZ7tSnR:U@Fclkn5XfSMsr6jZ,8['0d@'XHs
%=LrebY-9(V/\_MLG>klpF+\:,XTm:&L'R</L^GP\89@n?ef90_p:=GQnW-O<f[q%PR)DK$bKtT'`,s\[draPMGP,4oo#*XU3&&1d
%in1%[pL4;s)br]IN_t[6*u7)>T>Zkj1lZqj6Qm<WD+-h2lF1o_^%Q8"!J>WG;3^XFkGVsnPn(3K&m,^a/V;&n`[3]IlH8\0i6S>%
%2h!)Ri^L'5`((tVr/:].*EoVJS,^OLJbiO6iX_KEUQIZF;7O6uWDQ=2i!ngRhQUKG8`Z2Y5/h'HP[Waro/RuT*Gh=a`[,)#DP#TM
%N/9`W,/SA`psZFUqm<<@a?<Nf7Nk3Baqid+_:?9?\QEQU3B%A'r]A!<+$%A]d]%bY<bg%`at[Z6LKT2C+)G/Mfd-;_@4Lcgi/"&c
%$EM:2L<uSd%26,bJDKl*8<1,,A,t3b1@/ZFO:$H3i0pK/;_jZ;.1A:0+mLUW.Wml='LkC"NE$n7)9?=eAH<=LJF@D\as:l_74$h=
%!a3@T@BBQlYjqT<00ZB`p>eG-)]>5e>C'.(EXarL+"0uNTmH((-;#'lZ0R40RO5?EYRDcdJuM-lhkF)A+>W*ZUo.aV+Ku27-;CHj
%RT:qFc]XS-F\pI2ZF*DEPAI"^aaD1NaU"9P)REMF@T<j,]-"+n\Ul84TAPJF8YW>""2C&8mVOP8V/#2G9]<bWEM.d\@I],ub>C\^
%M;dZMG(n-;G?<e8'mu@_VNa%A15-9U/`eW$0+&d9llQq2)81tlNe&Tb;q=Q!\s`X^VC>(@10=7s*>j;$R_'&gLrXH-+pN'qs";Ns
%7;8-U=d7[MWqJX=Zm6odhbLN1$'8Jq:kYhca7q4S]On64N.-oqn^r]^=2/12SlJ,(IV(ENPX"s4;XRho_u$h:6V8]<9IspKaTkfF
%FnkiR-@&T[+VTgMcq_ZuTZTCh>L#c+E2?KIM/!?'XnZ>T#`.6.&s3ot`uC..$q.MFjPI]Gq,uBiar`3r5Q&=D0NC,A-$/L]WKVHt
%R*o*qjNW7Yd_\G:=Y1/J9t;Q0%.6f\/6[H3!ab8Y&d=Ddn^@l5@]rf%!ZiR!'-XOiZD/*r.I\#%oa:7l;QcD#?:/br2^Q2"5C`8!
%"X,RjEj;nh880qlIUn8Hb!n8_9?2X#PUDiDhBm84"jM\47Mpe`0kc%RWh7g1rh,Z^7gAE[=HhSO(]7R+dYOnoLCEGj\?^[m:/H(<
%%Q#X&'O<]:.hI8`;I-@$Z&Jj[HICMYee1=!0='a."63O8#e8Z&Mi<"o)/R)>lNF<"$NGWaKob<A;^;F&_;+K(KbUSu%-aXL8gW8p
%E3^/[bS+f?72aTdYY]/BSF@9ebcg*#9r&4)lN"L2(sm'2Y^n81&C*Q\<jrtMmrT`Dal>W;Bt\6Qa21p%.7V903TpcpK+s8"_s&%-
%4)3?NNlcEohoRT$&/eBJV$b0UK-p][I<#1dAL+T(@OQ`E;%^,0h9$]:;-B'-.9S?tb%kJiV,%lRLX3BZ(,iiEP8?cpcoQ3k[qJ3/
%jJ!`-_,D5:@^Xm=dZQ"ZiO`9"QT51LW&\Ij>QQ*$:bI+64GE8e5hTNpjbg3l$Aug%(8B,WU0.IElN]Y$C]RDX_1G_Nch*nn,rP==
%)?lZq<_Ajf+!1Jn$AGjK"T$#$rQIRt#L:LV.)N!nK?%6%.">uQA&Pc,5t[?685\7i\fQJ*\i#T?fsTj%>%g:s=D#F0;Y:L?jhs(o
%Y@NfgT/GO+_$fZl-aN$N1>hR:9kg-(nn8Ze,L%42>.2i:bQW>&,f1uUPm18qpe5h\<fK)c0p!i>c1*IL6:L1Z0HX$:%:4U7@S3aP
%2M8Y!8[ckuN4LG64%ir"P*aB;(1SXs\KWgD-,<Hj4qpbNFNQDL4c6c5(9'?"=Vl(/h$-:H8^bsc+H,,sECq0gP%;?hKI?Wka='[!
%DT_PdiW9jemo>K#&Jr.\m!8-A',O>o(^6mt[PY<'V,K1GHZcgqcqVLbie#kAR4tH9ZeA$uj>H\!mp;N9AKWWQQja$@J'p]((qCgS
%JKF$jd6M]0g*.*Yi&,1])Zbq<KmqCbN)<Sdgn?;J$4A'D2ol>f+Z\c8NSH338P`>bL89:t:<Q.RT@@*-T0C?*8d^^i1*9!NQX_Wb
%2b@u$9@9`IV%asqjoSsqUT98M0Gf!5kC"48?1d-?dS.+jV@IA+j<Q@D7K_NGe)[P!oA],/K"OX[qh0Fa,'.pur`m$*;M7b+We^XH
%\47E.b$Q?H`KcR=j(N@t16SFGVfjR8@-4JuPS"J'/DJkaLeN5`2NgHCXJ\lb;KYe/Xc@pfBYMuY\^Cb&mRJ9hp$n5WW?WPRp:o,i
%@6(flNduq2h<N(/l)J4e:SEg$5_XTd,>#F@694=eeG=QW&cJgPFd/#ADj2ZnV2TrG`U-PmKUJ.kap;pLrFIK(lBC3jN\\JUW'oWG
%7T9GrGtV%)K^`?//s;GN.\rht#Z6-2<^d/-RP.ZoQR00*XbqKGVI*(58]5&:m+G6)KP>'M<CDX$`)9#hM@JWI7DRV:MF`nAe`/0V
%LhMQH49$"P#UEf6-Lt7r]B7[[M*/njgPBL?F;9b'U+R0B)Y5^#EhB-g_C=`(a<E?+C.N/qfLcRibZf/W_O6T*:5T<pI38k(P4VpE
%p6N@IfeA$\=;f!Yr5i$('O9<2),!)B>>l7+:_b(aA_H[Kq-g&:bmaPCgb86jaVJ0b5d30d.#Ur?DZ.?e"(=^b#TbHl;CMitTAme=
%;10_3a.Z]G0sW@:(HlXSF[UQsHLH\3'.P3Y^!EL66lfs\X1L9a<'@gp(qJjah1!cXfP!`u#7t*5"fWb2W7p"K$AYcO^1p5:&[!0'
%FGm&-?e"kJA1]7BK@H#o[:#[/@lAHtOq,4CMJijP8m)$e+0=0AdMt9uPECT+(Jjas+33W4dmh:*%bF1Wik>eQ_:Q]R;;6[=Bgru6
%C4N6ejafZ98])>!A'o*"op2qor(4J<7'=8"D!p,$7enk?de_&UgQiD(,qb+7HsCb\l,jQlaoW]4WfZ;VJo3N.Ul=0bQ<cn1E*>Zm
%'$NU7Y<\QAEX!>W89UElk-r[#a?mjW0B+il<T(8Rq\F4g[-Zn?Nh)f,YTdpEo&OJ\,dG2ZM!TSoqOK,3c4qgIJkSa7WSglJjSlu%
%CW-i2MraK8R1WPo8f5\n8?S+e"PG&YCXjJc-Ct12VNDkrW5j0T/qfYR)9p2n>V4:C2QW;j^Hbi,7<=/OcGN>$PRTL[D\ghiPb">>
%Pf"]G%-D'.'-4D%;^*nY5fH"`)'6?JmEOFgeYH-06nE<Q$sRPk/7Liek1OC:D.NSt=n4bE7G=u^j`Y<uV<.ZH]&YGg=FF4:Q!q,#
%0^nci5E=,EB+n_?'e[S.,ld^gLm5`a5o^Aj#TU1$i.EA^A`RA$QsUqmnRuYF8M.:'HZbg6L0m@!Y`lL[5H"AW8PC="jj2)ZS\Up:
%UhFWnn?hK-CaX2n=(q8M!lt7+3A.`R\F+[^:bO28+UY_B:>kTF?sX;ql9&o:E'jmJ3*tNt&KJ?o^t"TW`0V:M8K54s?Jn:Ci&eE\
%^nn/s;.Y**-V=h7jBQ$LN.R3CCbK`PAELk@]tbL]8K7[d?JqPV>.^?@71.tn\t-VMH(gIE?o`ee9:VJ(+)jr#*qf;YK06Mdq1++^
%41>_[9j(LKEro.;"qg^n">37"A3#4i9I3WkFol;mFiRf`i9J,Aof.NWkdpB\;FC51gc(Q5\-D&7VfOGY&&\%_q1*8Ud=!VhE)Bm!
%Bu^Gu`5;,3%lg@d:jDd*!=)P$pZ2Je"f.C1gBS_:1+iG<q1*P98^Wh73+Vc-*GhqoGQ;23k?*p_.GnlGot_Xac/hmI,)[(pk2Q1J
%Ae%\5oF4sneV"'%'abON^DeY5"f=Tso']WFn7S!@O:O<0S#Fopm!VKIod69V4FcIfN+`6/)hrK?18mau+?/\*fe$S(4!odP-+1-_
%.#qp8/.]!^gIE/`\lemrCeP+R.L\TscS0WpF55m8WSBbo;>h='!7/L)W*5NWeBA@0Xj,!H_4[Oo0o&Bs&cJjis7Z!5P$G3qP`8*1
%h\6jXFgpL)DDsf522Sk8UIum_r=1Cas)0WSX:u>[Ea#'c=X=;o:d=9e2KYZBjo<T2#`l*6J6pA:E$Z?_RjL@$q*];i(*2s-28,Qq
%Q$#/=;d%R:;N3l#dP'e\c+@0DmXP(ti\Mcc#]mO-RLiVm"i(t,80a?0GCN<=H`ZLk4M=0ZbNM!gEKq^NOmUf6_>DQM'n6SJD\90F
%B;>VqPqg4=7uLO"-eh#9,>tp\*h4`?dh)GgI+6hYQH:Jbs"MpFjb*VjH4c;DFsnCHc]_F78P1)&>[=Jt.8.N$\MKYhAP#lUJdkpU
%g#!kd?!F[0'm?>@;qY\P0aA3o&r&/!YmD=IVgqaB=]Ul:7Z1h#9\Lmo#uWl8BrF`W<'EtZUlps=])pqY!NAWlk'A%\7a:rtK[V"^
%O=Faq@Ut>%9PtKB<`;j-W<=^5a6eZIPX=LR&*m(\C)G?Zh4]cl#g#KilMsr8Hd2^cP5Jj4^I"hT0LLa`/>rVJF"c8>i\D71R`d`B
%'Z[>+e3Xt'a-!E$SHo;l,%OK/Ao$'q0MBPU6u#$5>LB]DUs=u7*>^^,=Ze1c"YJFcNjl2#2a<>O0,K\lJ1,&ri_dTqAh)!6K^JUb
%[Wah:X]m8sffDh'lhV#KLa\`,s"G*ro=TSNK<JoSL5Fj5o&fthiM]miX%/=%MK+)Pih-X,M%/\JdFO=HMP(ueAEH@>'N$3W\Xgg<
%eNHf`F.Vu/O^*bX)<T0s"iMTRPZU6G$i(Jf<.nb8p`ed($P`s`';R1o(+LNQ!%^Gg=K%&36%`\Z(+GF6esAIq7>`M*[a&g84;JVC
%/J_"lkS>Yb\kF/gAYC;?/sMV>6Le.1,kF]D$s[^&<[9u6GfEI9'komZf`1KH,3!,SO$/Yi$(Or'jG+L$Jh0235[E<*'g\$2G9/6+
%`JPL*5ZOP6HXF\-?(B\ugk%t*7"t-8W':Z;TY(l>%uM'p3W][Vkqjti,l,#BZH=Xn6nr&nK)I5sK^iMj[DEV+ZGp)Q*K(U$T?44j
%i^C@Q$Zbor0TlEF9/S+-nM0&!iun;@;'ME+::58+&lJ3oYTfAV-]^ELT'];Z<tFtqi-[+S7'RG6.VZ0,gIuY/gmU`j0VG[R8s1L/
%r"?&)B160q0`Gg"_>')_X8eG2b5.RAr1hD"-riT#TeNZoasTS4=-69^lj_XMVRTKfM;*EY5U^8QL_:jM#"9bhoWU@b*U`m2[/J-M
%5\_\n%t.H/]NU)%)mOQXhNWallZ.!T&?d5GWnLhI;6ntpkmD-]/Ft^$!g=]jm.KK?;Dc$9;O`q2W>'(9"N=KEXT!>23-s8uU)^Rm
%eK"]'e,B,P:Vjak%k``;h3')A<#S7hfr@`__(lP8.UG1qjaEUr\=tTT+TsTh!Z+.%,AAA<?/*K%0Cp)G,YCW>Pm2,N8`C9<`YU-j
%&h80O'kn%D*i#37M7bp&&hAl7.`O@P.1-nX:/M'U@K#_ojNU@b6b/Cn1F:-P4Xb9Ig9pK$a7.;EKEr\=?#JR7&7W8-!<J#iBG^5S
%Y5%$k^<n!C+.oi;:eUB@q=&P#acrpe@O=ZU:_i+hh9"BXgu7,SZ$9M2=cVV.YN(]e3IDJ(7'`ni\bN!(&k;Bc?,U.HbBGQ]\[QeK
%I(.(W+Z1#3X:hK$1!+G=/$QW26`T6l"B3E=0TBF9h%9!jk^!kVI/H*ToN65OE3t%XP$cTuKtIn/L!;r,P"OO6pOZ7M=8&F8N/#;o
%V(B<4<KSgpWo/qu4=`3:R3.Yh%37ghfj<dJ.>RhaJu+^Jle#r&ENsZh'OYDGh5Y=e@Bmm]Pg"^.;:AbWO!RnQs(-THHdQNir)pRZ
%<-bn:J3sFWgbI+UqI$^dVhR'.Bg=FP<4'C1+;%"U7:'^=k0V4JJ(7,iWa[`;WWJA>r'eqW6s_-Mg69jb[%LjBUK!LVPg=c>oMdNh
%8D^)@KE?ekWSNn&/"*hu*:k4)UlB:_DjH;bM2A1#'H["Z[0U*0W7n`A\^lU@U^t#@19!MjLTMr%Q=81hb)J,,_nDSDU/JU8F*Z9'
%+@P`Tp^03N*t^'_^CZ12lRPnBaI\`dX<cTZ4dr^_Ef[r79OT;GN"Q]&i#e:o*,]CGjRFW(3Y3kk+F+g(Hp^o'Qth7"g[?Ed;=?3G
%Ae(o1oN8:H17=oop\6"A/#JgFLt/>Za]"JMh\AoR=#jI=$)\KuA*>A\LLS/L'GWmA92*@(5i$n/dZ$k3?VG(;C6d$TAXuf"9eB''
%<L.WeO&8Rs759C'(!uif6+GQHGp4`C3`Ro)::Bmk`A+@QKgH^qW(_aU&EO0r"k3R*s*3WkAriqMr'^/+YUG[HCMR$H0=X+oQ`tu7
%?CUOYZo,Vh6@HuQNJFnG;flXF;A)/CkQQ3P&'suBGqu5HiFbaD0o1UF>`SBnpABfmWX5LLGreC,BiljDJ-o:>VO7K6$g4RUhlaKL
%4B-<"PqAMWq4oaX,SThh\ePR7&$hHL$4>U!,RO*A'dc[F#!b*!%nFe.'M[]E4eb@aBF;H]ZP:3NZX`E"X,Df:\]ak1GRtP]&?D@s
%GXQm2=ssJ5<X/fFTV:?0/?7=->C5r<-rI*Lk$),sEic_ic-?/n5SS8fK%TeUdl`2+nPWLLB\O"Ajf42.5p?OLF4lm2B>(SQi=TY?
%ZcEq.VgY;b1"6B>Cl?`Wk#F/^i!ZT\LTir^;TL>`lE0hPWU_HTq4oXYF3To,E$p;dR+InW![t0J`ema/c9rLijtISQg!`[H;McEQ
%W0rhZUbnV=<;\d[AtGpDocS.7KsZTW43iD[bSNYmB6+P&_>gqb[JdOonF*720GMQti)@ns.^s2iOOLI%b[HZrL);eUV]mp7`mIjY
%b4`L]2_E7?;hgGh20TiD/L<P=_kT2'NY4h:`5jKZE#$sO3?cd*5+YP/.+BfYW6=\*mfc]+5p4]X'(ogqI?cofF]!T#S=sf1R5dY-
%YV&:`;;*U]r#sf:.kiKG%q-3=!*nt:Jm1/@\L8j\^mmR]%BO`CQo'UEb9QD[8e</>K]J7fqJZfQ[tO=^fFa)q.p]GcP4g\jCQEMr
%2m^!b[cVcP2\OE-8olkE\OXg'W<J]q4d.F<Kq_9G698>?Dk\O('i\X5P0PPkjC&;Yij58V$:NIIUEUQ/DaOj'Mg:e@4@qM>L`Gc=
%:@:179T2cqH2@$_lpff@\Za&=eqLV^Nlk5#d_i+@ZR)FXa6%"`@Q9ZIBU<M6Z4W6d(ON*G78oem,_P/QA:q<X64]USQ":8/.<u1h
%o720fVA\RJOsQu&GWJH[H1VV!V-8LsM<f&f5%]]B66n$8L]S\R3m88\U>0b$WQ''Q%"D8VAl0`W,Zi`<pi`E\j",^P`Y.)A;4V^Z
%G]^$]6fo>e2<7V*;Y_DU,#`\>io$btA+;.E$Pr-j+V[sC\Yr$r9\1I\J..b=J4*P]'Z\o^KYa\OC2ph%^eitlKq'FEJ].48"Y'pk
%)'"p?2D64Gfl/>YQW:@lM?/PNA?r0bTaR"9jGX8JmjB9)L4)V/EkEq$"YXrIr`/bH.LVh#"nZkF^6Q<kDX0\"Wo>IOQH.cl/a1n$
%NZ]P+f1&(<,P.[CW$Q<%<.rN[immpX;N,cT!bd38.7okc.GE`L^E74KaB$hRVL0h!_.r/3RnD?I*b-8/OqhM$E@"83@<il*IkBc6
%5@$.Q.^%Ei3i1S'js9+kaj)MJ">l3NVCf5HA=h2\U4Q1p5*dJmkGZ(jKoD2J\nfCBG9BTtf's9$LGGD\Or7E:#+0W11f]N=!@bD2
%'c>9=B.U$2p*aK?2&[a=!i,D_me>cQ#Dip,jni\eE`M.nB^#Pnmg,u5_jNq9lLo1[@-D6'9!6u]WX=hZjutmY>Or7I];`5Qj@lMj
%E2`tq1/";YU=;dJ<EQUdZda"9Doq:,Ah0[=QGVF&?hNE8D!)rDQ5+F:%YmP+\#l3b=+\S`=nSP3/7?OcWE+ClYiC]mWYstX>GetL
%=n9g/=rjI)22Jt@=X9Xg3+lW7H/$J^eBI^6rM=gNRGTM>,/jcFQa1W]o]EW\!on>LAh/,g;'k?J_'u[`19-IsE9]Ft6&g?S7^R&^
%-WNOCJ2/ekDcF%P8g,-t<ZW)>F7Bj:cGoe^b^'C9i;fJjj/,3RP#.]20l5f6],/3hL#atV[WIV<Q*WboSOuK;An@HPe[X^h;FpEo
%1JWa-2KB&IMG>X"R]UP*6L%n:69-RKL3]/])]QbN&lC=W0h=/i\]j![8L=KR9PQC`4O#:d([$DlQTKg47$-Xjj7fNXQ5$j%HubP!
%V5H.H_JJ`uLfF(0H_%IJG.l-=,$-A/8!$Cq"Rg1h.s/]9HVB*ubSF=PM-D-"</7l+XQg+tlo\2mWsn0ZP_nf_Z(=*d)0Mn1`0SgM
%C3EnJ87D$R8Dol9;/%#U<aN^BH\d_4_m81rSMJ9N``G=Bc8:BC*#63PIlpPLbV64ML`3R1MuG>&qE%epatoLR5)-J.^4U*1jXla)
%f8'pZ"!Sm&7;j[%W+oAU<2ubor(Ie3-=s`#]dioZ'oEI'-.%_khB>(Y=L<m>*Bl_pRMQ^E&$rQG!SGFO^+?\7/h^K`R/OT#9A(5X
%>q9$f]/%'#X6NdI9WcCuB(Jo>5pq9G<ACd[U(nVDaVKHn3Lt.(aehY\/:2fM8>0+=iTmeIFfXC-44i#G(N`N#"BDEIQFE+;\IY:7
%*9kl%*MK:/RRW8fHX/?0TAg2u&peu2+PEQ*(>P=j4uJLp-=<2K6!#4AfSE%Q+[PnrBi_g=kb7,b3L>;M7kEDtjaOQ6%+,GY(O4)2
%#n1obK6T9]=fR^k4PLK]#-@gkEgkBPVIFZKF<*mRf1NnjjgA5+OZEmiH!"%Oj`=H-oXepk/7gJDF+oh1o3ck9/U?Kor#cKV=u;$l
%?DZN(QG;%#<\bU=3BJhKTjsQf`<&@XrGK#8+UU-hGOh,4J<QCo[!=Vea]rb>5Pe?`@Nohd228Sec&nsC4(o1]>=GDU:4bZg^F=.-
%[a<HM3bduKJ4gebeUf-HK&CL;8bdiN"]2#WW`dQ`4\;plN4Ha%p"V+YQrOa=3SMadoY.>:Y_)dM+6VTu4qfDuo^P?.S9\1c!;?Xo
%ZCCk/Uq!SHs!gc5d@nkcb-$uO7K6OK4?#W1BW*E'Lfefr=#KVZ%laHVZp11&k[-b:."d9'^FDLIl<T2E<KtY+"CQ3p*"ZC9&=i`R
%Eb4_Mql>#j61GZ7r`TW:fFIe:<bW<'%f:#bDk?\gln=1E[E\[X;3A3&rX):*LiW4@_D.n"3rOsXn(!serN"XYdBchT%PVqAB$^;2
%82]/V7K9@hQi\KJrMpPu<]JFi?V1_qV(k((0+??ooiY&i.ZuHr+ti^nK[<9cVLOf[8'?\ejXEhti:O5*Pu-I7s/Mej;6<?dJ*E1D
%YZUNNLo'8ooWQe<,!!N7IhhXU3.sa#o"H`;qEt;R5)Z.?oWKaGU$cjq=1k3cSe(d8;j5t0Ij$-j?@).VMR?Cj[*AWN&;LUf0)ep@
%_:8"os/N"%O_u!8X2ma\@GT4lciLlf@&AR[4S191&C#XWl!MDX4_k0_Fb)uY*;Z#`?krGPrMuhe39':C;L*rhNr;t[>D:icp/gch
%2u3@04Q4(!\jkp.%eiUq6FSU'majd>69+&0_T5\tnW:KmB!@GC`r7Hr`6o2Wqb*S[\%(<is!iA^,*WlA9=Tn?aA)[ap"O0=k'nt7
%^%TADngV#d(B81?iaRR"s/VN4L#O`a=4%+"YdjI8+pCr\mc&`D<E87.o=rH(W**C'0=n4'2'2l:"1'JD0)eoQ%9g#ps$`QfC86Ra
%<R?:#Y<2cBqQ+*)c2YY>=TJ6UJ#1TRR_/B&[/Q;[J_$(ed)sW5MAad=/H-I^^qBFYs!rlLkcn16s2%Jnne,(&Y7O6W7K873:kkf6
%s2(C"$f1HY;B\H'J)N:"MKIKXTN"l:db.uQIDVgsp/cWGm,_i/@9c:n!-QK^/[)m3fO*KOGMut[n[J80L3>7,W3u_cr=pVfAMZ:B
%bA?AU(Al8d>.pKGr^&lMY8@(/;c6C,ql?.:`%C[a3C6p72u>,f<'=@MYB!De`,`,t>)ir@4m]?fHV]FpAb!m=C6QDik#Ft:-@Zb9
%Ad)q?r+35!cIh4HLQdDO"g6;5cStZhPn8ZXBp$1*7-sOk,(Dm0eEW.1_Nal7\R1YQ,5a@p/&u#9eSaqZ5.-8,?0![)7-Q?`q5Y>9
%,"O?[Qa_5sL9nYcQ*_YD@t1hd>>"^sfjB"Y8'uS$reeB`UMTX*,GKQ.L],JtXZbBHIhbRQHTpf"guB-_[-:qde4mF9?Ni@/K5T)O
%l4<aO`W'[O0W(?>2-5:9hVs%V8sjf7_"Jj1)\rI5O1KMu-@ko_1A5&XYeF3lH:s4V.CnCjrg2MH(AZ5T.KU@"UWri$jOH%Fs(dX3
%EdHUOY^*@e4Y6jT"9i`X^ks%IcB:6ibj.krL]?JD(AG*/?Q936q;C7^nbQ1%rC-b/eZ`h8Sc6Sq0rJ>qqNn[Z(ST<mnuUk(f^s)g
%ZGK'1K#pl5Z+h/pZ8C!AJ)q0.HFW3H`m%73kC4@-$_Lf(Y?n*KS;7-h'*"4@aS=Yo3npsf3<.0X2Dh7gs35SL=$e(nIi1LKGFJTX
%.q..#!,HbR)_;%m5tI0:(BOHm1sloQC*\8u@Xu:jnn\M4NA1`7!:*ldM2+e*CWg<Ml8esi^/?6--@iL&W@`E.^iD6_WO3">)Ro[X
%#[iPlJi>gqY`9aPQ#-S))k(#5:&rImT(6/'!NZ:!aAaeoR'm`^[L$?D4\j#7!:/YfM`([=UI!^B$ugCQa,9rK1?'up">Im[>fbk8
%^j5IL(BL%ujkRHR@,8Gnq3q@b4;@n3(BMaA&C%l`?X4-%T@j(FNa^'??i4hC>!)Yr(]R.Cm?1TLY>PREcX6URNn`7urQBlK\ln[/
%-Cg#d(]CCR,#V<WqH$HANnsJ;%S!R\MuV=!W\7HWYQa2SGn[tS2"cns!-?d]jFU)+F*QoghZU0lDgY%TZ[4:*C(\7,jaZ"f0\]Eq
%Mhh=DYM.a$s0XP.g0+>,a,)h0+9#>S>h2j!s6=fcia2Pd%dPUIGOrR1RWTi+r\mLKYPmt*FNJ:-*<'#0MB'bTs/SH5SmD8tOqSrS
%*r]7/d]-KWpg9S+#aUt[rHOi'9bJ7ClHT?\8V,dsDc1GJ*Y/4n6"T/B%fa]Q-Q-@a^DqkA(?>=r:-:M#MuT&i#<fNZ?eVd-LW9AR
%'AH+t2udYr`)N\[q;9\LgMd'mqAsXnL]1#RKb<n8oWPRE5ULCFQZb2;(]CC>/VIJLqH's!Ue9D6YAu<ncL.pOW'.`W2u<u0OZ===
%qhmY3,kDiLMqXB9@(b0"PU2Tf>O8Ok&6M6Xc2K1%5s+EdY7JsZN%5XFH@C^/rC'`6EP'k1'G(#]Dt[83Ob0UFDY@01[aO!Wr[-;B
%@6PM)]@0Y_oIi#Y<BJZ,`)QV\e%\e*[?(ms/*/e@I-=r%jfHa%s%8_MP.g'd92il!/c&Q%$MD!AEWHatTDQV,.Ogs`g(sRDnmLQD
%(].u>njK<mp6WRA;/Da#[0dBi*qi\3'EPi_rG0Lb7IN><X0?g/Xj-kq73VTR`W+@e,@B6gIhf,(&V87-niMQ->l67W9,cU`YAQGT
%7?%4G^-89;0D\b-T@UiQIq]-"C9tYsc]e+in'(t7hH1&AK2?Pfjnh&X&4r4ZHnRVm67'MU,27)KL581NE=g!m>RsOC&9Xk_=c[ik
%Wgru%#@VbT`P6^="SAAKl!/3>(UE'D^ar:)MM"`>?"JdqJIip<%/4K2PBfWp3tO`j-'!-M+^h7-+'=(*+Ncoi"[_E%D5@sQU%C"c
%l"Bg;X#<@ep<+[(P5?78M;hC6_[:Z#=!?2(*<RI1?$U]r%"rXW.-9oTJb]"CI&mI-R_g'JTmS&M8CE,5,g7`$d0bI*0lHah6.f+I
%llZRJ_W$AQ&;3s,=J_0$"Moe*1@,@"O=mMop(d-@rCn$@:(W)SMsfkr75@715NB[II/H$R1NC&Q*P[1KBM9`'FqB=IdG-Gfb3=O2
%EQ(2q6h9/;JU)7S$Eb3OPX*^::(.8/T`2K2+;Ba:Uc^.3!^nK+Y8@O%4:=,U0bAW,ZJI;I+2:R/H:29-Y8@Nc/Y#Kb#!rW)@m(tH
%!*Xat"@CEWGO5qIjnrWkljsHJ>)?ck#_Z6(GchS`keU<ZNdssg6O=5M!^[SFfc<0V_@"iWij8uIO5KV?"N4[Fek`]H;sbZ6i5d#u
%,MTS-1^GNM0\C:0)ir*+.haVj_`'a0o4(Wo>5`b@MX:kH'@eR^GblMoUk&!]T^tN"VF2ST!aQgN5PtX^[\UGhmnOkd`t,*!oO%MR
%,8A)XA+E-4-^EF+'XC2@NIYNr0'p55n=M`85/j\^`b8f#T46uI:L?<'eo.b+F&gOlI\-Rg@99'81f<i,R.c"`b`i'TMI!uNbu]%<
%c`jJ=qmW2+g*&2Q^'%5-rrK`\qr)n*Z&iH0;*$*Z/ZqpJH)lOBS@:L3%3&"l>1,R=gIA8DO,ii''\NW$Gp+R_o`.i5WtkRK'"m:d
%$5kY8_<ls><==)9J(;3la8JuB3(X`:#!#qj0B:Uobpq!g7,U>f"PH_V?sld>`9bDkWZ9^VJ0S)d1d(GW#T(+HXRjD?F:T"ZR2N\%
%M.&c:`caFsPFHXkH5Xd0p9gqo$er@L^m#B*qQ_u<YFeMUR<BmR:Hn']$4La,S("^cj5I[9Ogp3P8%cl.^(oTJ#BWf/P,juQpoE7X
%2RN2$DFNNs\CU"J/]8:KX$?KTe`5K0O'hQ<5<+&dQS2Fd4Ytab(X&aA_SK2aT^.N*EL%EH><H$[7-UTq#[Ts-SF/JuKbuR/l0#&0
%%@i_"EkcO&]2u&0e+4Zrmqkkn_tQYs8&i0+,58]XNDPppIBs83<)2Kr)016Pi-B.cV+a9$kL#GO1:rp*A]D6O,4SjEatIob,YnU`
%Ps4)'l;*CuUd'0],!SJ!a[[k-19`aG32P08f0ORDjXc)O#+VV[Q\9Z*7'Xu0]7lfNOnKLip*gbO/U-F+!f`Lt#UD`RE'Z"0gZc<P
%D[NV4;rI=F&KROAi@8_1@Yp)%TW:_C;^6,J1[K3>HF:?5bp[e0Wrm>nU8sd2r'7H@MKs$/DViJ"kJjZ"TjQq(`cu"'Q&pF\*L<g(
%Nf`HX:WRr,$LUsJ)P,d>l&$X.kh@IXq`<h2[Ha^aKrPS!<M2)gBJr_D5K[`j$9KXnFh/>*q5d_Zf.'`*roj)D?5Sjo<6CY^ORMI3
%6&5n!Q5!*Aot=^FBG?^rlFV\WGUB`f'U:Mcl/Wb^'5;k6/lP2qQHg$mm+[61jqf2W@\c1Rc:FSTqulT<r4@+2T(efqk$XuH%+aB^
%+'X,(%ADYa)5H0`7b1K@B=)Y;FHCQ_DCc"8-[AnL8+:ubF\o8:SVQo?Y(f,fh%/[c:R3(r2\ItFr-D6!0)/Y"#'2V8f9AU1.bs9W
%GS3TW>Pa0HVO-f2X^?lGW:7EQS`uko*#_%oY`k7#cEJ;"f/(7K!@$AfcE%@(m(l[#NQa>)q51fOC6(`kUhoK23K:^XUNO/ukuMMj
%65\#;Nd6CkA"&)[GO"R+%fn--bLVedDc@4^qj@46B@fF)[MQ)hkPG\t;tn&?,[=<QB6#04akb>C&=>#F62M?gV?js6jX6GMf7/>3
%+b[M$$[U&!c<a*cI*GZS_7$cKWFF$FKjaL=l472mi9fXC>atbj[R<6^6Hu3b2d5_n?aE<.XcVDAD"PpE>`q!t)YP5'i]Y2<-)0&s
%4[ZtS-B;n2[Qhh+,5Q:'cQ"HPGRCkmPX!7%>KnB5".PgJA6SX@B<GBX1bIr7Ddkt3H0RL\Q?sT;U`P30>[D!$QH%@;SK#=C\IWNC
%RkU0pMt'/ZhoT9+2(kb(4B=-f7^jOX7<9>V/?MGs\,#XNZP$<`[kfOZi2Vs^oop8TibLsZC`kq8H[`E.Cjj,k2nbF?jUk,eWTtU*
%WA:Nc[[rY/6SqA,mU7&:1\:IbCos2iN9`O,^Y`-u::@uDFa/bndR1>)p[rCp(l]hu9%&`]@Osr+p?h]%?YjZGS%MS,8-0tCMaX5Y
%$YsHs<[V6=l1j/L]2\9f)T/a.W.=\L.Z<7P[BOSdjEiCs7eN78?>O=Nb%Qb``oO'S&I44`++=m36QN6^&@o]C!T5*:.WfRh9mmT=
%[bF^C6ZB3F*4Pie!n#pUHZl'1.RSMdBZXo>&L]:`YKDdN#_=9tME_X9>VlAr&8ir[_^Jk>"P!Wk@JV]i,o+;gfHQXqQh$.eli?`)
%%a.T7=Y[L-`g4AHV<k]UbSM=-M&%_(797K9DMlC]cu;3JXc*O&2jFh382HStI^ZNH:7N$jJc/RWM(3>'M*]68Q4ij;.u"\M0cEX6
%r`WYYL9mBTOf)2d'dF\kAk^(E+nr*[Wo.(WjEENa[RoSZ]q0Po`i*tiO/Fa0&Z@,4N=r>7[p4O<_S-m'?.tO5bhunQgROD;@)Tln
%Q;h[/PRCF?N2KjDN)`nA82oSSgWRE<*Fjb4E;`Ij-:n5V._ZhG#KSCVW$I/LZL!+!2fg9=AN2X,]@TXga[MG),o.e(c&6Tu7-E;7
%O!Gr2L7Ik"U*,`],VJu(QQFq?r:Q8-Ir,N$$Vd'pYe%L)D_/Jh1qkG>>R_jgNo]R'EpdXQh@>!,G)N^TIo3pjE@_:ej[W_!0!&$T
%kG^YhMqn_ob,KJ+7q04echr)m>,oSfhbcq/7Qe<LC[i\IK7cM_du>2qng6_[lH:dCgC::(L+he1*DYj%AP\UMWO/tK;SqIa;Husp
%g!0-&-%f&bO0$q,rp!_%=SiItfX=%O[HKPiNRYgEjMssXV:S?b5-MT$'Fa-Wj3m;ROhn!NWGGEuHO/4!H2V8JSb7`HR3dZI/j4Zu
%YX>M8Q]4gs:U0TIDkFDW]7dnnjhG0T^+@cAr<,*He]3uYDh4E^8#M98_J77aj9/<gbn_YN>B,=#jNO[Co(>s<+0mJ=>.-ii,or*]
%k:*O59B;=)<Nb;:S4\-b/?qW=4I;"!h\)h5D"Q&?`2PLEod29[VNQr=>*YD#qV>(J4C+gZX^/`)3%rK%:+IMdo3$^)P\lYk.cgr5
%E16`);F6>H--cT4M=]b</W''-l]F.[bU$#Ga-@Dj^BcDEQ/Dq<nodsZk9Y.(@&;Cu7*b+f[`Bn!\erj-3O8m7js+ohT2i:0O3IF)
%lgJC[bE!\sAp&Q+2K*Y;]m7\1pO,+*8o0oXEbF%p\]D7Q0@*^R&Zs&+ACIsl]/GpE4a[HN2AAQBeRh0K.%j*>Ei,&'>E%d>6^=H)
%ge@,n$I4F@6_"ZMf[[%PXXMu&fF_IDbf*X,0jaFOV;L\)P$`J\a749PI@.8)\>db??<?fRq,Im0ocRPj+KC9C?.E>'DVB:lDO!h'
%]Ph66.]ZG+ql[r@;K[5fVoiJErN8?*\UcBWn*8BM\s^nAc<[!+#,14$=._-PGP-Zk],E=1-_]-tI6i<`j)->"eU:NZUT2tfl`S5X
%g?ghJ='tFf]:,>7Q1[<UnKhufK\L2/Z(J)n6I%i5bcbdWG<`PCjh1!7S]tqkn#P04YX^oZobi=%<I\7Pf6Y=[qqQMpG@Balm7->L
%/ZsM?;5Q==rpFsqWt+rSC-:h=>.5G'I&\<<h/3KjZ!J^!2dr^kH#>QgT>Xh!gPsQ<oToB#_o+T.\urNI<44q[Ub/WCIQ*BPRY1S3
%eDhqH]&#>a?#KsPf3@//_j\\bPu$h)*6IdHm:SmC?iGJaD;`"\5"sM@h"I[QQeT@-j[Q3FGj9F`&P,bkG^$bc`Q%'b<;;!W>4$Lf
%T6)\EgkmBYn&qiF-g%tp0Qr5#OXI?)FT)1"(?CC=bY>ohr<Ah7h=?';1[m_-R0fEKa=q'$9u"$Q[gP!!("IlFIL.ZDWPm07!i)=+
%fYD;o$QMBar="RWkOqg3('mCC+Knospd*VR$g%Wo`IJ%a.3oPD,?BZBi0QbiJG5M>JfFT1@jF]sC]m_&RY1g0R>:6u>+os@TIeOo
%%YEaQnHg><k=%aI",%*+fqVheT<$,3)uCsU8Oo&oY4E)BhF6lT9!X1q:E8NiOFoF?D+Tl6=anm%&shbe;)E&bUjKcdL*0^&N9_q\
%fq??][gO>>,H-.(9\1*S=<,Sp$R7Dm).ntdj02N,:M5cP4MRE;h!6?RE,E=^E%l;gEu5IHoNeMtk8k+Vc'WjK?V!)19R7[0Ac9W#
%r!\?(\fu`hN+gUL/&l9:)_']1%LH.jA>lK_$_VS1!$87UdpZ(W1(Z:;K]Z@FJ,HhN7^Sg\$-AL(b5'>DV`%>t;KPiDYak:9oOWW3
%gUfIHJLF!;5=@+]gl?R4#9f"H<R'HSXbjm19%>f>k88aa#Tf"/*m&!pUEGu3F%WgUKb-duDb7%MifVH9X1WdoNC-d-MfBu\C@8fA
%UNQ5;s+?J!Kt+)BjEH\o"YU%tCh'6-*tSV&#*ko]F_onN)r#1;h`dI5bL*D#T$l:N/F)H2Y`Ls^QEY:"lDJG`FLpMQ:7A2ICHEmf
%L0_aRldWk+YKj=a$<:H%q,=8;jb7r8inMY1XWqR>[$QZ?E92.`()5/8R-_#Sa:Lu_cCm9O9":_7C<GO&D2l#?$l8R(`k$.Ghio3\
%ohdolY/sYu;Q)fhn&K\q-7$.."DJRsWP_ZF46E6qB5mT/Kp9hS9=jjHT.="%l`'R6e'^_`IJ4$*d[$/@^09qret3AtfD?QHGF0Cu
%n+]hnkI[Q4^[DE&4>HgmmMYl(>Z>lG&>t2;9Ienmdj2OUbS)O2Ag?HP-5q#:+JH']L,lO[J8<D%mp;A75iq"J3i;k?4KhtF3K=j0
%UopW$kIW",$As=_)^]g1n;ajn833u[D_IE\8]$2)&k^HFoL$?4:(PY4_N$\*-'B\$Dmn>#:::87:Q"sO)Ff2QP\mq3*O7T"qcs1H
%f[m89/aRSJ!>KO[5L$+sou#is[X/0UXC8SLIk[\+'[=U!=l/j3i+g3]46(j1Y"JBaR8D/lFILn(=b?rX]OWi<Qo272O7Tf$aIFmM
%VfoOn9-6?8]0,KsO6@^q3YF2a9K&V[$'&!gqZ*Po)oA]@m$]lnS+1gXhQep8V&Jg#]GS]>dRLCkD/Ar\\$WdGj2_,&e[(Uad%s4=
%lZZe!M$Nl(O2)B5e?b,+AE?AQVo<tR/5^oiq`qrdI%s56Eh4^je#@*%-kPKead2e(77fns%T'g7Se@`N(K#6N`Vk[KdWOHJ5[I-n
%lp@^p7?QtAp)lkK3S:k]U/JS:QX()EA/A\=Q<iu;X$).]Q(6,AfgY!7Edd[][d6CdG.E\d],^2&Qc_MS:SFhe=kPCHePjn)[<D3n
%P5U1+^3c<T`R/$gALl#KH?t\%du@Yh9#HNYIu8)'l[iBg&u(;%$!MC)=i0r,d,L=i]GIq=Y4(\hCFelB[J#IM+nap0poP%R[J"SD
%ZeK;ulQ0<'\/%:q58!hF;hZ]3j')Ej(qs)Go'c"]F-]&%IrkS4QN(&)o<.a^mG6?s4V:8gK$M#qrrT@R^S#@7\=.d5T4?K9)IAp2
%/1IGdBDPd^]B@e'Ju$K\I]0j5^DGBcc@Xd&eLPOfT#TsGePi^PYH9<XETDq-?_Do49-4C<CK;JC@13?kIB^OH,A'?ui9hK4`l<LH
%7D(4JWaePs1:)"N><EPgB29\0[RE+t#eB-LhfZ=]Y4Sk2Y:/5(KiDCmPCA'U]</\A/cA(Hjcb8mfZVEm56NaRkfQDc0Z%XKj_n2/
%H>j=*Ur%7Jb83:N3f>1lS-^G;3`!O-[lEX*+MlZ(cQLc878PdR:o!/>(8r1r2(kQe0'ahpqB!(i.(NdYI\mC!A/Z!RMCeJdSsYGK
%F$dH+bZS^D\lA'n@LuB5`*=dD2"T?Q9_npT*NJ[9D!<KQ>VV>.+Z>;cV5IoQ1qfVQeT+cUoGj$jZCN_<c/E?H,t7`e$]bg<dQ\2,
%bW(XgdQ^ILS\,/V,V%oU'JfH(>t"(6e1jjgoGR=#Yi!?5GEP+)UdE:L-fTuLFe!4(U%]S[/nK6i<cM<M:^fa.:-ioA(+.jh%4J0W
%2csrnJUDq[R9`YNrZq/K.+<QnU.Gu&l@R^5R`m1#47d52#U&j6<O!6\6)iF2rBB;W4RLXQQ@LmB_50o90^0r7llS-$@PV2XqW*!2
%([IMQ861dm0<D]3#WUS,XC6Zdd63+5;]@`!#P/%$D#\P0l&1/;"^U$Nr=&]PH@j<j)h("@_Hj"n_J[;rA:[8s?eL#7'k5_SDe`u>
%?eOD%#)GZbot=0T\f[=bXrdMbW:kp+e\Fq;\QEW%o8=V69N+`bWgOd,`V>'^f<';h))4&"C_7*D:^8c`==#hGZm*1MT';G#hN?<Z
%\Qo8u@7lKU*[V=9N-):aP&*f%*3afArc4`=%A,^"LG4?B\gJ?q?ToQUQBWpZ3[YBsh9r/.;\O5++Du94,g@(bNau[5R4F6GMV=m(
%A[D$o3G-HJVEc##"9O)_,g0$Q[#2Nu#^I!#?pSUs`F&]g,?#8//V<mUC]3YV#'l*Y.g0p?"j(OFqNCOZIRlDu]`P?5FK8/`"\8od
%PWk@`7%/s4DQa&0M<3)4HNc.a<-ETl#)+M:dpb%Ni@erN^gL>BCfi78-\e&>g;97DS\(sT/>/ik;CeI`b$]e8B=ORl_*Y@_=;2MT
%$^-SkrB`DW(2.Wb">5>GFsX$W2<KV$L!i!j4IMWDlS<$;P>b!j/F`%Ka@^:,c0XuA1g$D6EncJf!jbAqaF*H<@WEO/@Ne:2/-Lk5
%l%[R&8:(:1IJ8U(&?X/DPAB8[Z-dT?T+7/-Rr^KWOmES$/'0adgU`Hb3n<-U@_MRU5@>^Mj1k`Lc1QT4X/.,tb%E%T.S@#YhkGQW
%378\.FiW<WZukJ^0t53]%WY5DS7a_6RtjnKToY-IW^DM_-1D\K1;0rXn.MDC8<38hRo00kN-pTlr!clCIl<[Qnn'5fYlUOV1t^>G
%7^.9JUfZ,2Q;<ocIIof.]'(C8<A<Yd3"OVhW#d_Kg>mV#>j&(1/M)"5bW3p<FA)bGW2L!&M&J_V+(a[,^,Dr;Oh,-4$cQ^X'Sfr$
%<_$S@.8+6]Z_l!fKo36PXMYBjcPpH@^d+j_"qkYqoC(sm+Kj7Z3rD]!/`k.bH+QXN,c,CZ]H=PU!33/SU,u@LFEmC[%qcT>/KMGb
%]BT[e0XHkP?j/chFVVH%Uj6O_+91"#[%nBcT1(bC8BFkcaT=ni/JG&K@3nte1SP)?X+8Rm,Xj&%hF6OjX$E^WBiRdE5_NMk8.&CO
%8\`%Uoru149!PB-Q`:<F,?@?8oSGC,84llqO)Y95T/T^2S+fu^ebo.&0KX^-l2/BiG<\j;IsV!43raE7Ie[l,IfB0@Er"gCrq!>:
%p$hO$ro`ioIX=H-o?4VtJ"BuLQhS80?8#+CIsh22aR(?Pr;$0;:Hoiu#94t6ec~>
%AI9_PrivateDataEnd
