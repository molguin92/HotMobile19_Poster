%!PS-Adobe-3.1 EPSF-3.0
%%Title: kth_pms_datavet_komm.eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: oscard
%%CreationDate: 05-02-27
%%BoundingBox: 0 0 369 467
%%HiResBoundingBox: 0 0 368.5044 466.1417
%%CropBox: 0 0 368.5044 466.1417
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (PANTONE 2935 CVU)
%%CMYKCustomColor: 1 0.4700 0 0 (PANTONE 2935 CVU)
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 104 128 8
%%BeginData: 25824 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300D3084070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%A80D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D0730A8070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D2FA92F0D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D07A930
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D2F2FFF7EFF54300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D3007300D3007300D300730A8070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D078484308484070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D07A9300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300DA97EA90D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D84070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D7EA97E0D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D07A8300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007307EFFA8FF7E2F07300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%07300D3007300D3084070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D072F0D2F2FA9A8
%FFA8A9530D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D070D07A80D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D5A7EFFA9FFFFFFA9FFFFFFA9AF7E5A0D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D0730A8070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D077EA8FFA8A95A5A84FFA8
%5A59A9FFFFA87E070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D070D07A93007300D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%2FA95AAFFFFFA85A0D2F07FF7EFF0D300D36A8FFFFA95AA92F3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D3007300D300730
%0D300730A8070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D075A84A9FFFF7EA9A80D070D0730A9A9FF3007
%0D070DA8A984FFFFA9A85A070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D070D07A9300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D2F85A8FFA8A9
%A9FFFF5A070D07305AA907A95A0D0730075AFFFFFFA9A9FFA8842F300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730
%0D0D84070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D0784A8FF5A0D597E5AFF070D070D075AA85AA87E070D07
%0D0DFF537E590D5AFFA884070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D070D07A8300D3007300D3007300D300730
%0D3007300D3007300D3007300D3007300D3007302FA9A9FF5A2F075AFFFF
%AF300D3007307EAF2FFF7E2F07300D30FFFFFF3607305AFFA9A92F300730
%0D3007300D3007300D3007300D3007300D3007300D3007300D3007300D30
%84070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D07847EA87E0D070D5A7E2FA92F0D070D07A97E0D5A84070D070D2F
%A92F7E5A0D070D7EA87E84070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D070D07A80D07300D0D07300D0D07300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D5AFFA93007300DA92F30AF5A
%07300D0D5AFFFFFF5A2F0D0D077EAF2F2FA9070D0730A9FF5A300D0D0730
%0D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730A807
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D07
%0D53847EA9070D070D2F84FFFF7E2F070D2F84A8A8A8842F0D072F84FFFF
%840D0D070D07A97E84530D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D070D07A93007300D3007300D3007300D3007300D30
%07300D3007300D3007300D3007300DA92F307E2F07300D3084FF5AFFFF85
%0DA9FFA90784FFFF0D84FFFF5AFF84300D30073084302FA90D3007300D30
%07300D3007300D3007300D3007300D3007300D3007300D300730A8070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D070D2F
%FFA9FF2F30070D84FF7E0D84FFA80D84FFA984A9FF840DA9FF840D7EFF7E
%0D0D302FFFAFFF2F0D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D070D07A9300D0D07300D0D07300D0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07307EFFA9FFFFA907A9FFFFA8AFA95A2F36
%5A7EAF7E5A302F5AA9A9A8FFFFA907A9FFFFA9FF7E0D07300D0D07300D0D
%07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D84070D070D07
%0D070D070D070D070D070D070D070D070D070D070D070D070D070D07305A
%0D84FFAF0D077E2FA97E3053FFA85AA8FF845AA8FF533084A92F7E070DA8
%FF840D5A30070D070D070D070D070D070D070D070D070D070D070D070D07
%0D070D070D070D07A8300D3007300D3007300D3007300D3007300D300730
%0D300D300D5A0D300D302F302FA95AFF845A54A95A85FFFFA8A95A7E5A7E
%5A7E5A7E5AA9A8FFFF855AA92F5A84AF5AA92F2F0D360D300D5A0D300D30
%0D3007300D3007300D3007300D3007300D3007300D3084070D070D070D07
%0D070D070D070D070D070D070D070D070D07A9A8840784A8AF530D2F7EA8
%5A5AFFFFA95A542FFD045A847E7E7E845A5A535A2F5A5AA9FFFF537EA97E
%2F0D53AFA87E0784A8A9070D070D070D070D070D070D070D070D070D070D
%070D070D07A80D07300D0D07300D0D07300D0D07300D0D07300D0D073007
%7E8430A884A8302FFF0D30075AA8AF5A302F7EA85A54FD05FF5AFD05FF5A
%7EA8842F5A5AA9A85A070D0DFF2F0DA885A80D7E84070D07300D0D07300D
%0D07300D0D07300D0D07300D0D0730A8070D070D070D070D070D070D070D
%070D070D070D070D070D5A7E07A8A85A2F0DA85A070D070D2F7EA8FFFFFF
%FD045A2F542F7E2F302F5A5A5A59FFFFFFA8842F0D070D0730A80D2F5AA8
%84077E5A0D070D070D070D070D070D070D070D070D070D070D070D07A930
%07300D3007300D3007300D3007300D3007300D30075A848484300D7E7E84
%84AF0D300D3007A9A8FFA87E2F5A545A5A7E7E857E847E845A5A535A2F5A
%84FFA8A907300D300DFFFD047E0D2F84857E3607300D3007300D3007300D
%3007300D3007300D300730A8070D070D070D070D070D070D070D070D070D
%070D070D84A9AF7E07845A84A87E0D0D070D070D2F842F30598484845A5A
%2F302F5A2F302F5A5A847E845A302F842F0D070D070D077EA8845A84077E
%FFA9840D070D070D070D070D070D070D070D070D070D070D07A9300D0D07
%300D0D07300D0D07300D0D07300D0D07302FAF07302FA95A2F5AAF5A300D
%0D07300D0D0785847E2F300D0D07300D0D07300D0D0730072F2F7E848407
%300D0D07300D0D5AFF5A2F5AAF2F3007AF2F0D07300D0D07300D0D07300D
%0D07300D0D07300D0D84070D070D070D070D070D070D070D070D070D070D
%070DA82F07AF5A30592F07FF2F0D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D2FFF072F5A3053AF072F
%A80D070D070D070D070D070D070D070D070D070D070D07A8300D3007300D
%3007300D3007300D300730305A073084FF5AFF5A30FFFFA8AF7E300D3007
%300D3007300D3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D307EAFA8FFFF3054FF5AFF8430075A303007300D3007300D3007
%300D3007300D3084070D070D070D070D070D070D070D070D2FA9A8302FAF
%2FA97E30077E842F2F0D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D2F0D7E8407307EA90DA9
%2F30A8A92F0D070D070D070D070D070D070D070D07A80D07300D0D07300D
%0D07300D0D0730075A5A30A93084FF7E84A9AFA85A07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D075AA8A9A9847EAF8430A8305A5A070D07300D0D07300D0D07
%300D0D0730A8070D070D070D070D070D070D070D070D2FFF5AFF595AFF84
%A85A072F070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D072F075AA884FF5A2FFF
%5AAF2F0D070D070D070D070D070D070D070D07A93007300D3007300D3007
%300D3007300D36FFFFFF5A07305A5A07300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D30075A5A300736AFFFFF5A0D3007300D3007300D3007300D
%300730A8070D070D070D070D070D070D070D070D072F2F7E072F84A97E5A
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D075A5AA9A82F077E2F2F
%070D070D070D070D070D070D070D070D07A9300D0D07300D0D07300D0D07
%300D0D07302F7E2F30A9FF5A5AA95A07300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D075AA9365AFFA9302F7E2F0D07300D0D07300D0D07300D0D07300D
%0D84070D070D070D070D070D070D070D070D2FAF5AA9595AA9A859A92F0D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D0DA95AA8A85A5AA95AFF2F0D
%070D070D070D070D070D070D070D07A8300D3007300D3007300D300D302F
%840DA95A2F0DFF2F84847E2F3007300D3007300D300D300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D300D300D2F07300D
%2F07300D7E84852FAF0D305A850D852F2F0D300D3007300D3007300D3084
%070D070D070D070D070D070D07A9A8A9847E5330A830070D070D070D2F36
%2F2F2F5A2F0D0D302F302F30072F2F302F302F302F302F5A2F300D0D0730
%2F302F2F2F5A0D0D0D5A2F2F2F302F2F070D070D0730A8302F7E84A8A8A9
%0D0D070D070D070D070D070D07A80D07300D0D07300D0D0730075AA82F84
%AF7EA9A95A07300D0D07300D5A84FFFFFF7E360730A8FFFF842F305AFFFF
%A97E84A8FF84847EFFFFFF0D305AA9FFFFFFA95A300D305AAFFFFFFF842F
%0D07300D0D075AA9A97EFF840DA85A070D07300D0D07300D0D0730A8070D
%070D070D070D070D070D2FFF2F0D0D847EFF7E7E070D070D070D070DA8FF
%7E0D070D07A9A830070D077EFF30070D0784FF30070D0784FF2F070D07A9
%FF84070D070D070D07FFFF5A070D070D070D077E7EFF7E84070D2FFF2F0D
%070D070D070D070D070D07A93007300D3007300D3007300D2F5AFF0D5A7E
%302F5AA9360D3007300D3007A9FF5A07300784A8300D3007307E7E07300D
%2F84FF302F07300DA92F300D2F7EFF5A2F07300D300730A8FF2F300D3007
%300D30A95A2F2F7E5A0DFF5A300D3007300D3007300D300730A8070D070D
%070D070D070D070D5AA8FF5A7E5A0D5A5AA9070D070D070D070D7EFF530D
%077EA80D070D070D075A0D0D070D0784FF5A070D070D2F2F070D077EFF7E
%070D070D070D07A9FF30070D070D070D07A95A5A0D307E5AFFA8530D070D
%070D070D070D070D07A9300D0D07300D0D07300D0D0DFF5A5A2FA954FF84
%842F0D07300D0D07300DA9FF5A075A8430070D07300D0D07300D0D073084
%FF2F300D0D07300D0D07307EFF5A300D0D07300D0D84FF2F0D07300D0D07
%302F8484FF5AA92F5A5AAF0D300D0D07300D0D07300D0D84070D070D070D
%070D070D070D845A075A5A2F7EA9070D070D070D070D070D7EFF2F5AA80D
%070D070D070D070D070D070D07A8FF54070D070D070D070D077EFF5A070D
%070D070D07A8FF30070D070D070D070D07A97E2F5A7E075AA80D070D070D
%070D070D070D07A8300D3007300D3007300D300736A95A845A0D5AA95A0D
%3007300D3007300DA9FFA9FFFF2F300D3007300D3007300D30073084FF2F
%300D3007300D3007307EFFA9A9A8A9A8A9A8A9FFFF2F2F07300D3007300D
%36A95A0D5A845AA93607300D3007300D3007300D3084070D070D070D070D
%070D070D07A984847EAF845A070D070D070D070D070D7EFF5AA9FFFF0D0D
%070D070D070D070D070D07A9FF54070D070D070D070D0784FF842F5A2F5A
%2F5A2FA9FF30070D070D070D070D075A84AF7E8484A90D0D070D070D070D
%070D070D07A80D07300D0D07300D0D0730075AA95A847EA930070D07300D
%0D07300D0D07A9FF5A07FFFFFF0D300D0D07300D0D07300D0D84FF2F0D07
%300D0D07300D0D7EFF5A0D0730070D0730A8FF2F300D0D07300D0D073007
%30FF7E845AA97E070D07300D0D07300D0D0730A8070D070D070D070D070D
%2F300784A8FFA8A9070D070D070D070D070D070D7EFF53070DFFFFA9070D
%070D070D070D070D0784FF5A070D070D070D070D077EFF7E070D070D070D
%07A9FF2F070D070D070D070D070D07A8A8FFA87E07302F0D070D070D070D
%070D07A93007300D3007300D2F54FFA8850D5A7E5A2F7E5A3007300D3007
%300D3007A9FF5A07302FFFFFAF0D2F0D300D3007300D2F84FF302F07300D
%3007300D2F7EFF5A2F07300D300730A8FF2F300D3007300D3007305A7E2F
%5A7E5A2FA9A8AF5A300D3007300D300730A8070D070D070D070D075A7E2F
%FFA8070D84FF2FA95A0D070D070D070D070D7EFF530D070D2FFFFFA9070D
%070D070D070D07A9FF5A070D070D070D070D077EFF7E070D070D070D07A9
%FF30070D070D070D070D2FA953FF840D07A8FF2F7E5A070D070D070D070D
%07A9300D0D07300D0D07300DA9A9AFA90D2FFF845AA85A0D0D07300D0D07
%300DFFFFA90D0D07302FFFFFAF2F0D07300D0D075AFFFF8430070D07300D
%0D0730A9FF8430070D07300730FFFF7E0D07300D0D07300D30A85A84FF2F
%30A9A9A8A90D0D07300D0D07300D0D84070D070D070D070D070D2FAF7E5A
%075484FFFF5A070D070D070D072F59A9FFFFA8A95A2F070D2FA8FFFF5A2F
%070D2F7EA8FFA9FF7E7E0D0D070D075A84FFA9FF847E0D0D2F7EA8FFA8FF
%7E5A070D070D070D075AFFFF845A075A84A92F0D070D070D070D070D07A8
%300D3007300D3007300D300D305AA97E5A5A5A07300D3007300D300D362F
%300D302F300D300D2F0730545A0D300D302F300D300D302F3007300D302F
%300D300D302F3007302F300D300D302F300D3007300D30075A5A5A7EA95A
%300D300D3007300D3007300D3084070D070D070D070D070D070D2FAF2F5A
%A82F070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D072FA85A2FAF5A0D070D070D070D070D070D07A80D07
%300D0D07300D0D0730077E5A300DA92F2F0D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D2FA90D0D5A8407
%0D07300D0D07300D0D0730A8070D070D070D070D070D070D2FA82F7E7E5A
%5A30070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D072F7E5A7E7E53A82F0D070D070D070D070D070D07A93007300D
%3007300D30075AA9A9A8855AFFA8A9843007300D3007300D362F300D5A0D
%305A5A2F30305A2F7E2F302F5A5A300D5A2F302F300D305A5A0D302F300D
%5A0D300D5A0D300D5A54360D3007300D30073084A9A8FF7E84A8A9A95A07
%300D3007300D300730A8070D070D070D070D070D845A5A7E2F7E2F0D2FFF
%0D0D070D070D070D5AFF0730A92F5AFF5A5A075AA8FF7E305AFF5A7E0730
%FFAF07A92F0DA8A9A97E07AF2FA9840D077EFF5A0730FFA9A85A070D070D
%070D07FF2F0D2F7E537E595AA80D070D070D070D070D07A9300D0D07300D
%0D073007A95A2F0736842F5AAF2F300D0D07300D0D0730FF5A5AA9077EA9
%5A300D075AA90D077EAF7E2F302FFFA95AA85A0DFF7E5A2F30A9FFA83007
%2FA8AF840D2FFF54FF5A2F0D0D07300D0D2FFF5A0D845A070D5AA90D0D07
%300D0D07300D0D84070D070D070D070D070D0DA9845A2F842FFFA830070D
%070D070D070D07A884A92F0D5AFF7E5A070D53AF070D53FF7E5A0730A85A
%A8AF2F0D2F84A87E07A9FFA9070D2FFF5AFF072FA8A97E2F070D070D070D
%072F84FF2F842F5A84A90D0D070D070D070D070D07A8300D3007300D3007
%300D300784FF5A7E5A5A85A9300D3007300D30073030FFA9300784AF5A30
%30077EFF300784FF5A2F3030FF0DFFFF5A2FFF30AFA830AF7EA8A907A9A9
%85FF7E2FFF2F2F07300D3007300D30A9A95A5A7E5AFF7E07300D3007300D
%3007300D3084070D070D070D070D070D0730A87E07A82F0D5AA9070D070D
%070D070D070D7E5A070D2F847E840D0D2F7E070D2F847E7E07307E0D2FA9
%2F0D5AA97E2F077E2F2F7E305A2F075A5A2F5A2F070D070D070D070D07A9
%5A0D53A8077EA830070D070D070D070D070D07A80D07300D0D07300D0D07
%302FFF0D2F5A845AFF0D0D07300D0D07300D0D07300D0D0730070D07300D
%0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07302FFF5A845A0D0DFF2F0D07300D0D07300D
%0D0730A8070D070D070D070D070D070D59A97E7E8484A830070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D0730A87E
%7E7E84AF590D070D070D070D070D070D07A93007300D3007300D3007300D
%2F0DAF7E855AFF5A307E5A0D3007300D300D7E7E3007302F845A300D5A2F
%305A3007300D362F305A5A075A7E7E0D302F7E0D305A30075A7E5A075A7E
%5A5A5A0D3007300D367E365AAF5AA97EA907300D3007300D3007300D3007
%30A8070D070D070D070D070D070D070D84A9A8FF5A5A847E7E0D070D070D
%07A9A884A93007AF84A9A80D848407FF5A0D070D5AA859FF0D30A984A884
%077EFF7E2FFF0D5AFFA9AF300D84FFA82F0D070D070D7E7E845A5AFFA8A9
%840D070D070D070D070D070D070D07A9300D0D07300D0D07300D0D073007
%2F5A7E7E30FF842F8507300D0D075AFF3007AF7E30FF300D5A0785A97EFF
%5A070D077EFFFF2F2F84AF0736FF305AAFA85AA8305AFF7E5A0D0D07FF2F
%0D07300D0D07852F7EFF307E7E5A30070D07300D0D07300D0D07300D0D84
%070D070D070D070D070D070D075A5A5A2F0D2FFFA8FF5A0D070D070D2FFF
%0D07847E2FFF070D0D0D7EAF5AFF2F0D070D59FFFF5A07A8A8070DFF0D5A
%5A7EA8A9072F5384A85A072FA830070D070D070D53FFA8FF2F0D2F5A535A
%070D070D070D070D070D070D07A8300D3007300D3007300D30075AA85AA9
%FF2F307EA9A83607300D300730A9A95AFF3030A9A9A8FF07A9842FA97E07
%300785A85AFF3630FF5AA9A82F7EA90DFFFF305AFF54FF5A2F2FFF302F07
%300D300730848584302FFFA95AA85A07300D3007300D3007300D3084070D
%070D070D070D070D070D2FA92F7EA8A9075A7E5A070D070D070D07307E84
%2F0D072F7E842F0D2F5A075A2F0D070D2F5A075A2F0D2F845A3007542F0D
%537E072F5A84530D072F5930070D070D070D075A7E5A07A9A97E2FA92F0D
%070D070D070D070D070D07A80D07300D0D07300D0D07300D0D2FAFFFA90D
%A9A87EA85A0D5A2F300D0D0730070D07300D0D07300D0D0730070D07300D
%0D0730070D0730070D0730070D0730070D0730070D07300D0D07300D0D0D
%7E0D5AA87EA8A907A9FFA92F300D0D07300D0D07300D0D0730A8070D070D
%070D070D070D070D070D075A072FA80D075A5A84A8A9070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D0DA9A8845A7E070DA82F075A070D070D070D
%070D070D070D070D07A93007300D3007300D3007300D300D300D2F0DFF30
%5A5AFFA930845A0D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D3007300D5AA830A9
%FF5A7E30FF2F300D300D300D3007300D3007300D300730A8070D070D070D
%070D070D070D070D070D070D2FA97EA853302FA9070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D0DA90D3059847EA92F0D070D070D070D070D070D
%070D070D070D07A9300D0D07300D0D07300D0D07300D0D07300D5A84FF5A
%840784FFA95A300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D5AAFFF8407855A
%FF845A0D0D07300D0D07300D0D07300D0D07300D0D84070D070D070D070D
%070D070D070D070D075AA85A2F0D7E7E2FA953A9070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D0DA92FA92F7E7E0D2F5AA85A070D070D070D070D070D070D
%070D070D07A8300D3007300D3007300D3007300D3007305AFF0D302F30A8
%7E0730A8300D302F300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007300D302F300D30A830077EA8302F3007
%AF5A2F07300D3007300D3007300D3007300D3084070D070D070D070D070D
%070D070D070D070D5AAF84A9842FA85A2FFF5A0D5AFF7E0D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%7EAF5A0D5AFF2F5AA82F7EA9A8AF5A0D070D070D070D070D070D070D070D
%070D07A80D07300D0D07300D0D07300D0D07300D0D07300D3084A90730A8
%845AFF2FA90DA92F300D0D07300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D2FA90DA92FFF5A84A830078484300D0D07
%300D0D07300D0D07300D0D07300D0D0730A8070D070D070D070D070D070D
%070D070D070D070D07A95A5A5A7E847E7E5AA85AA85A070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D075AA85A
%A85A7E7EA87E5A5A5AA9070D070D070D070D070D070D070D070D070D070D
%07A93007300D3007300D3007300D3007300D3007300D300D858485A95AFF
%A92FFFA9FF54300D300D300D3007300D3007300D3007300D3007300D3007
%300D3007300D300D300D2F2FFFA9FF2FA9FF5AA8A984840D300D3007300D
%3007300D3007300D3007300D300730A8070D070D070D070D070D070D070D
%070D070D070D070D070D0784A85A2F0D53A92F300D0D5AFFA830070D070D
%070D070D070D070D070D070D070D070D070D0730A8FF5A0D0D302FA95A0D
%2F5AA8A8070D070D070D070D070D070D070D070D070D070D070D070D07A9
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D2F842F
%2F0DA9A8FF2FA9547E7E300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D7E8454A92FFFA8A90D302F7E2F300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D84070D070D070D070D070D070D070D070D
%070D070D070D070D072F7EFFA8FF2F7E7E0D2FFFA8302FA87EFF2F0D0730
%070D2F0D070D070D2F0D07300D0D2FFF7EA82F30A9FF2F0D7E7E2FFFA9FF
%7E2F070D070D070D070D070D070D070D070D070D070D070D070D07A8300D
%3007300D3007300D3007300D3007300D3007300D30073084840DA9A930A8
%5A072F5A840730FFAF5AA907305AA95A7EA85A075AA95A5AAF5A3007AF5A
%A9FF36077E5A30075AA830A9A90D84842F07300D3007300D3007300D3007
%300D3007300D3007300D3084070D070D070D070D070D070D070D070D070D
%070D070D070D075A8484FF84075AA884FD045A0D540D0DA8A87E0D2FAF2F
%30847EA8302FA92F0D7EA9A80D0D5A07FD045A84A85A0784FF847E5A070D
%070D070D070D070D070D070D070D070D070D070D070D07A80D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07302F300D300D5A5AFF84
%305AA97E5A0D847EA9542F2FFF0D5AFF5A0DFF2F2F5AA97E840D5A7EA95A
%3084AF5A5A0D0D0D362F3007300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D0730A8070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D075AA85A070D2F5A7EA87E7EA884070D2FA9845A
%84A92F0D0784A87E7EA97E5A2F0D075AA85A070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D07A93007300D3007300D
%3007300D3007300D3007300D3007300D3007300D3007300D30FF5A075AA9
%FF2F2F2FA95AFFA8A92F30A9FF2FFFFF302FA9A8FF5AA9532F2FFFFF5A07
%5AFF300D3007300D3007300D3007300D3007300D3007300D3007300D3007
%300D300730A8070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D075AA8A9A85AA8302FA9A884840D0730A85A2FFF535A
%A830072F8484A9FF2F30A85AA8AFA85A070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D07A9300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D07300D0D07300D0D073007302F300DA9A8
%FF2F307E300730A87E2FA9A8A92F7EA8360730845A2FFFA8A90D2F2F3007
%0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D84070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D072F070D070D075A7E5A2F842F0D2F842F5A
%7E5A070D070D072F070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D07A8300D3007300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D2F07300D3007300D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D3007300D3007300D
%3084070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D07A80D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D
%0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07
%300D0D07300D0D07300D0D07300D0D07300D0D07300D0D07300D0D0730A8
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D070D070D070D070D070D070D070D070D070D
%070D070D070D070D070D070D07A93007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007300D3007300D3007300D3007300D3007
%300D3007300D3007300D3007300D3007300D3007300D3007300D3007300D
%3007300D3007300D3007300D3007300D3007300D3007300D300730A884A8
%84A984A884A984A884A984A884A984A884A984A884A984A884A984A884A9
%84A884A984A884A984A884A984A884A984A884A984A884A984A884A984A8
%84A984A884A984A884A984A884A984A884A984A884A984A884A984A884A9
%84A884A984A884A984A87EFDFCFFFDFCFFFDFCFFFDFCFFFD24FF7D7DFFA8
%52A8A852527D527DFFA852FFFF7D7DFD05FF7D7D527DA8FD33FFA87DA8FD
%15FFF8F8A8F8F8A8A8F8F8F82727FF27F8A8FFF827FD04FFA8F8F827F8F8
%7DFD07FFA8527DFD13FF7D27A8FFFFFFA8FD0BFFA8FFFF7DF87DFD15FF27
%27F8F8A8FFFFFF52F8A8FFFF52F87D7DF827FD05FFF827FFA8F827FFFF52
%2727A8FF27F827A8FF525227A8FF5227FF5252FFA8272752FF7DF8F827FF
%FF522727FFFF7D272727A8FFA8272752FF7DF87DA827A8FF7D272752FF7D
%27272752FD07FF27F8F8F8FD04FF7DF8A8FFFF52FD04F827FD04FFA8F827
%FFFF27F8FF7DF827F827FF52F827FFA827F8F8F8FF52F87DF827FFF8F827
%F87DFFF8F852FF27F827F852FF27F852F827FF27F8F827A8A8F827F852FF
%FF2727F8F8A87DF85252F87DFD06FF272752F852FFFFFF52F8A8FFFF52F8
%FFA82727FD05FFF827FFA8F827FF7DF852F852FFFFF8A8FFA8F852F827FF
%FFF827F8A8FFF8F852277DFF7DF8FFFF27F852277DFF52F8FFF852FFA827
%27F8FFA8F8F8F87DFFA8272727F8FF7DF8A8FFF87DFD06FF27F8FF27F87D
%FFFF52F8A8FFFF52F8A8FFF827FD04FFA8FD05F87DFF27F827F827FFA8F8
%F8FF7DF827F8F8FFFF52F827FFFF27F827F87DFF52F827FF52F827F852FF
%27F8A8F827FF52F8F8F8A8A8F87D27F8A8A8F827F8F8A87DF827F8F8A8FD
%06FF7DA8FFFF52A8FFFFA87DA8FFFFA87DFFFFA87DFD05FFFD047DA8FFFF
%FF527D7DA8FFFF7D52A8FF7D7D7DA8FFFFA87DA8FFFFFF52527DFFFFFF52
%7DFFFF7D527DFFFFA87DFF7DA8FFFF527DA8FFA87DA8FF52A8FF7D52A87D
%FF7DF8527DA8FD63FF7DF8A8FDE4FF5227FD08FF2727FD29FF277DFF5227
%FD0BFFA8FFFFA8F87DFD12FFA87DA8FFFFFFA87DA8FFFF27F87DA8A8FD05
%FFF827FFA8A8FFFFA87DA8FFFFFD04A8FFA87DFFFFFFA8A8A8FF7DA8FFFF
%A8A8FFA8A8FFFD05A8FFA87D7DFF27F8A8FF7DFFFFA87DA8FFFF7DF852FF
%A87DA8FFFFA87DA8FFFFA8A87DA8A8FD05FFA8F827F87DFFA8F827F852FF
%52F827F852FD05FF27277DF87DFF7DF827F87DFF7DF827F852F8F852FF52
%F8F8F82727F87DFF7DF8FF2727FF7DF827F827FFFFF87DFF52F87DF852FF
%A8F827F87DA827F827A8FFF87DFF7DF827F87DFF52F827F852FD05FFF8F8
%FF27F8FF52F8A8A87DFF27F87DF8F8FD05FFF8F8F852FFFFF827FF27F8FF
%52F87D27F8A8F827FF52F8A8F8277DF827FF52F8FF27F8FF52F87D52F8A8
%A8F852FF27F8F8F8A8FF7D2727F852FF7DF87DFF7DF87DFFF827FF27F8FF
%27F87D27F8FD05FF27F8FF27F8FF7DF8A8527DFF52F8FF2727FD05FF2727
%27F8A8FF27F8FF2727FF7DF8FF2727FF2727FF52F8A82727FFF852FF52F8
%7DF827FF7DF8A852F8A8FFF852FF52F852F87DFF52F87DF852FFA8F87DFF
%A8F87DFF27F8FFF827FF52F8FF2727FD05FFA827F8F87DFFA827F8F87DFF
%27F8A827F8FD05FFF852A8F8F8FF7DF8F8F87DFF52F8A827F8FFF827FF52
%F8A82727A8F827FF7DFD04F8FF52F87D52F8FFA8F852FF27F8A827F8FF52
%F8F8F827FFA8F8F8A8A8F852FF7DF8F8F87DFF27F8A827F8FFFFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: kth_pms_datavet_komm.eps 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-01-31T16:14:18Z</xap:CreateDate>
  <xap:ModifyDate>2005-02-27T21:46:11Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>204</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADMAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5nndvGuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxVNNP8r+YtR0y61Sx06e406y5fWrqNCY04Lzap/yV3PgMqnnhGQiTRLZHDOQMgNg&#xA;leWtbsVdirsVdirsVdirsVdirsVdirsVes/+u4/9vb/jbNT/AMjP812n/IT4vJs2zq3Yq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq978nJqOqaF5X1TTYL6zsNMS6hubW3tLaRJXt7ECWZGaFi/1tv3fxk/FUDc&#xA;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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -466.142 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 466.142 li
368.505 466.142 li
368.505 0 li
clp
[1 0 0 1 0 0 ] concat
368.505 368.504 mo
0 368.504 li
0 0 li
368.505 0 li
368.505 368.504 li
false sop
/0 
<<
/Name (PANTONE 2935 CVU)
/0 
[/DeviceCMYK] add_csa
/CSA /0 
/TintMethod /Subtractive
/TintProc null
/MappedCSA null
/NComponents 4 
/Components [ 1 0.47 0 0 ] 
>>
add_csd
1 /0 get_csd
sepcs
1 sep
f
149.381 152.536 mo
149.381 153.663 li
140.801 154.567 134.686 161.67 129.12 167.461 cv
122.706 174.022 li
138.145 191.208 li
145.422 198.645 148.473 202.659 154.598 202.926 cv
154.579 204.077 li
141.967 205.616 138.86 202.295 131.788 194.545 cv
116.438 177.844 li
128.141 165.356 li
136.042 156.477 134.934 154.19 129.893 153.663 cv
129.893 152.536 li
149.381 152.536 li
cp
115.391 191.407 mo
115.618 199.157 115.692 201.415 125.399 202.618 cv
125.399 203.747 li
99.4415 203.747 li
99.4415 202.618 li
108.469 201.415 108.545 199.157 108.77 191.407 cv
108.77 164.922 li
108.545 157.172 108.469 154.917 99.4415 153.711 cv
99.4415 152.584 li
123.368 152.584 li
123.368 153.711 li
115.692 154.917 115.618 157.172 115.391 164.922 cv
115.391 191.407 li
0 0 0 0 cmyk
f
202.98 152.504 mo
203.878 166.321 li
202.823 166.547 li
200.192 157.217 196.054 154.84 187.403 154.84 cv
182.887 154.84 li
182.887 189.602 li
182.887 198.93 183.338 201.415 193.419 202.618 cv
193.419 203.747 li
165.735 203.747 li
165.735 202.618 li
175.815 201.415 176.266 198.93 176.266 189.602 cv
176.266 154.84 li
171.752 154.84 li
163.1 154.84 158.961 157.217 156.329 166.547 cv
155.276 166.321 li
156.15 152.504 li
202.98 152.504 li
f
226.384 191.407 mo
226.384 199.684 226.534 201.188 236.392 202.618 cv
236.392 203.747 li
210.435 203.747 li
210.435 202.618 li
219.462 201.415 219.538 199.157 219.763 191.407 cv
219.763 164.922 li
219.538 157.172 219.462 154.917 210.435 153.711 cv
210.435 152.584 li
236.392 152.584 li
236.392 153.711 li
226.534 155.143 226.384 156.647 226.384 164.922 cv
226.384 175.833 li
254.583 175.833 li
254.583 164.922 li
254.583 156.647 254.433 155.143 244.575 153.711 cv
244.575 152.584 li
270.534 152.584 li
270.534 153.711 li
261.505 154.917 261.431 157.172 261.204 164.922 cv
261.204 191.407 li
261.431 199.157 261.505 201.415 270.534 202.618 cv
270.534 203.747 li
244.575 203.747 li
244.575 202.618 li
254.433 201.188 254.583 199.684 254.583 191.407 cv
254.583 178.993 li
226.384 178.993 li
226.384 191.407 li
f
158.293 320.895 mo
158.293 320.895 163.194 320.846 167.944 325.596 cv
172.695 330.346 181.554 340.889 184.595 343.997 cv
191.343 350.897 196.294 347.997 196.294 347.997 cv
196.294 347.997 191.694 347.698 187.747 343.747 cv
183.845 339.846 172.945 327.196 169.794 324.045 cv
163.894 318.145 158.293 320.895 158.293 320.895 cv
f
169.119 320.895 mo
169.119 320.895 174.019 320.846 178.77 325.596 cv
183.52 330.346 192.378 340.889 195.419 343.997 cv
202.171 350.897 207.12 347.997 207.12 347.997 cv
207.12 347.997 202.519 347.698 198.569 343.747 cv
194.669 339.846 183.77 327.196 180.62 324.045 cv
174.719 318.145 169.119 320.895 169.119 320.895 cv
f
209.696 320.895 mo
209.696 320.895 204.796 320.846 200.044 325.596 cv
195.294 330.346 186.436 340.889 183.395 343.997 cv
176.644 350.897 171.694 347.997 171.694 347.997 cv
171.694 347.997 176.294 347.698 180.245 343.747 cv
184.145 339.846 195.044 327.196 198.194 324.045 cv
204.095 318.145 209.696 320.895 209.696 320.895 cv
f
198.87 320.895 mo
198.87 320.895 193.968 320.846 189.219 325.596 cv
184.47 330.346 175.611 340.889 172.569 343.997 cv
165.819 350.897 160.869 347.997 160.869 347.997 cv
160.869 347.997 165.469 347.698 169.419 343.747 cv
173.32 339.846 184.22 327.196 187.372 324.045 cv
193.269 318.145 198.87 320.895 198.87 320.895 cv
f
2.5562 lw
1 lc
0 lj
4 ml
[] 0 dsh
true sadj
224.101 111.591 mo
211.472 106.912 198.14 104.537 184.473 104.537 cv
183.581 104.537 li
169.913 104.537 156.581 106.912 143.952 111.591 cv
@
101.75 221.566 mo
105.762 221.566 li
110.223 235.067 li
110.269 235.067 li
114.755 221.566 li
118.385 221.566 li
112.075 238.698 li
108.064 238.698 li
101.75 221.566 li
f
123.574 221.566 mo
135.057 221.566 li
135.057 224.417 li
127.252 224.417 li
127.252 228.424 li
134.56 228.424 li
134.56 231.272 li
127.252 231.272 li
127.252 235.85 li
135.32 235.85 li
135.32 238.698 li
123.574 238.698 li
123.574 221.566 li
f
140.483 221.566 mo
154.363 221.566 li
154.363 224.417 li
149.262 224.417 li
149.262 238.698 li
145.584 238.698 li
145.584 224.417 li
140.483 224.417 li
140.483 221.566 li
f
159.572 221.566 mo
171.054 221.566 li
171.054 224.417 li
163.249 224.417 li
163.249 228.424 li
170.557 228.424 li
170.557 231.272 li
163.249 231.272 li
163.249 235.85 li
171.315 235.85 li
171.315 238.698 li
159.572 238.698 li
159.572 221.566 li
f
188.494 238.698 mo
181.733 224.461 li
181.687 224.506 li
181.687 238.698 li
178.246 238.698 li
178.246 221.566 li
183.703 221.566 li
190.225 235.042 li
190.272 234.995 li
190.272 221.566 li
193.712 221.566 li
193.712 238.698 li
188.494 238.698 li
f
209.233 226.452 mo
209.091 224.721 208.163 223.868 206.388 223.868 cv
205.034 223.868 203.659 224.581 203.659 226.077 cv
203.659 227.924 205.319 228.139 206.79 228.495 cv
209.397 229.159 213.245 229.893 213.245 233.334 cv
213.245 237.581 209.542 239.049 205.862 239.049 cv
201.952 239.049 199.171 237.534 199.294 233.217 cv
203.038 233.217 li
202.901 235.116 203.991 236.393 205.913 236.393 cv
207.382 236.393 209.327 235.946 209.327 234.116 cv
209.327 232.1 206.886 231.959 205.417 231.581 cv
203.019 230.983 199.741 229.893 199.741 226.858 cv
199.741 222.944 203.349 221.211 206.862 221.211 cv
210.183 221.211 212.769 223.014 212.769 226.452 cv
209.233 226.452 li
f
222.487 228.971 mo
222.534 228.971 li
228.23 221.566 li
232.526 221.566 li
226.235 229.231 li
233.073 238.698 li
228.491 238.698 li
222.534 229.967 li
222.487 229.967 li
222.487 238.698 li
218.81 238.698 li
218.81 221.566 li
222.487 221.566 li
222.487 228.971 li
f
246.659 232.219 mo
244.308 224.913 li
244.263 224.913 li
241.747 232.219 li
246.659 232.219 li
cp
236.005 238.698 mo
242.194 221.566 li
246.563 221.566 li
252.519 238.698 li
248.817 238.698 li
247.585 235.067 li
240.798 235.067 li
239.515 238.698 li
236.005 238.698 li
f
260.731 229.252 mo
262.772 229.159 265.433 229.87 265.433 226.833 cv
265.433 223.795 262.772 224.506 260.731 224.417 cv
260.731 229.252 li
cp
257.052 238.698 mo
257.052 221.566 li
262.343 221.566 li
266.14 221.59 269.345 222.491 269.345 226.833 cv
269.345 229.944 267.231 231.981 263.411 232.1 cv
260.731 232.1 li
260.731 238.698 li
257.052 238.698 li
f
107.096 258.803 mo
107.096 261.745 107.785 265.065 111.415 265.065 cv
115.045 265.065 115.733 261.745 115.733 258.803 cv
115.733 255.858 115.045 252.538 111.415 252.538 cv
107.785 252.538 107.096 255.858 107.096 258.803 cv
cp
103.18 258.803 mo
103.18 253.75 105.743 249.879 111.415 249.879 cv
117.085 249.879 119.647 253.75 119.647 258.803 cv
119.647 263.854 117.085 267.723 111.415 267.723 cv
105.743 267.723 103.18 263.854 103.18 258.803 cv
f
134.98 255.788 mo
135.001 253.987 133.913 252.538 131.705 252.538 cv
129.094 252.538 128.432 256.407 128.432 258.803 cv
128.432 261.198 129.094 265.065 131.705 265.065 cv
133.913 265.065 135.001 263.616 134.98 261.815 cv
138.894 261.815 li
138.729 266.112 135.645 267.723 131.705 267.723 cv
126.746 267.723 124.516 263.807 124.516 258.803 cv
124.516 253.795 126.746 249.879 131.705 249.879 cv
135.645 249.879 138.729 251.491 138.894 255.788 cv
134.98 255.788 li
f
144.488 267.366 mo
144.488 250.237 li
148.165 250.237 li
148.165 256.999 li
154.642 256.999 li
154.642 250.237 li
158.367 250.237 li
158.367 267.366 li
154.69 267.366 li
154.69 259.844 li
148.165 259.844 li
148.165 267.366 li
144.488 267.366 li
f
177.481 257.639 mo
177.529 257.639 li
183.225 250.237 li
187.52 250.237 li
181.23 257.901 li
188.063 267.366 li
183.485 267.366 li
177.529 258.635 li
177.481 258.635 li
177.481 267.366 li
173.804 267.366 li
173.804 250.237 li
177.481 250.237 li
177.481 257.639 li
f
194.843 258.803 mo
194.843 261.745 195.526 265.065 199.163 265.065 cv
202.794 265.065 203.48 261.745 203.48 258.803 cv
203.48 255.858 202.794 252.538 199.163 252.538 cv
195.526 252.538 194.843 255.858 194.843 258.803 cv
cp
190.932 258.803 mo
190.932 253.75 193.491 249.879 199.163 249.879 cv
204.831 249.879 207.394 253.75 207.394 258.803 cv
207.394 263.854 204.831 267.723 199.163 267.723 cv
193.491 267.723 190.932 263.854 190.932 258.803 cv
f
222.937 267.366 mo
216.171 253.131 li
216.126 253.178 li
216.126 267.366 li
212.688 267.366 li
212.688 250.237 li
218.144 250.237 li
224.667 263.713 li
224.716 263.665 li
224.716 250.237 li
228.155 250.237 li
228.155 267.366 li
222.937 267.366 li
f
243.921 255.124 mo
243.778 253.393 242.851 252.538 241.075 252.538 cv
239.722 252.538 238.347 253.252 238.347 254.745 cv
238.347 256.594 240.007 256.809 241.478 257.165 cv
244.089 257.827 247.933 258.565 247.933 262.006 cv
247.933 266.25 244.23 267.723 240.554 267.723 cv
236.64 267.723 233.858 266.206 233.98 261.885 cv
237.73 261.885 li
237.589 263.784 238.679 265.065 240.601 265.065 cv
242.071 265.065 244.015 264.616 244.015 262.788 cv
244.015 260.772 241.573 260.627 240.104 260.25 cv
237.706 259.655 234.429 258.565 234.429 255.526 cv
234.429 251.614 238.036 249.879 241.55 249.879 cv
244.87 249.879 247.456 251.682 247.456 255.124 cv
243.921 255.124 li
f
252.302 250.237 mo
266.183 250.237 li
266.183 253.084 li
261.085 253.084 li
261.085 267.366 li
257.405 267.366 li
257.405 253.084 li
252.302 253.084 li
252.302 250.237 li
f
197.586 82.2794 mo
197.602 82.3135 197.623 82.3448 197.641 82.379 cv
197.66 82.3555 197.68 82.334 197.699 82.3106 cv
197.586 82.2794 li
f
244.707 87.8663 mo
243.979 89.7286 241.869 90.6553 240.008 89.9278 cv
239.102 89.5762 238.389 88.8956 237.998 88.0108 cv
237.791 87.5411 237.688 87.044 237.688 86.546 cv
237.688 86.1006 237.772 85.6534 237.938 85.2247 cv
238.668 83.3633 240.777 82.4376 242.643 83.1612 cv
244.502 83.8868 245.428 85.9981 244.707 87.8663 cv
cp
230.219 93.5118 mo
227.51 92.4571 225.605 90.2266 224.861 87.6309 cv
222.84 89.4278 220.031 90.2872 217.186 89.7305 cv
214.131 89.1309 212.131 86.1602 212.734 83.1075 cv
212.791 82.8223 213.059 81.7129 213.186 81.3028 cv
213.59 83.4336 215.234 85.2129 217.486 85.6544 cv
220.451 86.2364 223.34 84.293 223.918 81.334 cv
224.502 78.3711 222.559 75.4864 219.596 74.9063 cv
219.283 74.8414 218.938 74.9024 218.609 74.9014 cv
218.703 74.6456 218.811 74.3526 218.811 74.3526 cv
218.938 73.7032 218.938 73.0586 218.839 72.4405 cv
221.544 71.7154 223.545 69.2525 223.545 66.3223 cv
223.545 63.9688 222.252 61.9141 220.342 60.8213 cv
221.926 59.9044 223.008 58.209 223.008 56.25 cv
223.008 53.4976 220.889 51.2554 218.201 51.0035 cv
218.303 50.8589 218.387 50.7042 218.471 50.5489 cv
229.83 54.17 235.723 59.6651 238.414 65.1495 cv
238.557 65.6876 238.772 66.1963 239.074 66.6465 cv
240.189 69.5079 240.49 72.3184 240.295 74.8067 cv
240.457 75.1456 li
240.52 75.8379 240.703 76.4942 240.986 77.0977 cv
240.939 77.1192 240.899 77.1519 240.854 77.1744 cv
240.639 77.2808 240.43 77.3985 240.23 77.5323 cv
240.12 77.606 240.016 77.6866 239.911 77.7681 cv
239.781 77.8697 239.656 77.9776 239.535 78.0918 cv
239.383 78.233 239.242 78.3834 239.105 78.5425 cv
239.033 78.6285 238.965 78.7168 238.897 78.8077 cv
238.742 79.0147 238.604 79.2334 238.477 79.4654 cv
238.437 79.5401 238.398 79.6158 238.361 79.6929 cv
238.298 79.8243 238.218 79.9434 238.164 80.0821 cv
238.164 80.0821 238.097 80.3755 238.044 80.6412 cv
237.76 80.4649 237.508 80.2325 237.205 80.1163 cv
236.145 79.7032 234.937 79.4463 233.764 79.4888 cv
231.813 79.5528 229.954 80.4419 229.029 82.8165 cv
227.932 85.6309 229.328 88.8106 232.145 89.9063 cv
233.668 90.501 235.287 90.3458 236.633 89.6436 cv
236.857 89.9844 237.109 90.3018 237.398 90.5831 cv
236.17 93.292 233.02 94.6045 230.219 93.5118 cv
cp
209.283 76.7227 mo
209.649 74.8531 211.399 73.6275 213.263 73.8536 cv
213.764 73.9517 li
215.57 74.4444 216.733 76.2408 216.365 78.1114 cv
215.982 80.0665 214.084 81.3379 212.133 80.9571 cv
210.174 80.5743 208.898 78.6797 209.283 76.7227 cv
cp
210.342 82.6387 mo
209.744 85.6915 206.772 87.6895 203.719 87.0899 cv
200.906 86.5411 198.844 84.754 197.641 82.379 cv
196.006 84.4864 193.676 85.8497 190.804 85.8497 cv
187.693 85.8497 185.163 83.3145 185.163 80.2051 cv
185.163 79.9122 185.218 78.7735 185.253 78.3458 cv
186.068 80.3575 188.023 81.7891 190.321 81.7891 cv
193.342 81.7891 195.799 79.3321 195.799 76.3145 cv
195.799 73.293 193.342 70.836 190.321 70.836 cv
189.995 70.836 189.675 70.9595 189.352 71.0215 cv
189.397 70.753 189.44 70.4483 189.44 70.4483 cv
189.44 69.9673 189.372 69.503 189.255 69.0582 cv
191.212 67.8516 li
191.212 67.8516 191.009 49.0484 187.683 40.7564 cv
187.746 40.7217 187.804 40.6807 187.867 40.6441 cv
214.762 42.2461 212.439 60.9942 209.258 67.5938 cv
210.057 68.9805 li
210.022 69.0079 209.993 69.0435 209.958 69.0718 cv
209.805 69.1978 209.66 69.334 209.522 69.4766 cv
209.418 69.5811 209.32 69.688 209.226 69.8008 cv
209.171 69.8668 209.121 69.938 209.069 70.0069 cv
208.907 70.2193 208.761 70.4415 208.63 70.6783 cv
208.615 70.7051 208.603 70.7334 208.588 70.7603 cv
208.435 71.0523 208.308 71.3594 208.207 71.6836 cv
208.201 71.7007 208.197 71.7188 208.191 71.7359 cv
208.141 71.9073 208.076 72.0713 208.041 72.25 cv
208.041 72.25 208.025 72.5586 208.022 72.8321 cv
207.703 72.7071 207.408 72.5176 207.078 72.4512 cv
204.115 71.8711 201.23 73.8126 200.652 76.7754 cv
200.072 79.7364 202.006 82.6211 204.975 83.2012 cv
207.23 83.6446 209.422 82.6172 210.607 80.7969 cv
210.561 81.2247 210.398 82.3516 210.342 82.6387 cv
cp
180.394 74.627 mo
180.394 72.6446 181.994 71.0425 183.976 71.0264 cv
184.035 71.0264 li
186.011 71.0425 187.611 72.6446 187.611 74.627 cv
187.611 76.6211 185.996 78.2344 184.005 78.2344 cv
182.009 78.2344 180.394 76.6211 180.394 74.627 cv
cp
177.083 85.8497 mo
174.178 85.8497 171.774 84.4258 170.135 82.2794 cv
168.938 84.7051 166.854 86.5332 164.004 87.0899 cv
160.95 87.6895 157.977 85.6915 157.379 82.6387 cv
157.323 82.3516 157.161 81.2247 157.116 80.7969 cv
158.299 82.6172 160.493 83.6446 162.747 83.2012 cv
165.715 82.6211 167.649 79.7364 167.071 76.7754 cv
166.491 73.8126 163.606 71.8711 160.643 72.4512 cv
160.322 72.5157 160.033 72.6963 159.726 72.8208 cv
159.722 72.5503 159.707 72.2491 159.707 72.2491 cv
159.444 70.9034 158.705 69.773 157.702 68.9898 cv
158.507 67.5938 li
155.317 60.9795 152.99 42.1651 180.07 40.6329 cv
180.178 40.6963 180.284 40.7608 180.395 40.8194 cv
177.086 49.0967 176.74 67.6231 176.74 67.6231 cv
178.697 68.8858 li
178.549 69.3819 178.467 69.9053 178.467 70.4493 cv
178.467 70.4493 178.516 70.7579 178.557 71.0274 cv
178.229 70.9668 177.895 70.836 177.565 70.836 cv
174.545 70.836 172.084 73.293 172.084 76.3145 cv
172.084 79.3321 174.545 81.7891 177.565 81.7891 cv
179.864 81.7891 181.821 80.3575 182.631 78.3458 cv
182.672 78.7735 182.721 79.9122 182.721 80.2051 cv
182.721 83.3145 180.192 85.8497 177.083 85.8497 cv
cp
151.63 78.1114 mo
151.244 76.1544 152.525 74.2618 154.48 73.877 cv
156.437 73.4981 158.332 74.7676 158.71 76.7227 cv
159.097 78.6797 157.82 80.5743 155.865 80.9571 cv
153.912 81.3379 152.011 80.0665 151.63 78.1114 cv
cp
150.538 89.7305 mo
147.69 90.2872 144.881 89.4278 142.862 87.6309 cv
142.116 90.2266 140.211 92.4571 137.504 93.5118 cv
134.763 94.5811 131.686 93.3497 130.401 90.7569 cv
130.742 90.4551 131.047 90.1182 131.302 89.7481 cv
132.335 90.2315 133.512 90.3956 134.675 90.1636 cv
134.789 90.1446 134.907 90.1207 135.031 90.087 cv
135.039 90.085 135.046 90.0816 135.054 90.0796 cv
135.229 90.0313 135.403 89.9834 135.603 89.9053 cv
138.419 88.8096 139.816 85.6299 138.718 82.8155 cv
137.702 80.2037 135.554 79.3887 133.396 79.4927 cv
132.411 79.5372 131.424 79.7725 130.54 80.1172 cv
130.239 80.2334 129.984 80.4654 129.702 80.6416 cv
129.649 80.3755 129.58 80.0811 129.58 80.0811 cv
129.046 78.7095 128.015 77.6778 126.774 77.1045 cv
127.058 76.5 127.246 75.8409 127.309 75.1456 cv
127.47 74.8067 li
127.275 72.3184 127.576 69.5079 128.691 66.6456 cv
128.994 66.1963 129.207 65.6876 129.349 65.1504 cv
132.042 59.6651 137.935 54.171 149.294 50.5489 cv
149.378 50.7042 149.463 50.8589 149.563 51.0035 cv
146.876 51.2554 144.757 53.4976 144.757 56.25 cv
144.757 58.209 145.838 59.9044 147.423 60.8213 cv
145.513 61.9141 144.22 63.9688 144.22 66.3223 cv
144.22 69.2461 146.212 71.7071 148.908 72.4376 cv
148.808 73.0577 148.808 73.7032 148.936 74.3536 cv
148.936 74.3536 149.042 74.6465 149.137 74.9024 cv
148.799 74.9063 148.448 74.8399 148.127 74.9063 cv
145.163 75.4864 143.219 78.3711 143.803 81.334 cv
144.383 84.293 147.27 86.2364 150.235 85.6544 cv
152.487 85.2129 154.133 83.4336 154.538 81.3028 cv
154.663 81.7129 154.932 82.8223 154.987 83.1075 cv
155.59 86.1602 153.59 89.1309 150.538 89.7305 cv
cp
127.991 89.9268 mo
126.127 90.6553 124.017 89.7286 123.286 87.8614 cv
122.566 85.9981 123.495 83.8868 125.357 83.1602 cv
127.219 82.4376 129.327 83.3633 130.058 85.2247 cv
130.225 85.6563 130.304 86.1006 130.304 86.5372 cv
130.304 87.9942 129.425 89.3711 127.991 89.9268 cv
cp
121.439 70.7149 mo
123.587 70.7149 125.335 72.4639 125.335 74.6133 cv
125.335 75.3443 125.121 76.021 124.769 76.6065 cv
124.014 76.5655 123.24 76.6758 122.492 76.9678 cv
121.733 77.2647 120.647 77.6876 119.675 78.0665 cv
118.416 77.4205 117.542 76.1231 117.542 74.6133 cv
117.542 72.4639 119.291 70.7149 121.439 70.7149 cv
cp
121.654 63.8965 mo
121.654 62.2764 122.97 60.959 124.587 60.959 cv
126.21 60.959 127.531 62.2764 127.531 63.8965 cv
127.531 65.5176 126.21 66.836 124.587 66.836 cv
122.97 66.836 121.654 65.5176 121.654 63.8965 cv
cp
130.332 54.1778 mo
131.472 54.1778 132.4 55.1065 132.4 56.2481 cv
132.4 57.3887 131.472 58.3165 130.332 58.3165 cv
129.189 58.3165 128.259 57.3887 128.259 56.2481 cv
128.259 55.1065 129.189 54.1778 130.332 54.1778 cv
cp
137.347 49.5689 mo
138.285 49.5689 139.048 50.334 139.048 51.274 cv
139.048 52.2139 138.285 52.9786 137.347 52.9786 cv
136.404 52.9786 135.636 52.2139 135.636 51.274 cv
135.636 50.334 136.404 49.5689 137.347 49.5689 cv
cp
144.867 46.4712 mo
145.615 46.4712 146.224 47.0821 146.224 47.8326 cv
146.224 48.5821 145.615 49.1919 144.867 49.1919 cv
144.117 49.1919 143.507 48.5821 143.507 47.8326 cv
143.507 47.0821 144.117 46.4712 144.867 46.4712 cv
cp
150.054 52.9537 mo
151.872 52.9537 153.351 54.4327 153.351 56.25 cv
153.351 58.0694 151.872 59.5489 150.054 59.5489 cv
148.236 59.5489 146.757 58.0694 146.757 56.25 cv
146.757 54.4327 148.236 52.9537 150.054 52.9537 cv
cp
153.414 45.6587 mo
154.89 45.6587 156.091 46.8633 156.091 48.3443 cv
156.091 49.8228 154.89 51.0259 153.414 51.0259 cv
151.932 51.0259 150.726 49.8228 150.726 48.3443 cv
150.726 46.8633 151.932 45.6587 153.414 45.6587 cv
cp
153.279 67.9268 mo
151.672 68.2393 150.371 69.2344 149.605 70.5499 cv
147.671 70.1124 146.22 68.3873 146.22 66.3223 cv
146.22 63.9297 148.168 61.9825 150.562 61.9825 cv
152.958 61.9825 154.908 63.9297 154.908 66.3223 cv
154.908 66.857 154.797 67.3633 154.62 67.8365 cv
154.18 67.8135 153.731 67.8374 153.279 67.9268 cv
cp
159.24 41.2974 mo
160.313 41.2974 161.187 42.1729 161.187 43.2486 cv
161.187 44.3223 160.313 45.1958 159.24 45.1958 cv
158.16 45.1958 157.281 44.3223 157.281 43.2486 cv
157.281 42.1729 158.16 41.2974 159.24 41.2974 cv
cp
165.566 38.1978 mo
166.43 38.1978 167.132 38.9039 167.132 39.772 cv
167.132 40.6412 166.43 41.3482 165.566 41.3482 cv
164.695 41.3482 163.986 40.6412 163.986 39.772 cv
163.986 38.9039 164.695 38.1978 165.566 38.1978 cv
cp
172.755 36.5064 mo
173.443 36.5064 174.003 37.0699 174.003 37.7623 cv
174.003 38.4571 173.443 39.022 172.755 39.022 cv
172.06 39.022 171.494 38.4571 171.494 37.7623 cv
171.494 37.0699 172.06 36.5064 172.755 36.5064 cv
cp
181.662 33.8931 mo
181.101 34.4781 180.752 35.2662 180.752 36.1373 cv
180.752 36.3755 180.781 36.6065 180.83 36.8306 cv
180.312 36.8443 179.795 36.8589 179.292 36.8799 cv
178.838 36.1426 178.555 35.2935 178.493 34.3819 cv
178.737 34.2525 179.647 34.0059 181.662 33.8931 cv
cp
181.42 29.1368 mo
181.841 29.4112 182.383 29.6026 182.996 29.7066 cv
182.996 31.6436 li
181.15 31.6749 179.816 31.8028 178.858 31.9991 cv
179.344 30.7666 180.258 29.75 181.42 29.1368 cv
cp
179.309 20.5792 mo
179.196 20.4439 178.973 19.9942 178.973 19.1968 cv
178.973 18.4048 179.195 17.9585 179.308 17.8243 cv
179.631 17.8243 182.604 17.8243 182.604 17.8243 cv
182.604 17.8243 182.604 14.8545 182.604 14.5264 cv
182.74 14.4141 183.188 14.1934 183.984 14.1934 cv
184.775 14.1934 185.222 14.4141 185.359 14.5259 cv
185.359 14.8536 185.359 17.8243 185.359 17.8243 cv
185.359 17.8243 188.332 17.8243 188.657 17.8243 cv
188.771 17.959 188.993 18.4058 188.993 19.1968 cv
188.993 19.9937 188.769 20.4429 188.655 20.5792 cv
188.33 20.5792 185.359 20.5792 185.359 20.5792 cv
185.359 20.5792 185.359 26.8946 185.359 27.2593 cv
185.222 27.3726 184.774 27.5967 183.984 27.5967 cv
183.189 27.5967 182.74 27.3726 182.604 27.2588 cv
182.604 26.8936 182.604 20.5792 182.604 20.5792 cv
182.604 20.5792 179.634 20.5792 179.309 20.5792 cv
cp
189.14 32.1148 mo
187.89 31.8057 186.322 31.6783 184.796 31.6451 cv
184.796 29.7398 li
185.482 29.6465 186.08 29.4385 186.541 29.1387 cv
187.736 29.771 188.667 30.8316 189.14 32.1148 cv
cp
183.998 43.4107 mo
185.542 43.4107 186.789 44.6587 186.789 46.2017 cv
186.789 47.7369 185.542 48.9927 183.998 48.9927 cv
182.458 48.9927 181.208 47.7369 181.208 46.2017 cv
181.208 44.6587 182.458 43.4107 183.998 43.4107 cv
cp
182.752 36.1373 mo
182.752 35.4449 183.319 34.8814 184.016 34.8814 cv
184.704 34.8814 185.265 35.4449 185.265 36.1373 cv
185.265 36.8306 184.704 37.3951 184.016 37.3951 cv
183.319 37.3951 182.752 36.8306 182.752 36.1373 cv
cp
184.001 38.5884 mo
185.034 38.5884 185.875 39.4341 185.875 40.4693 cv
185.875 41.5084 185.034 42.3521 184.001 42.3521 cv
182.96 42.3521 182.115 41.5084 182.115 40.4693 cv
182.115 39.4341 182.96 38.5884 184.001 38.5884 cv
cp
183.998 57.3243 mo
182.021 57.3243 180.418 55.7247 180.418 53.7486 cv
180.418 51.772 182.021 50.1685 183.998 50.1685 cv
185.978 50.1685 187.584 51.772 187.584 53.7486 cv
187.584 55.7247 185.978 57.3243 183.998 57.3243 cv
cp
187.309 66.1187 mo
186.383 65.4014 185.227 64.9698 183.968 64.9698 cv
182.728 64.9698 181.585 65.3897 180.666 66.0879 cv
179.979 65.3047 179.548 64.2896 179.548 63.1641 cv
179.548 60.7032 181.539 58.7129 183.998 58.7129 cv
186.458 58.7129 188.455 60.7032 188.455 63.1641 cv
188.455 64.3038 188.013 65.3316 187.309 66.1187 cv
cp
189.327 71.0264 mo
189.331 71.0264 li
189.33 71.0264 189.328 71.0274 189.327 71.0274 cv
189.327 71.0269 189.327 71.0269 189.327 71.0264 cv
cp
189.456 34.5132 mo
189.376 35.379 189.093 36.1851 188.657 36.8887 cv
188.175 36.8677 187.681 36.8521 187.185 36.8379 cv
187.234 36.6114 187.265 36.378 187.265 36.1373 cv
187.265 35.2881 186.931 34.5206 186.398 33.9405 cv
187.99 34.0792 189.04 34.3252 189.456 34.5132 cv
cp
189.478 34.0562 mo
189.478 34.1612 189.47 34.2647 189.462 34.3687 cv
189.427 34.2842 189.397 34.1827 189.397 34.0562 cv
189.478 34.0562 li
cp
195.01 36.5064 mo
195.705 36.5064 196.272 37.0699 196.272 37.7623 cv
196.272 38.4571 195.705 39.022 195.01 39.022 cv
194.32 39.022 193.762 38.4571 193.762 37.7623 cv
193.762 37.0699 194.32 36.5064 195.01 36.5064 cv
cp
202.199 38.1978 mo
203.07 38.1978 203.779 38.9039 203.779 39.772 cv
203.779 40.6412 203.07 41.3482 202.199 41.3482 cv
201.336 41.3482 200.633 40.6412 200.633 39.772 cv
200.633 38.9039 201.336 38.1978 202.199 38.1978 cv
cp
208.525 41.2974 mo
209.605 41.2974 210.484 42.1729 210.484 43.2486 cv
210.484 44.3223 209.605 45.1958 208.525 45.1958 cv
207.451 45.1958 206.578 44.3223 206.578 43.2486 cv
206.578 42.1729 207.451 41.2974 208.525 41.2974 cv
cp
214.352 45.6587 mo
215.832 45.6587 217.039 46.8633 217.039 48.3443 cv
217.039 49.8228 215.832 51.0259 214.352 51.0259 cv
212.875 51.0259 211.674 49.8228 211.674 48.3443 cv
211.674 46.8633 212.875 45.6587 214.352 45.6587 cv
cp
214.492 67.9268 mo
214.038 67.837 213.588 67.813 213.146 67.8365 cv
212.968 67.3633 212.857 66.857 212.857 66.3223 cv
212.857 63.9297 214.807 61.9825 217.203 61.9825 cv
219.598 61.9825 221.545 63.9297 221.545 66.3223 cv
221.545 68.3858 220.096 70.1094 218.164 70.5489 cv
217.398 69.2339 216.098 68.2393 214.492 67.9268 cv
cp
218.588 74.897 mo
218.609 74.9014 li
218.602 74.9014 218.594 74.9024 218.586 74.9024 cv
218.587 74.9004 218.587 74.899 218.588 74.897 cv
cp
221.008 56.25 mo
221.008 58.0694 219.529 59.5489 217.711 59.5489 cv
215.893 59.5489 214.414 58.0694 214.414 56.25 cv
214.414 54.4327 215.893 52.9537 217.711 52.9537 cv
219.529 52.9537 221.008 54.4327 221.008 56.25 cv
cp
222.898 46.4712 mo
223.648 46.4712 224.258 47.0821 224.258 47.8326 cv
224.258 48.5821 223.648 49.1919 222.898 49.1919 cv
222.15 49.1919 221.541 48.5821 221.541 47.8326 cv
221.541 47.0821 222.15 46.4712 222.898 46.4712 cv
cp
230.418 49.5689 mo
231.361 49.5689 232.129 50.334 232.129 51.274 cv
232.129 52.2139 231.361 52.9786 230.418 52.9786 cv
229.479 52.9786 228.717 52.2139 228.717 51.274 cv
228.717 50.334 229.479 49.5689 230.418 49.5689 cv
cp
237.434 54.1778 mo
238.576 54.1778 239.506 55.1065 239.506 56.2481 cv
239.506 57.3887 238.576 58.3165 237.434 58.3165 cv
236.293 58.3165 235.365 57.3887 235.365 56.2481 cv
235.365 55.1065 236.293 54.1778 237.434 54.1778 cv
cp
243.178 60.959 mo
244.795 60.959 246.111 62.2764 246.111 63.8965 cv
246.111 65.5176 244.795 66.836 243.178 66.836 cv
241.555 66.836 240.234 65.5176 240.234 63.8965 cv
240.234 62.2764 241.555 60.959 243.178 60.959 cv
cp
246.326 70.7149 mo
248.475 70.7149 250.223 72.4639 250.223 74.6133 cv
250.223 76.1221 249.351 77.419 248.092 78.065 cv
247.121 77.6871 246.037 77.2647 245.279 76.9678 cv
244.528 76.6753 243.753 76.565 242.997 76.6065 cv
242.645 76.0215 242.43 75.3443 242.43 74.6133 cv
242.43 72.4639 244.178 70.7149 246.326 70.7149 cv
cp
250.346 78.9424 mo
250.346 78.9424 250.332 78.9371 250.321 78.9332 cv
251.487 77.856 252.223 76.3204 252.223 74.6133 cv
252.223 71.3614 249.576 68.7149 246.326 68.7149 cv
246.066 68.7149 245.811 68.7374 245.559 68.7706 cv
245.518 68.6055 245.465 68.4376 245.418 68.2715 cv
247.01 67.4512 248.111 65.8086 248.111 63.8965 cv
248.111 61.1739 245.898 58.959 243.178 58.959 cv
242.266 58.959 241.42 59.2247 240.686 59.6573 cv
240.545 59.4922 240.41 59.3282 240.262 59.1641 cv
241.025 58.4239 241.506 57.3926 241.506 56.2481 cv
241.506 54.004 239.678 52.1783 237.434 52.1783 cv
236.055 52.1783 234.838 52.8711 234.102 53.9239 cv
233.871 53.7691 233.635 53.6153 233.395 53.4624 cv
233.85 52.8477 234.129 52.0953 234.129 51.274 cv
234.129 49.231 232.463 47.5689 230.418 47.5689 cv
228.814 47.5689 227.459 48.6006 226.945 50.0308 cv
226.566 49.8628 226.172 49.6998 225.777 49.5357 cv
226.074 49.0342 226.258 48.4566 226.258 47.8326 cv
226.258 45.9791 224.75 44.4712 222.898 44.4712 cv
221.223 44.4712 219.844 45.7081 219.594 47.3145 cv
219.34 47.2364 219.1 47.1543 218.842 47.0777 cv
218.285 45.1119 216.494 43.6587 214.352 43.6587 cv
213.875 43.6587 213.418 43.7413 212.986 43.878 cv
212.818 43.7398 212.646 43.6026 212.471 43.4668 cv
212.475 43.3941 212.484 43.3228 212.484 43.2486 cv
212.484 41.0699 210.707 39.2974 208.525 39.2974 cv
207.668 39.2974 206.879 39.5796 206.232 40.0469 cv
206.078 39.9874 205.926 39.9268 205.77 39.8687 cv
205.77 39.836 205.779 39.8052 205.779 39.772 cv
205.779 37.8013 204.172 36.1978 202.199 36.1978 cv
200.861 36.1978 199.707 36.9488 199.096 38.0435 cv
198.822 37.9903 198.541 37.94 198.258 37.8897 cv
198.26 37.8467 198.272 37.8057 198.272 37.7623 cv
198.272 35.9668 196.809 34.5064 195.01 34.5064 cv
193.451 34.5064 192.148 35.6128 191.836 37.0821 cv
191.582 37.0621 191.32 37.045 191.062 37.0269 cv
191.459 36.0992 191.68 35.0787 191.68 34.0074 cv
191.68 31.0513 190.005 28.482 187.558 27.19 cv
187.558 26.3946 187.558 23.9742 187.558 22.7793 cv
188.201 22.7793 188.851 22.7793 188.851 22.7793 cv
190.208 22.7793 191.192 21.2725 191.192 19.1968 cv
191.192 17.1265 190.208 15.6241 188.851 15.6241 cv
188.851 15.6241 188.201 15.6241 187.558 15.6241 cv
187.558 14.982 187.558 14.3316 187.558 14.3316 cv
187.558 12.9766 186.054 11.9932 183.984 11.9932 cv
181.909 11.9932 180.403 12.9766 180.403 14.3316 cv
180.403 14.3316 180.403 14.982 180.403 15.6241 cv
179.764 15.6241 179.117 15.6241 179.117 15.6241 cv
177.758 15.6241 176.772 17.1265 176.772 19.1968 cv
176.772 21.2725 177.758 22.7793 179.117 22.7793 cv
179.117 22.7793 179.764 22.7793 180.403 22.7793 cv
180.403 23.9727 180.403 26.3897 180.403 27.1876 cv
177.951 28.4786 176.273 31.0494 176.273 34.0074 cv
176.273 35.0733 176.492 36.0894 176.886 37.0137 cv
176.565 37.0357 176.243 37.0572 175.93 37.0821 cv
175.616 35.6128 174.313 34.5064 172.755 34.5064 cv
170.957 34.5064 169.494 35.9668 169.494 37.7623 cv
169.494 37.8057 169.505 37.8467 169.506 37.8897 cv
169.224 37.94 168.943 37.9903 168.668 38.044 cv
168.058 36.9488 166.904 36.1978 165.566 36.1978 cv
163.592 36.1978 161.986 37.8013 161.986 39.772 cv
161.986 39.8052 161.995 39.836 161.996 39.8687 cv
161.838 39.9268 161.686 39.9874 161.533 40.0469 cv
160.885 39.5796 160.097 39.2974 159.24 39.2974 cv
157.057 39.2974 155.281 41.0699 155.281 43.2486 cv
155.281 43.3228 155.29 43.3946 155.294 43.4673 cv
155.118 43.6031 154.946 43.7398 154.778 43.878 cv
154.346 43.7413 153.891 43.6587 153.414 43.6587 cv
151.271 43.6587 149.479 45.1119 148.922 47.0777 cv
148.664 47.1543 148.425 47.2369 148.172 47.3145 cv
147.921 45.7081 146.541 44.4712 144.867 44.4712 cv
143.014 44.4712 141.507 45.9791 141.507 47.8326 cv
141.507 48.4566 141.689 49.0342 141.987 49.5357 cv
141.594 49.6998 141.198 49.8628 140.818 50.0308 cv
140.305 48.6006 138.95 47.5689 137.347 47.5689 cv
135.301 47.5689 133.636 49.231 133.636 51.274 cv
133.636 52.0953 133.914 52.8477 134.369 53.4629 cv
134.13 53.6158 133.893 53.7691 133.662 53.9239 cv
132.926 52.8711 131.71 52.1783 130.332 52.1783 cv
128.086 52.1783 126.259 54.004 126.259 56.2481 cv
126.259 57.3926 126.739 58.4239 127.503 59.1641 cv
127.355 59.3282 127.221 59.4932 127.08 59.6573 cv
126.345 59.2247 125.5 58.959 124.587 58.959 cv
121.867 58.959 119.654 61.1739 119.654 63.8965 cv
119.654 65.8086 120.756 67.4512 122.346 68.2715 cv
122.3 68.4376 122.247 68.6055 122.205 68.7706 cv
121.954 68.7374 121.699 68.7149 121.439 68.7149 cv
118.188 68.7149 115.542 71.3614 115.542 74.6133 cv
115.542 76.3184 116.274 77.8516 117.436 78.9288 cv
117.412 78.9385 117.399 78.9434 117.399 78.9434 cv
117.399 78.9434 119.232 80.8887 121.657 84.0147 cv
120.963 85.3907 120.825 87.0411 121.422 88.587 cv
122.387 91.0489 124.896 92.4493 127.4 92.1221 cv
129.698 95.0342 133.556 98.5215 136.704 97.6231 cv
136.704 97.6231 156.4 88.4434 183.862 88.4063 cv
211.32 88.4434 231.02 97.6231 231.02 97.6231 cv
234.178 98.5254 238.053 95.0079 240.346 92.0899 cv
242.93 92.5469 245.576 91.1329 246.57 88.5918 cv
247.199 86.9629 247.022 85.2168 246.232 83.7999 cv
248.069 81.4449 249.528 79.8111 250.076 79.21 cv
250.166 79.1216 250.254 79.0401 250.346 78.9424 cv
f
208.659 100.38 mo
209.837 100.623 210.995 99.8643 211.228 98.6885 cv
211.478 97.5069 210.724 96.3506 209.536 96.1084 cv
205.237 95.2217 li
204.058 94.9776 202.901 95.7413 202.659 96.921 cv
202.423 98.1026 203.181 99.253 204.362 99.4991 cv
208.659 100.38 li
cp
224.122 102.606 mo
225.169 103.848 226.321 105.216 226.898 105.901 cv
227.627 105.497 228.604 104.955 229.358 104.537 cv
229.057 103.729 228.666 102.684 228.375 101.904 cv
227.49 102.05 225.726 102.341 224.122 102.606 cv
cp
179.562 95.7349 mo
181.179 96.6544 183.445 97.9429 184.077 98.3018 cv
184.708 97.9424 186.971 96.6544 188.586 95.7349 cv
186.971 94.815 184.708 93.5254 184.077 93.1656 cv
183.445 93.525 181.179 94.8145 179.562 95.7349 cv
cp
163.692 99.4991 mo
164.876 99.253 165.631 98.1026 165.395 96.921 cv
165.153 95.7413 163.997 94.9776 162.815 95.2217 cv
158.518 96.1084 li
157.331 96.3506 156.579 97.5069 156.825 98.6885 cv
157.061 99.8643 158.217 100.623 159.397 100.38 cv
163.692 99.4991 li
cp
138.696 104.537 mo
139.451 104.955 140.427 105.498 141.155 105.901 cv
141.733 105.216 142.885 103.848 143.932 102.606 cv
142.33 102.341 140.565 102.05 139.681 101.904 cv
139.39 102.684 138.999 103.729 138.696 104.537 cv
cp
224.542 106.146 mo
212.474 101.688 199.806 99.2994 186.826 99.0386 cv
184.077 100.603 li
181.332 99.042 li
168.249 99.3365 155.485 101.795 143.337 106.354 cv
141.615 108.398 li
136.27 105.431 li
138.127 100.463 li
138.41 99.7076 li
140.806 100.104 li
153.9 95.0772 167.68 92.4087 181.805 92.1573 cv
183.582 91.1456 li
184.077 90.8638 li
186.341 92.1539 li
200.525 92.3721 214.364 95.0269 227.52 100.059 cv
228.852 99.8389 li
229.646 99.7076 li
231.784 105.431 li
226.439 108.398 li
224.542 106.146 li
f
2.8346 lw
0 lc
69.5127 128.607 mo
69.6207 127.592 69.5123 126.456 69.1553 125.31 cv
68.2413 122.404 65.5342 120.216 64.0225 120.685 cv
63.8311 120.75 63.5557 120.234 63.3506 120.302 cv
63.1553 120.363 63.2256 120.941 63.0303 121.001 cv
61.5147 121.47 60.5401 124.816 61.4522 127.726 cv
61.8082 128.867 62.3643 129.86 63.0303 130.632 cv
@
1 lj
67.6749 134.064 mo
70.6163 133.148 72.4483 130.621 71.6221 127.978 cv
71.3194 126.998 70.4991 126.945 70.4991 126.945 cv
70.7569 127.718 69.0206 129.449 66.4776 130.251 cv
63.9405 131.041 61.5264 130.609 61.2999 129.82 cv
61.2999 129.82 60.6553 130.337 60.9639 131.324 cv
61.7842 133.966 64.7334 134.988 67.6749 134.064 cv
cp
@
1 lc
0 lj
68.5142 133.878 mo
68.6861 134.392 68.7569 134.5 69.1006 134.966 cv
69.4502 135.441 69.8506 135.824 70.2881 136.128 cv
@
0 lc
82.8995 138.199 mo
83.8267 137.772 84.938 137.51 86.1373 137.482 cv
89.1836 137.418 92.1226 139.281 92.1626 140.864 cv
92.1626 141.066 92.7398 141.162 92.7403 141.377 cv
92.7457 141.582 92.1753 141.701 92.1807 141.905 cv
92.2217 143.491 89.3643 145.485 86.3155 145.553 cv
85.1207 145.582 84.002 145.373 83.0567 144.989 cv
@
1 lj
78.3184 141.688 mo
78.2442 138.608 80.0523 136.063 82.8204 136 cv
83.8458 135.972 84.1582 136.732 84.1582 136.732 cv
83.3433 136.736 82.2598 138.935 82.3135 141.601 cv
82.3785 144.257 83.5606 146.406 84.3804 146.368 cv
84.3804 146.368 84.0967 147.144 83.0635 147.168 cv
80.2974 147.237 78.3853 144.77 78.3184 141.688 cv
cp
@
1 lc
0 lj
78.2261 140.833 mo
77.6841 140.834 77.5596 140.802 77.0069 140.626 cv
76.4458 140.447 75.9546 140.19 75.5264 139.874 cv
@
0 lc
61.2925 195.954 mo
61.8863 195.125 62.7212 194.345 63.7476 193.724 cv
66.3609 192.157 69.8365 192.315 70.6578 193.671 cv
70.7574 193.845 71.3062 193.642 71.4146 193.83 cv
71.5201 194.003 71.0835 194.39 71.19 194.565 cv
72.0132 195.922 70.522 199.072 67.9097 200.644 cv
66.8863 201.261 65.8111 201.634 64.8003 201.771 cv
@
1 lj
59.0484 201.257 mo
57.4556 198.621 57.7613 195.514 60.1324 194.084 cv
61.0093 193.551 61.6578 194.056 61.6578 194.056 cv
60.9527 194.464 61.1031 196.911 62.4732 199.199 cv
63.8482 201.472 65.94 202.75 66.6334 202.311 cv
66.6334 202.311 66.772 203.126 65.8873 203.658 cv
63.521 205.092 60.6363 203.9 59.0484 201.257 cv
cp
@
1 lc
0 lj
58.5435 200.561 mo
58.0738 200.832 57.9498 200.865 57.3824 200.986 cv
56.8062 201.109 56.2525 201.13 55.7242 201.068 cv
@
0 lc
45.5079 194.721 mo
45.1036 193.784 44.4502 192.847 43.5772 192.025 cv
41.3536 189.942 37.921 189.367 36.834 190.518 cv
36.6993 190.668 36.2061 190.355 36.0606 190.515 cv
35.92 190.664 36.2657 191.132 36.125 191.281 cv
35.0352 192.434 35.8301 195.827 38.0547 197.914 cv
38.9249 198.733 39.8975 199.324 40.8565 199.669 cv
@
1 lj
46.5879 200.376 mo
48.7002 198.134 49.0538 195.033 47.0362 193.137 cv
46.2911 192.432 45.5508 192.789 45.5508 192.789 cv
46.1553 193.335 45.4932 195.696 43.6719 197.644 cv
41.8497 199.579 39.5352 200.388 38.9502 199.812 cv
38.9502 199.812 38.6436 200.58 39.3965 201.288 cv
41.4092 203.186 44.4795 202.626 46.5879 200.376 cv
cp
@
1 lc
0 lj
47.2286 199.803 mo
47.6299 200.166 47.7452 200.225 48.2735 200.462 cv
48.8106 200.705 49.3477 200.841 49.878 200.891 cv
@
0 lc
70.9351 257.391 mo
71.0523 256.376 71.4068 255.291 72.0044 254.25 cv
73.5328 251.615 76.6509 250.072 78.0259 250.861 cv
78.1968 250.964 78.5787 250.521 78.7642 250.632 cv
78.941 250.734 78.7466 251.284 78.9234 251.385 cv
80.3003 252.173 80.5201 255.653 78.9947 258.292 cv
78.398 259.328 77.6382 260.174 76.8199 260.783 cv
@
1 lj
71.5367 263.118 mo
68.8677 261.581 67.6314 258.713 69.0152 256.316 cv
69.524 255.425 70.3355 255.552 70.3355 255.552 cv
69.9166 256.251 71.232 258.319 73.5376 259.659 cv
75.8414 260.983 78.2906 261.089 78.6851 260.369 cv
78.6851 260.369 79.1998 261.015 78.6832 261.909 cv
77.3072 264.309 74.2056 264.662 71.5367 263.118 cv
cp
@
1 lc
0 lj
70.7584 262.752 mo
70.4781 263.216 70.3853 263.305 69.9478 263.686 cv
69.5035 264.073 69.0289 264.359 68.5367 264.56 cv
@
0 lc
56.4522 263.736 mo
55.6426 263.115 54.6153 262.615 53.4522 262.322 cv
50.4961 261.585 47.2188 262.756 46.8292 264.291 cv
46.7852 264.488 46.2022 264.454 46.1524 264.664 cv
46.1016 264.863 46.6329 265.104 46.5821 265.302 cv
46.1915 266.839 48.5391 269.416 51.4981 270.155 cv
52.6573 270.447 53.794 270.489 54.7999 270.324 cv
@
1 lj
60.1504 268.149 mo
60.9024 265.162 59.7012 262.281 57.0157 261.609 cv
56.0215 261.356 55.5479 262.027 55.5479 262.027 cv
56.3428 262.21 56.9141 264.594 56.2725 267.183 cv
55.6231 269.76 53.9961 271.595 53.2051 271.376 cv
53.2051 271.376 53.3106 272.196 54.3135 272.448 cv
56.9961 273.126 59.4044 271.141 60.1504 268.149 cv
cp
@
1 lc
0 lj
60.4307 267.336 mo
60.9571 267.458 61.087 267.453 61.6641 267.404 cv
62.251 267.353 62.7872 267.21 63.2745 266.996 cv
@
0 lc
109.38 305.008 mo
108.986 304.065 108.766 302.944 108.779 301.746 cv
108.826 298.699 110.794 295.83 112.379 295.846 cv
112.579 295.853 112.696 295.281 112.912 295.287 cv
113.116 295.289 113.215 295.864 113.419 295.867 cv
115.005 295.881 116.896 298.811 116.854 301.859 cv
116.838 303.054 116.589 304.164 116.172 305.094 cv
@
1 lj
112.701 309.712 mo
109.621 309.673 107.143 307.775 107.18 305.007 cv
107.188 303.981 107.959 303.696 107.959 303.696 cv
107.935 304.511 110.092 305.672 112.759 305.716 cv
115.415 305.747 117.604 304.644 117.597 303.822 cv
117.597 303.822 118.361 304.135 118.347 305.168 cv
118.318 307.934 115.784 309.755 112.701 309.712 cv
cp
@
1 lc
0 lj
111.844 309.773 mo
111.825 310.315 111.787 310.437 111.592 310.983 cv
111.393 311.539 111.118 312.019 110.787 312.435 cv
@
0 lc
100.151 318.377 mo
99.1402 318.232 97.9996 318.298 96.8423 318.612 cv
93.9039 319.416 91.6177 322.041 92.0289 323.569 cv
92.0865 323.762 91.5611 324.017 91.6207 324.225 cv
91.6734 324.423 92.2554 324.375 92.3082 324.572 cv
92.7193 326.103 96.0269 327.203 98.9693 326.4 cv
100.123 326.087 101.136 325.568 101.932 324.932 cv
@
1 lj
105.535 320.418 mo
104.73 317.445 102.272 315.519 99.6011 316.248 cv
98.6109 316.513 98.5259 317.33 98.5259 317.33 cv
99.3091 317.101 100.974 318.901 101.681 321.472 cv
102.375 324.039 101.853 326.434 101.056 326.63 cv
101.056 326.63 101.549 327.293 102.547 327.023 cv
105.218 326.301 106.348 323.392 105.535 320.418 cv
cp
@
1 lc
0 lj
105.382 319.572 mo
105.9 319.42 106.012 319.353 106.49 319.028 cv
106.978 318.697 107.376 318.31 107.696 317.884 cv
@
0 lc
297.014 257.345 mo
296.896 256.331 296.541 255.245 295.943 254.205 cv
294.416 251.569 291.297 250.026 289.922 250.815 cv
289.752 250.918 289.369 250.475 289.184 250.586 cv
289.008 250.688 289.201 251.238 289.025 251.339 cv
287.648 252.127 287.428 255.607 288.953 258.247 cv
289.551 259.282 290.311 260.128 291.129 260.737 cv
@
1 lj
296.412 263.072 mo
299.08 261.535 300.316 258.668 298.934 256.27 cv
298.424 255.379 297.613 255.506 297.613 255.506 cv
298.031 256.206 296.717 258.273 294.41 259.613 cv
292.107 260.937 289.658 261.043 289.264 260.323 cv
289.264 260.323 288.748 260.969 289.266 261.863 cv
290.641 264.263 293.742 264.616 296.412 263.072 cv
cp
@
1 lc
0 lj
297.189 262.707 mo
297.471 263.17 297.562 263.259 298 263.64 cv
298.445 264.027 298.92 264.313 299.412 264.514 cv
@
0 lc
258.541 305.008 mo
258.936 304.065 259.156 302.944 259.143 301.746 cv
259.096 298.699 257.127 295.83 255.543 295.846 cv
255.342 295.853 255.225 295.281 255.01 295.287 cv
254.805 295.289 254.707 295.864 254.502 295.867 cv
252.916 295.881 251.025 298.811 251.068 301.859 cv
251.084 303.054 251.332 304.164 251.75 305.094 cv
@
1 lj
255.221 309.712 mo
258.301 309.673 260.779 307.775 260.742 305.007 cv
260.732 303.981 259.963 303.696 259.963 303.696 cv
259.986 304.511 257.83 305.672 255.162 305.716 cv
252.506 305.747 250.316 304.644 250.324 303.822 cv
250.324 303.822 249.561 304.135 249.574 305.168 cv
249.604 307.934 252.137 309.755 255.221 309.712 cv
cp
@
1 lc
0 lj
256.078 309.773 mo
256.096 310.315 256.135 310.437 256.33 310.983 cv
256.529 311.539 256.803 312.019 257.135 312.435 cv
@
0 lc
267.862 318.435 mo
268.872 318.289 270.013 318.355 271.171 318.669 cv
274.108 319.472 276.396 322.097 275.983 323.626 cv
275.927 323.82 276.452 324.074 276.392 324.283 cv
276.339 324.48 275.757 324.431 275.704 324.628 cv
275.294 326.16 271.985 327.259 269.044 326.457 cv
267.89 326.144 266.878 325.625 266.081 324.99 cv
@
1 lj
262.478 320.474 mo
263.284 317.501 265.741 315.576 268.411 316.304 cv
269.401 316.57 269.487 317.386 269.487 317.386 cv
268.704 317.158 267.04 318.958 266.333 321.529 cv
265.638 324.095 266.161 326.492 266.958 326.687 cv
266.958 326.687 266.464 327.351 265.466 327.08 cv
262.796 326.359 261.665 323.449 262.478 320.474 cv
cp
@
1 lc
0 lj
262.632 319.628 mo
262.112 319.478 262.001 319.41 261.522 319.085 cv
261.036 318.753 260.638 318.367 260.317 317.941 cv
@
0 lc
311.561 263.685 mo
312.37 263.064 313.397 262.564 314.561 262.271 cv
317.517 261.535 320.794 262.707 321.184 264.24 cv
321.228 264.437 321.811 264.404 321.86 264.613 cv
321.911 264.812 321.38 265.054 321.431 265.251 cv
321.821 266.789 319.474 269.365 316.515 270.105 cv
315.355 270.396 314.219 270.439 313.213 270.273 cv
@
1 lj
307.862 268.099 mo
307.11 265.111 308.312 262.23 310.997 261.558 cv
311.991 261.306 312.465 261.976 312.465 261.976 cv
311.67 262.16 311.099 264.544 311.74 267.132 cv
312.39 269.71 314.017 271.544 314.808 271.326 cv
314.808 271.326 314.702 272.146 313.699 272.398 cv
311.017 273.076 308.608 271.091 307.862 268.099 cv
cp
@
1 lc
0 lj
307.582 267.287 mo
307.056 267.408 306.926 267.402 306.349 267.353 cv
305.762 267.302 305.226 267.16 304.738 266.945 cv
@
0 lc
285.035 138.199 mo
284.107 137.772 282.996 137.51 281.797 137.482 cv
278.751 137.418 275.812 139.281 275.772 140.864 cv
275.772 141.066 275.195 141.162 275.194 141.377 cv
275.189 141.582 275.76 141.701 275.754 141.905 cv
275.713 143.491 278.57 145.485 281.619 145.553 cv
282.814 145.582 283.933 145.373 284.878 144.989 cv
@
1 lj
289.616 141.688 mo
289.69 138.608 287.883 136.063 285.114 136 cv
284.089 135.972 283.776 136.732 283.776 136.732 cv
284.592 136.736 285.675 138.935 285.621 141.601 cv
285.557 144.257 284.374 146.406 283.555 146.368 cv
283.555 146.368 283.838 147.144 284.871 147.168 cv
287.637 147.237 289.549 144.77 289.616 141.688 cv
cp
@
1 lc
0 lj
289.709 140.833 mo
290.25 140.834 290.375 140.802 290.928 140.626 cv
291.488 140.447 291.98 140.19 292.408 139.874 cv
@
0 lc
306.75 196.013 mo
306.156 195.183 305.32 194.404 304.295 193.783 cv
301.682 192.215 298.205 192.374 297.385 193.73 cv
297.285 193.904 296.736 193.7 296.627 193.888 cv
296.522 194.062 296.959 194.449 296.852 194.624 cv
296.029 195.98 297.52 199.13 300.133 200.703 cv
301.156 201.32 302.23 201.693 303.242 201.83 cv
@
1 lj
308.994 201.316 mo
310.586 198.679 310.281 195.572 307.91 194.143 cv
307.033 193.61 306.385 194.115 306.385 194.115 cv
307.09 194.522 306.939 196.969 305.568 199.257 cv
304.193 201.531 302.102 202.809 301.408 202.37 cv
301.408 202.37 301.27 203.184 302.154 203.716 cv
304.522 205.151 307.406 203.958 308.994 201.316 cv
cp
@
1 lc
0 lj
309.498 200.62 mo
309.969 200.89 310.092 200.923 310.66 201.044 cv
311.236 201.168 311.789 201.189 312.318 201.126 cv
@
0 lc
298.471 128.635 mo
298.362 127.62 298.472 126.483 298.828 125.338 cv
299.742 122.432 302.449 120.244 303.961 120.713 cv
304.152 120.777 304.428 120.262 304.633 120.33 cv
304.828 120.391 304.758 120.969 304.953 121.029 cv
306.469 121.498 307.443 124.844 306.531 127.754 cv
306.175 128.895 305.619 129.888 304.953 130.66 cv
@
1 lj
300.309 134.092 mo
297.367 133.176 295.535 130.648 296.361 128.006 cv
296.664 127.025 297.484 126.973 297.484 126.973 cv
297.227 127.746 298.963 129.477 301.506 130.279 cv
304.043 131.068 306.457 130.637 306.684 129.848 cv
306.684 129.848 307.328 130.365 307.02 131.352 cv
306.199 133.994 303.25 135.016 300.309 134.092 cv
cp
@
1 lc
0 lj
299.47 133.906 mo
299.298 134.419 299.227 134.527 298.883 134.994 cv
298.533 135.469 298.133 135.852 297.695 136.156 cv
@
0 lc
322.427 194.72 mo
322.831 193.782 323.484 192.846 324.357 192.023 cv
326.581 189.941 330.014 189.366 331.101 190.517 cv
331.235 190.667 331.729 190.354 331.874 190.513 cv
332.015 190.662 331.669 191.131 331.81 191.28 cv
332.899 192.433 332.104 195.825 329.88 197.912 cv
329.01 198.732 328.037 199.322 327.078 199.668 cv
@
1 lj
321.347 200.375 mo
319.234 198.132 318.881 195.031 320.898 193.136 cv
321.644 192.43 322.384 192.787 322.384 192.787 cv
321.779 193.334 322.441 195.694 324.263 197.642 cv
326.085 199.578 328.399 200.386 328.984 199.81 cv
328.984 199.81 329.291 200.578 328.538 201.287 cv
326.525 203.185 323.455 202.625 321.347 200.375 cv
cp
@
1 lc
0 lj
320.706 199.802 mo
320.305 200.164 320.189 200.224 319.661 200.46 cv
319.124 200.703 318.587 200.839 318.057 200.89 cv
@
156.449 335.752 mo
169.985 337.909 168.157 336.762 168.161 336.764 cv
168.166 336.766 170.125 336.225 156.785 334.108 cv
143.409 331.762 125.579 324.128 125.579 324.243 cv
125.44 324.399 142.801 333.344 156.449 335.752 cv
f
1.4 lw
0 lc
156.449 335.752 mo
169.985 337.909 168.157 336.762 168.161 336.764 cv
168.166 336.766 170.125 336.225 156.785 334.108 cv
143.409 331.762 125.579 324.128 125.579 324.243 cv
125.44 324.399 142.801 333.344 156.449 335.752 cv
cp
@
93.1876 302.942 mo
103.286 312.194 102.741 309.797 102.603 309.963 cv
102.747 309.803 104.292 310.838 94.3438 301.717 cv
84.2149 292.725 72.9864 277.014 72.8819 277.014 cv
72.584 277.127 82.8672 293.75 93.1876 302.942 cv
f
93.1876 302.942 mo
103.286 312.194 102.741 309.797 102.603 309.963 cv
102.747 309.803 104.292 310.838 94.3438 301.717 cv
84.2149 292.725 72.9864 277.014 72.8819 277.014 cv
72.584 277.127 82.8672 293.75 93.1876 302.942 cv
cp
@
58.0518 246.895 mo
62.7374 259.776 62.918 257.59 62.8965 257.604 cv
62.919 257.6 64.2715 259.075 59.6534 246.383 cv
55.1827 233.567 53.212 214.343 52.9805 214.343 cv
52.7295 214.304 53.5059 233.815 58.0518 246.895 cv
f
58.0518 246.895 mo
62.7374 259.776 62.918 257.59 62.8965 257.604 cv
62.919 257.6 64.2715 259.075 59.6534 246.383 cv
55.1827 233.567 53.212 214.343 52.9805 214.343 cv
52.7295 214.304 53.5059 233.815 58.0518 246.895 cv
cp
@
54.7823 180.414 mo
52.251 193.885 53.9639 192.145 53.7696 192.122 cv
53.96 192.155 53.9307 194.036 56.4288 180.756 cv
58.7461 167.392 66.6006 149.791 66.3926 149.583 cv
66.1407 149.383 57.167 166.778 54.7823 180.414 cv
f
54.7823 180.414 mo
52.251 193.885 53.9639 192.145 53.7696 192.122 cv
53.96 192.155 53.9307 194.036 56.4288 180.756 cv
58.7461 167.392 66.6006 149.791 66.3926 149.583 cv
66.1407 149.383 57.167 166.778 54.7823 180.414 cv
cp
@
84.545 121.219 mo
75.8907 131.848 78.0889 131.043 77.9864 130.974 cv
78.0811 131.051 77.2872 132.793 85.8184 122.318 cv
94.4044 111.816 109.463 99.6426 109.616 99.8379 cv
109.772 99.9947 93.3184 110.516 84.545 121.219 cv
f
84.545 121.219 mo
75.8907 131.848 78.0889 131.043 77.9864 130.974 cv
78.0811 131.051 77.2872 132.793 85.8184 122.318 cv
94.4044 111.816 109.463 99.6426 109.616 99.8379 cv
109.772 99.9947 93.3184 110.516 84.545 121.219 cv
cp
@
3.4016 lw
160.668 335.643 mo
160.638 335.133 161.296 328.473 158.38 326.6 cv
155.816 324.969 155.482 329.542 153.887 329.206 cv
152.044 328.792 151.996 327.182 151.61 324.569 cv
151.355 323.006 151.126 319.452 147.841 318.518 cv
143.397 317.262 144.953 324.086 142.2 324.299 cv
139.739 324.506 140.014 320.59 139.999 317.916 cv
139.979 313.385 138.053 310.622 133.622 311.233 cv
128.586 311.657 133.069 319.657 130.788 320.596 cv
128.644 321.483 127.194 320.084 125.917 317.741 cv
123.167 312.792 117.691 312.907 114.522 317.665 cv
111.272 322.555 114.274 328.184 120.6 327.745 cv
123.46 327.565 125.336 328.159 126.167 330.368 cv
127.185 333.114 116.99 333.413 120.399 338.29 cv
123.664 342.545 128.221 342.241 131.534 339.202 cv
133.621 337.292 135.927 334.647 137.976 336.184 cv
140.398 338.032 134.185 342.407 139.564 344.245 cv
143.635 345.631 145.9 342.858 146.965 341.711 cv
148.726 339.848 149.609 338.268 151.599 338.715 cv
153.309 339.081 151.547 343.352 154.988 342.991 cv
158.904 342.579 160.464 336.104 160.668 335.643 cv
cp
@
100.131 307.545 mo
100.348 307.1 104.094 301.743 102.405 298.858 cv
100.968 296.266 98.5586 299.936 97.3858 298.854 cv
96.0567 297.567 96.8575 296.092 97.7178 293.733 cv
98.2481 292.28 99.6436 289.237 97.25 286.895 cv
94.2217 283.534 92.1553 290.239 89.7901 289.022 cv
87.6993 287.92 89.6192 284.862 90.8858 282.565 cv
92.8399 278.827 92.7813 275.334 88.7032 273.737 cv
84.0342 271.799 84.3126 280.612 81.8272 280.383 cv
79.6045 280.092 78.8838 278.307 78.8399 275.737 cv
79.1192 270.034 74.2471 267.588 69.1905 270.192 cv
64.1544 272.782 64.1729 278.963 69.5196 281.76 cv
72.1221 282.924 73.5918 284.225 73.2139 286.54 cv
72.8594 289.313 63.7403 284.879 64.4864 290.573 cv
65.2422 295.774 69.0079 297.885 73.4815 296.719 cv
76.1749 296.084 79.5938 294.768 80.4981 297.161 cv
81.5918 299.979 74.3311 300.627 77.8692 304.924 cv
80.7081 308.018 84.0821 306.627 85.5411 306.157 cv
87.9981 305.346 89.4385 304.491 90.8731 305.881 cv
92.1319 307.04 88.5127 309.922 91.6475 311.227 cv
95.2832 312.639 99.7344 307.846 100.131 307.545 cv
cp
@
61.6338 254.268 mo
62.045 253.983 67.9463 251.126 68.0284 247.731 cv
68.0879 244.75 64.0948 246.811 63.5655 245.307 cv
62.9766 243.551 64.295 242.69 66.2598 241.038 cv
67.4366 240.024 70.292 238.016 69.4004 234.792 cv
68.1895 230.434 63.2754 235.227 61.6954 233.036 cv
60.2452 231.088 63.6465 229.317 65.8838 227.934 cv
69.6368 225.6 71.0704 222.563 68.1778 219.183 cv
65.2208 215.191 60.919 223.032 58.9678 221.604 cv
57.0235 220.279 57.5294 218.343 58.835 216.072 cv
61.6915 211.233 58.5489 206.718 53.001 206.518 cv
47.2071 206.317 44.2862 211.704 47.7588 216.762 cv
49.3731 219.056 49.7569 220.93 48.4434 222.747 cv
46.6719 224.999 41.1202 216.655 38.8174 221.99 cv
37.0469 226.881 39.5254 230.54 43.7764 231.75 cv
46.4288 232.518 49.8243 233.09 49.6084 235.583 cv
49.2969 238.551 42.4756 235.598 43.6768 241.034 cv
44.5938 245.143 48.0645 245.62 49.5665 245.924 cv
52.043 246.434 53.8174 246.362 54.4512 248.258 cv
55.0176 249.874 50.5508 250.586 52.6016 253.28 cv
54.9415 256.344 61.1465 254.334 61.6338 254.268 cv
cp
@
54.2618 189 mo
54.8155 188.959 61.1299 189.307 62.9317 186.392 cv
64.4747 183.827 59.9737 183.679 60.2666 182.11 cv
60.6153 180.292 62.2452 180.193 64.71 179.694 cv
66.2247 179.382 69.6866 179.015 70.4454 175.756 cv
71.4922 171.357 64.8223 173.133 64.5948 170.476 cv
64.4834 168.132 68.1153 168.179 70.7559 168.066 cv
75.0352 167.808 77.8038 165.873 77.1026 161.586 cv
76.3106 156.593 68.9502 161.429 67.8458 159.191 cv
66.9629 157.159 68.002 155.561 70.3145 154.251 cv
75.2305 151.458 74.7403 146.014 69.9815 143.113 cv
65.0469 140.112 59.8155 143.363 60.3135 149.443 cv
60.5372 152.202 60.3018 154.185 58.0997 155.056 cv
55.5508 156.205 54.5645 146.102 50.1026 149.714 cv
45.9942 153.055 46.336 157.441 49.5918 160.624 cv
51.5206 162.582 54.4073 164.805 52.7979 166.813 cv
50.9942 169.227 46.5206 163.338 44.9405 168.674 cv
43.7706 172.719 46.5811 174.829 47.751 175.827 cv
49.7227 177.494 51.2481 178.284 50.8702 180.246 cv
50.5557 181.928 46.3165 180.376 46.7579 183.718 cv
47.2325 187.52 53.8594 188.827 54.2618 189 cv
cp
@
79.7393 128.253 mo
80.1934 128.451 85.6368 131.936 88.6104 130.254 cv
91.1895 128.751 87.3418 126.422 88.3545 125.188 cv
89.5069 123.737 91.0528 124.515 93.461 125.297 cv
94.9288 125.761 98.1153 127.123 100.34 124.614 cv
103.476 121.349 96.7657 119.626 97.8702 117.196 cv
98.8946 115.071 102.031 116.871 104.382 118.048 cv
108.208 119.872 111.725 119.704 113.086 115.469 cv
114.827 110.719 106.05 111.371 106.185 108.888 cv
106.342 106.598 108.114 105.827 110.779 105.816 cv
116.347 105.641 118.693 100.839 115.9 95.9092 cv
113.097 90.9649 106.823 91.0645 104.386 96.7452 cv
103.229 99.2569 101.975 100.756 99.6895 100.527 cv
96.8985 100.276 100.941 90.9659 95.292 91.9463 cv
90.2002 93.003 88.2129 96.8194 89.5401 101.224 cv
90.2794 103.885 91.7266 107.247 89.3653 108.238 cv
86.6114 109.46 85.5997 102.159 81.5518 105.968 cv
78.5938 108.954 80.0254 112.178 80.5635 113.626 cv
81.4542 116.032 82.3213 117.401 81.0733 118.961 cv
79.9883 120.285 77.0469 116.851 75.8194 120 cv
74.3995 123.569 79.4239 127.868 79.7393 128.253 cv
cp
@
207.287 335.643 mo
207.316 335.133 206.658 328.473 209.574 326.6 cv
212.139 324.969 212.473 329.542 214.067 329.206 cv
215.91 328.792 215.959 327.182 216.345 324.569 cv
216.6 323.006 216.828 319.452 220.113 318.518 cv
224.558 317.262 223.002 324.086 225.755 324.299 cv
228.216 324.506 227.94 320.59 227.956 317.916 cv
227.976 313.385 229.901 310.622 234.333 311.233 cv
239.368 311.657 234.886 319.657 237.167 320.596 cv
239.311 321.483 240.761 320.084 242.038 317.741 cv
244.788 312.792 250.264 312.907 253.433 317.665 cv
256.683 322.555 253.681 328.184 247.354 327.745 cv
244.494 327.565 242.618 328.159 241.787 330.368 cv
240.77 333.114 250.965 333.413 247.556 338.29 cv
244.291 342.545 239.733 342.241 236.421 339.202 cv
234.334 337.292 232.027 334.647 229.979 336.184 cv
227.557 338.032 233.77 342.407 228.391 344.245 cv
224.319 345.631 222.055 342.858 220.989 341.711 cv
219.229 339.848 218.346 338.268 216.355 338.715 cv
214.646 339.081 216.407 343.352 212.967 342.991 cv
209.051 342.579 207.49 336.104 207.287 335.643 cv
cp
@
267.823 307.545 mo
267.606 307.1 263.86 301.743 265.55 298.858 cv
266.986 296.266 269.396 299.936 270.568 298.854 cv
271.897 297.567 271.097 296.092 270.236 293.733 cv
269.706 292.28 268.311 289.237 270.704 286.895 cv
273.732 283.534 275.799 290.239 278.164 289.022 cv
280.255 287.92 278.335 284.862 277.068 282.565 cv
275.114 278.827 275.173 275.334 279.251 273.737 cv
283.92 271.799 283.642 280.612 286.127 280.383 cv
288.35 280.092 289.07 278.307 289.114 275.737 cv
288.835 270.034 293.707 267.588 298.764 270.192 cv
303.8 272.782 303.781 278.963 298.435 281.76 cv
295.832 282.924 294.362 284.225 294.74 286.54 cv
295.095 289.313 304.214 284.879 303.468 290.573 cv
302.712 295.774 298.946 297.885 294.473 296.719 cv
291.779 296.084 288.36 294.768 287.456 297.161 cv
286.362 299.979 293.623 300.627 290.085 304.924 cv
287.246 308.018 283.872 306.627 282.413 306.157 cv
279.956 305.346 278.516 304.491 277.081 305.881 cv
275.822 307.04 279.441 309.922 276.307 311.227 cv
272.671 312.639 268.22 307.846 267.823 307.545 cv
cp
@
306.32 254.268 mo
305.909 253.983 300.008 251.126 299.926 247.731 cv
299.866 244.75 303.859 246.811 304.389 245.307 cv
304.978 243.551 303.659 242.69 301.694 241.038 cv
300.518 240.024 297.662 238.016 298.554 234.792 cv
299.765 230.434 304.679 235.227 306.259 233.036 cv
307.709 231.088 304.308 229.317 302.07 227.934 cv
298.317 225.6 296.884 222.563 299.776 219.183 cv
302.733 215.191 307.035 223.032 308.986 221.604 cv
310.931 220.279 310.425 218.343 309.119 216.072 cv
306.263 211.233 309.405 206.718 314.953 206.518 cv
320.747 206.317 323.668 211.704 320.195 216.762 cv
318.581 219.056 318.197 220.93 319.511 222.747 cv
321.282 224.999 326.834 216.655 329.137 221.99 cv
330.907 226.881 328.429 230.54 324.178 231.75 cv
321.525 232.518 318.13 233.09 318.346 235.583 cv
318.657 238.551 325.479 235.598 324.277 241.034 cv
323.36 245.143 319.89 245.62 318.388 245.924 cv
315.911 246.434 314.137 246.362 313.503 248.258 cv
312.937 249.874 317.403 250.586 315.353 253.28 cv
313.013 256.344 306.808 254.334 306.32 254.268 cv
cp
@
313.692 189 mo
313.139 188.959 306.824 189.307 305.022 186.392 cv
303.48 183.827 307.98 183.679 307.688 182.11 cv
307.339 180.292 305.709 180.193 303.244 179.694 cv
301.73 179.382 298.268 179.015 297.509 175.756 cv
296.462 171.357 303.132 173.133 303.359 170.476 cv
303.471 168.132 299.839 168.179 297.198 168.066 cv
292.919 167.808 290.15 165.873 290.852 161.586 cv
291.644 156.593 299.004 161.429 300.108 159.191 cv
300.991 157.159 299.952 155.561 297.64 154.251 cv
292.724 151.458 293.214 146.014 297.973 143.113 cv
302.907 140.112 308.139 143.363 307.641 149.443 cv
307.417 152.202 307.652 154.185 309.854 155.056 cv
312.403 156.205 313.39 146.102 317.852 149.714 cv
321.96 153.055 321.618 157.441 318.362 160.624 cv
316.434 162.582 313.547 164.805 315.156 166.813 cv
316.96 169.227 321.434 163.338 323.014 168.674 cv
324.184 172.719 321.373 174.829 320.203 175.827 cv
318.231 177.494 316.706 178.284 317.084 180.246 cv
317.398 181.928 321.638 180.376 321.196 183.718 cv
320.722 187.52 314.095 188.827 313.692 189 cv
cp
@
288.215 128.253 mo
287.761 128.451 282.317 131.936 279.344 130.254 cv
276.765 128.751 280.612 126.422 279.6 125.188 cv
278.447 123.737 276.901 124.515 274.493 125.297 cv
273.025 125.761 269.839 127.123 267.614 124.614 cv
264.479 121.349 271.188 119.626 270.084 117.196 cv
269.06 115.071 265.924 116.871 263.572 118.048 cv
259.747 119.872 256.23 119.704 254.868 115.469 cv
253.128 110.719 261.904 111.371 261.77 108.888 cv
261.612 106.598 259.841 105.827 257.176 105.816 cv
251.607 105.641 249.262 100.839 252.055 95.9092 cv
254.857 90.9649 261.132 91.0645 263.568 96.7452 cv
264.726 99.2569 265.98 100.756 268.265 100.527 cv
271.056 100.276 267.014 90.9659 272.662 91.9463 cv
277.754 93.003 279.741 96.8194 278.414 101.224 cv
277.675 103.885 276.228 107.247 278.589 108.238 cv
281.343 109.46 282.354 102.159 286.402 105.968 cv
289.36 108.954 287.929 112.178 287.391 113.626 cv
286.5 116.032 285.633 117.401 286.881 118.961 cv
287.966 120.285 290.907 116.851 292.135 120 cv
293.555 123.569 288.53 127.868 288.215 128.253 cv
cp
@
211.506 335.752 mo
197.97 337.909 199.798 336.762 199.794 336.764 cv
199.789 336.766 197.83 336.225 211.17 334.108 cv
224.546 331.762 242.376 324.128 242.376 324.243 cv
242.515 324.399 225.153 333.344 211.506 335.752 cv
f
1.4 lw
211.506 335.752 mo
197.97 337.909 199.798 336.762 199.794 336.764 cv
199.789 336.766 197.83 336.225 211.17 334.108 cv
224.546 331.762 242.376 324.128 242.376 324.243 cv
242.515 324.399 225.153 333.344 211.506 335.752 cv
cp
@
274.767 302.942 mo
264.669 312.194 265.214 309.797 265.352 309.963 cv
265.208 309.803 263.662 310.838 273.61 301.717 cv
283.739 292.725 294.968 277.014 295.072 277.014 cv
295.37 277.127 285.087 293.75 274.767 302.942 cv
f
274.767 302.942 mo
264.669 312.194 265.214 309.797 265.352 309.963 cv
265.208 309.803 263.662 310.838 273.61 301.717 cv
283.739 292.725 294.968 277.014 295.072 277.014 cv
295.37 277.127 285.087 293.75 274.767 302.942 cv
cp
@
309.902 246.895 mo
305.217 259.776 305.036 257.59 305.058 257.604 cv
305.035 257.6 303.683 259.075 308.301 246.383 cv
312.772 233.567 314.742 214.343 314.974 214.343 cv
315.225 214.304 314.448 233.815 309.902 246.895 cv
f
309.902 246.895 mo
305.217 259.776 305.036 257.59 305.058 257.604 cv
305.035 257.6 303.683 259.075 308.301 246.383 cv
312.772 233.567 314.742 214.343 314.974 214.343 cv
315.225 214.304 314.448 233.815 309.902 246.895 cv
cp
@
313.172 180.414 mo
315.703 193.885 313.99 192.145 314.185 192.122 cv
313.994 192.155 314.023 194.036 311.525 180.756 cv
309.208 167.392 301.354 149.791 301.562 149.583 cv
301.814 149.383 310.787 166.778 313.172 180.414 cv
f
313.172 180.414 mo
315.703 193.885 313.99 192.145 314.185 192.122 cv
313.994 192.155 314.023 194.036 311.525 180.756 cv
309.208 167.392 301.354 149.791 301.562 149.583 cv
301.814 149.383 310.787 166.778 313.172 180.414 cv
cp
@
283.409 121.219 mo
292.064 131.848 289.865 131.043 289.968 130.974 cv
289.873 131.051 290.667 132.793 282.136 122.318 cv
273.55 111.816 258.491 99.6426 258.339 99.8379 cv
258.182 99.9947 274.636 110.516 283.409 121.219 cv
f
283.409 121.219 mo
292.064 131.848 289.865 131.043 289.968 130.974 cv
289.873 131.051 290.667 132.793 282.136 122.318 cv
273.55 111.816 258.491 99.6426 258.339 99.8379 cv
258.182 99.9947 274.636 110.516 283.409 121.219 cv
cp
@
23.918 409.969 mo
30.7911 409.969 li
23.5699 419.191 li
31.3711 430.907 li
24.1788 430.907 li
17.2769 419.771 li
17.2188 419.771 li
17.2188 430.907 li
11.419 430.907 li
11.419 409.969 li
17.2188 409.969 li
17.2188 419.162 li
17.2769 419.162 li
23.918 409.969 li
0 0 0 1 cmyk
f
41.2891 414.029 mo
34.8799 414.029 li
34.8799 409.969 li
53.6431 409.969 li
53.6431 414.029 li
47.0889 414.029 li
47.0889 430.907 li
41.2891 430.907 li
41.2891 414.029 li
f
58.7466 430.907 mo
58.7466 409.969 li
64.5757 409.969 li
64.5757 418.263 li
71.6807 418.263 li
71.6807 409.969 li
77.4805 409.969 li
77.4805 430.907 li
71.6807 430.907 li
71.6807 422.323 li
64.5469 422.323 li
64.5469 430.907 li
58.7466 430.907 li
f
102.595 426.847 mo
105.321 426.847 li
108.482 426.847 111.469 424.758 111.469 420.438 cv
111.469 416.117 108.482 414.029 105.321 414.029 cv
102.595 414.029 li
102.595 426.847 li
cp
105.64 409.969 mo
112.832 409.969 117.559 412.695 117.559 420.438 cv
117.559 428.181 112.832 430.907 105.64 430.907 cv
96.7945 430.907 li
96.7945 409.969 li
105.64 409.969 li
f
130.058 428.152 mo
132.436 428.152 132.639 425.918 132.639 423.976 cv
131.479 423.976 130.377 423.918 129.623 424.294 cv
128.811 424.701 128.173 425.223 128.173 426.238 cv
128.173 427.282 129.014 428.152 130.058 428.152 cv
cp
132.842 430.907 mo
132.726 430.443 132.726 429.979 132.726 428.935 cv
132.668 428.935 li
132.001 429.979 130.754 431.341 128.028 431.341 cv
124.577 431.341 122.779 429.486 122.837 426.499 cv
122.895 422.96 126.143 421.511 130.899 421.511 cv
132.639 421.511 li
132.639 420.235 132.929 418.378 130.725 418.465 cv
129.391 418.524 128.956 419.829 128.985 420.699 cv
123.794 420.699 li
123.765 418.64 124.838 417.451 126.317 416.784 cv
127.825 416.087 129.71 415.914 131.334 415.914 cv
134.292 415.914 137.859 417.161 137.801 420.438 cv
137.801 427.919 li
137.801 428.529 137.917 429.166 138.12 430.907 cv
132.842 430.907 li
f
145.747 416.349 mo
145.747 414.145 li
151.256 412.057 li
151.256 416.349 li
154.446 416.349 li
154.446 419.829 li
151.256 419.829 li
151.256 425.6 li
151.256 425.977 151.024 427.862 152.3 427.862 cv
153.025 427.862 153.779 427.862 154.418 427.775 cv
154.418 431.051 li
153.17 431.284 152.272 431.341 151.459 431.341 cv
147.719 431.341 145.457 430.82 145.747 426.354 cv
145.747 419.829 li
142.905 419.829 li
142.905 416.349 li
145.747 416.349 li
f
166.452 428.152 mo
168.83 428.152 169.033 425.918 169.033 423.976 cv
167.873 423.976 166.771 423.918 166.017 424.294 cv
165.205 424.701 164.567 425.223 164.567 426.238 cv
164.567 427.282 165.408 428.152 166.452 428.152 cv
cp
169.236 430.907 mo
169.12 430.443 169.12 429.979 169.12 428.935 cv
169.062 428.935 li
168.395 429.979 167.148 431.341 164.422 431.341 cv
160.971 431.341 159.173 429.486 159.231 426.499 cv
159.289 422.96 162.537 421.511 167.293 421.511 cv
169.033 421.511 li
169.033 420.235 169.323 418.378 167.119 418.465 cv
165.785 418.524 165.35 419.829 165.379 420.699 cv
160.188 420.699 li
160.159 418.64 161.232 417.451 162.711 416.784 cv
164.219 416.087 166.104 415.914 167.728 415.914 cv
170.686 415.914 174.253 417.161 174.195 420.438 cv
174.195 427.919 li
174.195 428.529 174.311 429.166 174.514 430.907 cv
169.236 430.907 li
f
184.722 430.907 mo
179.183 416.349 li
185.041 416.349 li
187.912 426.557 li
187.97 426.557 li
191.044 416.349 li
196.178 416.349 li
190.667 430.907 li
184.722 430.907 li
f
210.706 421.772 mo
210.706 420.989 210.475 420.206 210.039 419.597 cv
209.604 418.988 208.966 418.611 208.125 418.668 cv
206.211 418.755 205.747 420.119 205.603 421.772 cv
210.706 421.772 li
cp
205.486 424.73 mo
205.457 426.615 205.95 428.239 208.009 428.239 cv
209.546 428.239 210.503 427.514 210.706 426.151 cv
215.811 426.151 li
215.636 428.036 214.447 429.399 213.055 430.21 cv
211.779 431.023 210.155 431.341 208.444 431.341 cv
202.615 431.341 200.295 428.848 200.295 423.135 cv
200.295 418.524 203.746 415.914 208.125 415.914 cv
214.041 415.914 215.926 419.307 215.926 424.73 cv
205.486 424.73 li
f
223.146 416.349 mo
223.146 414.145 li
228.657 412.057 li
228.657 416.349 li
231.847 416.349 li
231.847 419.829 li
228.657 419.829 li
228.657 425.6 li
228.657 425.977 228.425 427.862 229.701 427.862 cv
230.426 427.862 231.18 427.862 231.818 427.775 cv
231.818 431.051 li
230.571 431.284 229.672 431.341 228.86 431.341 cv
225.119 431.341 222.857 430.82 223.146 426.354 cv
223.146 419.829 li
220.305 419.829 li
220.305 416.349 li
223.146 416.349 li
f
247.101 421.772 mo
247.101 420.989 246.868 420.206 246.434 419.597 cv
245.998 418.988 245.36 418.611 244.52 418.668 cv
242.605 418.755 242.142 420.119 241.996 421.772 cv
247.101 421.772 li
cp
241.881 424.73 mo
241.852 426.615 242.345 428.239 244.403 428.239 cv
245.94 428.239 246.897 427.514 247.101 426.151 cv
252.204 426.151 li
252.03 428.036 250.842 429.399 249.449 430.21 cv
248.174 431.023 246.55 431.341 244.839 431.341 cv
239.01 431.341 236.689 428.848 236.689 423.135 cv
236.689 418.524 240.141 415.914 244.52 415.914 cv
250.436 415.914 252.32 419.307 252.32 424.73 cv
241.881 424.73 li
f
263.746 417.944 mo
264.993 416.494 266.443 415.914 268.299 415.914 cv
271.432 415.914 273.751 417.944 273.751 421.163 cv
273.751 430.907 li
268.241 430.907 li
268.241 422.352 li
268.184 420.931 267.835 419.394 266.124 419.394 cv
263.398 419.394 263.746 422.38 263.746 422.555 cv
263.746 430.907 li
258.236 430.907 li
258.236 420.089 li
258.236 418.785 258.207 417.915 258.063 416.349 cv
263.659 416.349 li
263.746 417.944 li
f
288.164 420.844 mo
288.164 420.351 288.077 419.916 287.816 419.626 cv
287.526 419.307 287.062 419.104 286.308 419.104 cv
285.496 419.104 285.003 419.568 285.003 420.409 cv
285.003 421.482 287.236 421.423 290.688 422.497 cv
292.427 423.047 293.616 424.121 293.616 426.499 cv
293.616 430.356 289.991 431.341 286.656 431.341 cv
283.089 431.341 279.609 430.617 279.638 426.18 cv
284.858 426.18 li
284.772 426.615 284.916 427.108 285.235 427.485 cv
285.554 427.862 286.018 428.152 286.54 428.152 cv
287.613 428.152 288.396 427.746 288.396 426.818 cv
288.396 424.237 279.783 425.774 279.783 420.496 cv
279.783 416.9 283.611 415.914 286.511 415.914 cv
289.962 415.914 293.152 416.813 293.384 420.844 cv
288.164 420.844 li
f
304.955 422.787 mo
309.972 416.349 li
315.975 416.349 li
311.045 422.468 li
316.7 430.907 li
310.175 430.907 li
304.955 422.787 li
cp
299.445 430.907 mo
299.445 409.969 li
304.955 409.969 li
304.955 430.907 li
299.445 430.907 li
f
327.865 428.152 mo
330.243 428.152 330.446 425.918 330.446 423.976 cv
329.286 423.976 328.184 423.918 327.43 424.294 cv
326.618 424.701 325.98 425.223 325.98 426.238 cv
325.98 427.282 326.821 428.152 327.865 428.152 cv
cp
330.648 430.907 mo
330.533 430.443 330.533 429.979 330.533 428.935 cv
330.475 428.935 li
329.808 429.979 328.561 431.341 325.835 431.341 cv
322.384 431.341 320.586 429.486 320.644 426.499 cv
320.702 422.96 323.95 421.511 328.706 421.511 cv
330.446 421.511 li
330.446 420.235 330.735 418.378 328.532 418.465 cv
327.198 418.524 326.763 419.829 326.792 420.699 cv
321.601 420.699 li
321.572 418.64 322.645 417.451 324.124 416.784 cv
325.632 416.087 327.517 415.914 329.141 415.914 cv
332.099 415.914 335.666 417.161 335.607 420.438 cv
335.607 427.919 li
335.607 428.529 335.724 429.166 335.927 430.907 cv
330.648 430.907 li
f
347.353 423.627 mo
347.353 425.484 347.7 428.152 350.021 428.152 cv
352.341 428.152 352.688 425.484 352.688 423.627 cv
352.688 421.772 352.341 419.104 350.021 419.104 cv
347.7 419.104 347.353 421.772 347.353 423.627 cv
cp
347.353 418.408 mo
347.41 418.408 li
348.513 416.697 349.991 415.914 352.138 415.914 cv
356.459 415.914 358.344 419.597 358.344 423.424 cv
358.344 427.688 356.197 431.341 351.528 431.341 cv
349.904 431.341 348.426 430.443 347.41 429.166 cv
347.353 429.166 li
347.353 436.475 li
341.843 436.475 li
341.843 416.349 li
347.353 416.349 li
347.353 418.408 li
f
16.4649 462.952 mo
18.7852 462.952 19.2779 460.487 19.2779 458.428 cv
19.2779 456.369 18.7852 453.904 16.4649 453.904 cv
14.1451 453.904 13.6519 456.369 13.6519 458.428 cv
13.6519 460.487 14.1451 462.952 16.4649 462.952 cv
cp
24.9332 458.428 mo
24.9332 463.792 21.0181 466.142 16.4649 466.142 cv
11.9122 466.142 7.99708 463.792 7.99708 458.428 cv
7.99708 453.063 11.9122 450.713 16.4649 450.713 cv
21.0181 450.713 24.9332 453.063 24.9332 458.428 cv
f
40.0997 456.252 mo
40.0997 455.528 39.9839 454.948 39.6646 454.542 cv
39.3458 454.136 38.795 453.904 37.9537 453.904 cv
35.9527 453.904 35.837 456.919 35.837 458.428 cv
35.837 459.936 35.9527 462.952 37.9537 462.952 cv
39.8677 462.807 40.0997 461.328 40.0997 460.023 cv
45.6099 460.023 li
45.6099 462.082 44.7105 463.589 43.3477 464.605 cv
41.9556 465.59 40.0997 466.084 38.1856 466.142 cv
32.6758 466.142 30.1817 463.474 30.1817 458.428 cv
30.1817 453.15 33.8067 450.713 38.1856 450.713 cv
41.8687 450.656 45.3487 452.106 45.6099 456.252 cv
40.0997 456.252 li
f
51.4385 465.707 mo
51.4385 444.769 li
56.9488 444.769 li
56.9488 452.744 li
58.1954 451.293 59.6456 450.713 61.5015 450.713 cv
64.6334 450.713 66.9537 452.744 66.9537 455.962 cv
66.9537 465.707 li
61.4434 465.707 li
61.4434 457.152 li
61.3853 455.731 61.0376 454.194 59.3267 454.194 cv
56.6006 454.194 56.9488 457.181 56.9488 457.355 cv
56.9488 465.707 li
51.4385 465.707 li
f
91.8062 457.586 mo
96.8233 451.149 li
102.827 451.149 li
97.896 457.268 li
103.551 465.707 li
97.0259 465.707 li
91.8062 457.586 li
cp
86.296 465.707 mo
86.296 444.769 li
91.8062 444.769 li
91.8062 465.707 li
86.296 465.707 li
f
116.253 462.952 mo
118.573 462.952 119.066 460.487 119.066 458.428 cv
119.066 456.369 118.573 453.904 116.253 453.904 cv
113.933 453.904 113.44 456.369 113.44 458.428 cv
113.44 460.487 113.933 462.952 116.253 462.952 cv
cp
124.721 458.428 mo
124.721 463.792 120.806 466.142 116.253 466.142 cv
111.7 466.142 107.785 463.792 107.785 458.428 cv
107.785 453.063 111.7 450.713 116.253 450.713 cv
120.806 450.713 124.721 453.063 124.721 458.428 cv
f
135.799 453.556 mo
135.857 453.556 li
136.872 451.555 138.786 450.801 140.961 450.801 cv
142.73 450.801 144.731 451.729 145.34 453.498 cv
146.326 451.758 148.327 450.772 150.502 450.713 cv
153.634 450.713 155.954 452.744 155.954 455.962 cv
155.954 465.707 li
150.444 465.707 li
150.444 457.152 li
150.386 455.731 150.038 454.194 148.327 454.194 cv
145.601 454.194 145.949 457.181 145.949 457.355 cv
145.949 465.707 li
140.439 465.707 li
140.439 457.152 li
140.381 455.731 140.033 454.194 138.322 454.194 cv
135.596 454.194 135.944 457.181 135.944 457.355 cv
135.944 465.707 li
130.434 465.707 li
130.434 454.89 li
130.434 453.584 130.405 452.714 130.26 451.149 cv
135.712 451.149 li
135.799 453.556 li
f
167.699 453.556 mo
167.757 453.556 li
168.772 451.555 170.686 450.801 172.861 450.801 cv
174.63 450.801 176.631 451.729 177.24 453.498 cv
178.226 451.758 180.227 450.772 182.402 450.713 cv
185.534 450.713 187.854 452.744 187.854 455.962 cv
187.854 465.707 li
182.344 465.707 li
182.344 457.152 li
182.286 455.731 181.938 454.194 180.227 454.194 cv
177.501 454.194 177.849 457.181 177.849 457.355 cv
177.849 465.707 li
172.339 465.707 li
172.339 457.152 li
172.281 455.731 171.933 454.194 170.222 454.194 cv
167.496 454.194 167.844 457.181 167.844 457.355 cv
167.844 465.707 li
162.334 465.707 li
162.334 454.89 li
162.334 453.584 162.305 452.714 162.16 451.149 cv
167.612 451.149 li
167.699 453.556 li
f
204.414 464.112 mo
203.167 465.562 201.717 466.142 199.86 466.142 cv
196.729 466.142 194.408 464.112 194.408 460.893 cv
194.408 451.149 li
199.919 451.149 li
199.919 459.704 li
199.977 461.125 200.324 462.662 202.035 462.662 cv
204.762 462.662 204.414 459.674 204.414 459.5 cv
204.414 451.149 li
209.924 451.149 li
209.924 461.965 li
209.924 463.271 209.952 464.141 210.098 465.707 cv
204.501 465.707 li
204.414 464.112 li
f
222.161 452.744 mo
223.408 451.293 224.858 450.713 226.714 450.713 cv
229.847 450.713 232.166 452.744 232.166 455.962 cv
232.166 465.707 li
226.656 465.707 li
226.656 457.152 li
226.599 455.731 226.25 454.194 224.539 454.194 cv
221.813 454.194 222.161 457.181 222.161 457.355 cv
222.161 465.707 li
216.651 465.707 li
216.651 454.89 li
216.651 453.584 216.622 452.714 216.478 451.149 cv
222.074 451.149 li
222.161 452.744 li
f
239.068 465.707 mo
239.068 451.149 li
244.578 451.149 li
244.578 465.707 li
239.068 465.707 li
cp
239.039 448.655 mo
239.039 444.769 li
244.607 444.769 li
244.607 448.655 li
239.039 448.655 li
f
257.019 457.586 mo
262.036 451.149 li
268.039 451.149 li
263.109 457.268 li
268.764 465.707 li
262.239 465.707 li
257.019 457.586 li
cp
251.509 465.707 mo
251.509 444.769 li
257.019 444.769 li
257.019 465.707 li
251.509 465.707 li
f
279.929 462.952 mo
282.307 462.952 282.51 460.719 282.51 458.776 cv
281.35 458.776 280.248 458.717 279.494 459.095 cv
278.682 459.5 278.044 460.023 278.044 461.038 cv
278.044 462.082 278.885 462.952 279.929 462.952 cv
cp
282.713 465.707 mo
282.597 465.243 282.597 464.779 282.597 463.735 cv
282.539 463.735 li
281.872 464.779 280.625 466.142 277.898 466.142 cv
274.447 466.142 272.649 464.286 272.708 461.298 cv
272.766 457.761 276.014 456.311 280.77 456.311 cv
282.51 456.311 li
282.51 455.035 282.8 453.179 280.596 453.266 cv
279.262 453.324 278.827 454.628 278.855 455.499 cv
273.665 455.499 li
273.636 453.44 274.709 452.25 276.188 451.584 cv
277.695 450.888 279.581 450.713 281.205 450.713 cv
284.163 450.713 287.73 451.96 287.672 455.238 cv
287.672 462.72 li
287.672 463.329 287.788 463.966 287.99 465.707 cv
282.713 465.707 li
f
295.502 451.149 mo
295.502 448.945 li
301.012 446.857 li
301.012 451.149 li
304.201 451.149 li
304.201 454.628 li
301.012 454.628 li
301.012 460.4 li
301.012 460.777 300.779 462.662 302.056 462.662 cv
302.78 462.662 303.534 462.662 304.173 462.575 cv
304.173 465.852 li
302.926 466.084 302.026 466.142 301.215 466.142 cv
297.474 466.142 295.212 465.62 295.502 461.154 cv
295.502 454.628 li
292.659 454.628 li
292.659 451.149 li
295.502 451.149 li
f
310.146 465.707 mo
310.146 451.149 li
315.656 451.149 li
315.656 465.707 li
310.146 465.707 li
cp
310.117 448.655 mo
310.117 444.769 li
315.685 444.769 li
315.685 448.655 li
310.117 448.655 li
f
330.243 462.952 mo
332.562 462.952 333.056 460.487 333.056 458.428 cv
333.056 456.369 332.562 453.904 330.243 453.904 cv
327.923 453.904 327.43 456.369 327.43 458.428 cv
327.43 460.487 327.923 462.952 330.243 462.952 cv
cp
338.711 458.428 mo
338.711 463.792 334.796 466.142 330.243 466.142 cv
325.689 466.142 321.774 463.792 321.774 458.428 cv
321.774 453.063 325.689 450.713 330.243 450.713 cv
334.796 450.713 338.711 453.063 338.711 458.428 cv
f
349.991 452.744 mo
351.238 451.293 352.688 450.713 354.545 450.713 cv
357.677 450.713 359.996 452.744 359.996 455.962 cv
359.996 465.707 li
354.486 465.707 li
354.486 457.152 li
354.429 455.731 354.08 454.194 352.369 454.194 cv
349.644 454.194 349.991 457.181 349.991 457.355 cv
349.991 465.707 li
344.481 465.707 li
344.481 454.89 li
344.481 453.584 344.453 452.714 344.308 451.149 cv
349.904 451.149 li
349.991 452.744 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 11.0
%%AI8_CreatorVersion: 11.0.0
%%For: (oscard) (Intellecta)
%%Title: (kth_pms_datavet_komm.eps)
%%CreationDate: 05-02-27 22.46
%AI9_DataStream
%Gb!!kG@0pddQ%0;!T&I--n$3kNf?;[%2B%nV26Tpb.5j/s7j;$B4iT]7RB"hhtp[17p7fTAp4$p`okMUVYt,)hp)c3SR%(A1+UaO
%C*fHDY9`.JO3`%*\SdDOD8JUp.R:mj,TS+h;rL\2OX,.h_L`=pP1ucuA(k_k-fraKd2J&RKC3,(cE?6?[Do\r-_;U?jA*01%n=7d
%A;,+-^W#&CZ^Ys:h9)nIchR*'^X8T1>@hhrX*N,<QcF%gogV/I>*B8\)sKMc)n7RB:Bis?Y.lMo<%fn^.mbSK==N%^"A%"Yq88W'
%)7b5C&rrkj,36N+%Jg7E*VeOlFPU\U`fj887&KMf^j0!c]j\B.Bi2)@R8c/N&f2bQ<VKX18UuB-NJ=2_Jq0d2Ni!HRPsed]$W2M8
%[#bTl@Ym(Qf>-/;=/Y^Ufp-RYJQG!sAV@6HRT)?J9)tC$,f2m*TI1b@L=>B\)R!LD]<0IT^GA0kM'j2-iI'!gFieaU?K>u5J/b3^
%UWP[oNt&+s;7e\/HXtKo:-+#VFsS/+/mV.tV:pE&,AhtS@B3`UgsR'q@`_"tSu,/=j+g/b9m0MnQ<m,h"KH/C>-]"LF_LW,]gH/R
%',r,a&6("2iH!F^GP]u@Bc+lrE]!&<[7ues<mpb0f+LjEr\EgNVb:&SRC)h5oM]\YcY9T>YB@EA"EB#<13YKgStNeNeL!-T21i%,
%b&Qb)/,B3=@$a@(^K:nNP=^#DADjjl@)']jn/dM(eQ<6_`aX0-nAt#i-D=Ep$/^n;BU)7XX(5+o=eD)j[)ljO9nrRu]/(=<Q,u9A
%p]ReIW_e4HK`^%4.);*7!SYUM>a=D]'(2&s\1YsL&'c$TMt=asnLE>9Y/aum+1soj=;/>6.p*Hh.:.WA_(2mD'u;E%Rm@,EKf-[s
%I"N0M/+eL6_Ob1)n-\K9GPDp("CiW4EI;F'l[i2O,KoQq_[js2@>n#N.)@FjM(?X"j4nWl3',9RiJ=nWJ'\PR#HuJf@LuV#f+;H]
%%]s,e%)W>c]GK-(YOE!%L\QX+S2pKKYL!X-#HrqPga*5-*$7X\HN7['p(,%Yc4?TYXUo@Y0">ql4j4o/L#ZXg$t%Y=rI[#43jphQ
%F`9:B)R%$Si"]GSreC(h9^lA5Kf6.rO,r[E7QUl9*!(7BgV[j2Yh]L>a.7g/J^FY=.Dd*<LJZ$2&T0:DL(UjPS3+)eULWb;5@2B[
%3-1lhgs(XrKFRVtdsnlW2/:0Y4?c6:)J(W_BmUqG2r")\re%hj4iAaS__QkML'O(XK-]6S6%dFIc'OEJrSjBqBS?A;GN=WYje![R
%(%!%A`T-`!HcLUW?Qt'9B^b^LQ,<"D48qmNnU!=A`_J&a6kQV9n+\Q.a7%_Drq#n1$%L@ZnR&PWhmI\+(K(2U56ou[/)h;YZZ#V6
%egJBDnH;.[7/g*PhT6Ten'Jh5],/,DDsVR.P);f]Ik\>0<N!V3gUkE]]YbZD^GDf?ecVK=+,ruqoaelDON!/$s"bK*1]ITC#dQ^/
%3E;=*7/W[N:a^'2$Y/FG3Y%B:O-Z+k2IO^RV`MN_:l1Q2'uc-^otM?5(OEj:(p#2e>TDY(Ya,3#A-pVJQj3C2>iQof@rD"OH`-u.
%"+DD*`&)..@Tptenc.bh1J=k3b*%EKZ'7PV7XGpXee0/KPq4gO%jtTjC4qo$$@]pHR#]'sU9BE1%'EB"'2&.sYph&BX`;UP-*ZPF
%U551."'0rD:i=Z];Ci,)QE_HmdE@kdDQu&@C4I&;"n4\1iQA<r3.`m<h1/#2+l/EfqB]U0afXID&j[jC;g'2/2!N`H>[nA]$B.G'
%$LT#J:amsuGGX=6CJ0h#DPb'1e-MYoF<sg/!uumY3#rb8*u[#qfVEYK[*/Mg_3HS[@sY\n\1A4+QmY:p,/aT"R&lWYU7rH=E_E[*
%PDDrO)l'asb-=C?AV=5J%Xa?%&AZnWqE!mX5^D^6!S0tK.%EIi[1Ld(E\QWdD=P^\KJeAt_H\@re#7ps'#c63'Cc=.f=2/m?\TO&
%559JA0+ju3b%R/-%Ym+U^CsA*7_Sk>=:;]E,X"oOEIKLXIca[ObH2aOm-(DQk)B(,-X^c5lS>\GW@p]WGA*,ifjF6:@dho(PY&"7
%?jrt:2'\o@S2JY+C)4s="sk0qLV8=f:).cP_2:c6)1#GE^1X\CCX7R/q4VmsrBd;`"BfLQF=*Y,i"%MkOCB>b9m:+Z)S_W4HG6^F
%`dg:kh%V@Rf#S.r7<0]/)AK9(cjbD!`*gV/++t\3]*J72Nq!L;XC>t*gp3&PoFJGeIYODK=s2*P&Vn]sKS$H;i!KAoA,+(uPtmuI
%89HO&5JnNfZHP._4#po='"f,!C'9d9ahYFemYZHG1*&8=\=P6?i\9Op&cU6ZMhr;;9_bDs=>@1P5t;-^.Or"mm6/@F1YAZFY5%`A
%C2t@;bRSk,N/D_;E.\$7b"+Uu7T^I0<J#6RjW3bY/s!&22-^GJ"hBqL3GDAo56ll;HtgR/DX@sX&&83XJhtbqDHmG<J0Tfibi8bi
%>f\/RIqD3Nnk5O77/9@l[2r'6i;[la)2(/+hCsI(^_+R%AX1P=81Ccakks[?UFd/+g:[1<DPT=9%"^!["`Qbhdr6CDMR,,0puY4!
%hOOun99aG";p%SS:XUqN(.BF"X+qDiPou)D>d<t<G<N*jDZ]o7@g!];.H_IJ3%MRX#?haj?`+a=U\dI,g5PnkSUaj!Hc_^+J]GUL
%@.*0^J^:S";5T8/<4;)>MT5EKG/Tc8#+Z$$PK9EicD(VH;lJ4gjZ4gk7u3#o1Q-Ks@k5g1;aJ-lQA1hIN6!g\OKmFJ@I?lpZQ:&B
%&EGi^jL@rh9YneN4da95`YNmnE!N,PKru[)4%O=eZ+7[fj6C`G):0=b6@lU*O#\_iAp.nr-lf<1`"n:9>Q[!tH*?g9W;X>JCb#69
%^b#P5-llaRBH@c_Z(3nKT\'YZ73@,0%Qt1T0C0Lm(leT3_n@^2**<n8G)3PSA_O+TB$$b_bHSoP-19Z'.26t6q48;R4<2E(O^#nb
%d=rC8(Wd-1ItobU<<;5IAcPoni.SQ4Q%#VdXTuNI0THlR3QVp5GAV.5/!a_[&Y'(:KlV0"C*OuZMDgnh?M':d9VVN%Wd,dF;+`n*
%D/3KUb6^<YW)93g%9e=W5?Q_"6mW?3oT+8_W*M_S;-bG52&lp94.RMH819dkAP^+nk3Z";M\Bi_+a5eQ&Zg2-HGPtUN*28t76Ar3
%la9'f?^S!P4j[O^BYj,do3*+Uoe#I:atWja27@=E.-7N3noK`tbg7"mF3mj?)Ra,8U9;[e\J^ooXC,5Rgl]qoci!40=jl3s-ecb&
%*6UTcMI.`J-bgK?[)SKK]KQtR#&FZg)ji50JpR>MSAIGU1TXs`RGgHU-sd9K^\T>]qh*9n(XULQDQhaj"U-B.d9Zr*63!&+<DZmD
%DaaMtIB7_I!=FcXE*\E+']1sZ2jpRM]+\QuW;_*4Th+.dS'ClEf!Eu(f'Ks_YE4S=+=AqRTsKX8h-_PnYHk)U_iW`$B%U!EK-j]9
%\CH&'H2uKJ0qQ7p]iGuVQ!4kn-u)o(;.j@hT"ZMg(=3qga_[#W2oC19$=_3R]<Y((EX]L_/2Q/t:a'krfeJJug:2%):Jo85hh7iP
%#A/ZrL\\6/inZpfii:446YeKd&-qDhJDH2pg?l:.I_d<&n&98O@bbp'gI#nj/F09Dp)W+1--+C4Mirbl@;k:U%<?Y*B7[C`FD`<(
%B6=Ube2#+/72[gmN@i/J,LS^"A<!^5*'$%Nf&.o+g-TNX?P%Mj=C.-7bid*M%!kg5>I*Qa=i+iFP=F,MSPb<u*`I6U1+'_NSBsAG
%\/Vt@b`9da41R5,1"6k5MU(gi.\&1]I:,[cbmIrM:2$FTUGRY91"p),V9E/!3k.&eB&sg'.B,fmJMITnL19\sBR?3'&l;qsd:,'.
%BTu[=L%<;:m2]]Eb]f,^#glP!=^d6E9k.$L[Y%\bJL.`MPXb?`A#jgn(=PBXBoC7[L7/cr91:aCE!L0h7<oQ+!t$fAf9gWB&7`jT
%<4`PnAs>>K*7>t](klG;:3S"<5-<MJ(>o2#:unU7Ip1=,eIDd&JD%_p3/`;*>EQV!jshgG$f7:`O`&)So>b>L:@A3ant,'Vn9;:B
%U1p(:AFO$uhp)H1^3^f5UM/<,\#&gcMBt,OUf)eR/LBDrGaIB1MLAOGem4\X4lb(cEQej,>\iRT\+CM)=b;)*lW-c1bI=,J).PLt
%C`c)3WFb>K9.AXl@M-H0*Gd%BgqLDn.gcV0A)+n<CjWo15Xh?q!#SokL:_8\+m5VAMU=RtLFlM@)7;UCH&#KSnc\#SL)lf&^!Cdh
%e;;R[DiE"N/(GR].DA9:H2q\N-/*\iDRSmcC6&,'(iMiih249r@k4ZLg6hmIrM^Bm%YcuV^hEruhLHRQ7n0O$[;GD::e@3EhM$$F
%d7c#%;%bU#*]UeeUQAmm2)'nDR`T0ki_A'oV32PQfWc^eTq\BD`dENjK$5W)<C0sN4@L!#8nM]S/R-^;:hl\jJAs.g,*fRc4!*#:
%6SZ/=rK6@#auC.NC;U?(J0=IkX(!;X=Z&lr!+qUg_3bqLZenTB!`'OGGUlY8'[%-;4T3@ed'>FU(i!K2U@VT'nSDOoIAuU5e4rkY
%O\'+rG;/G#Cl>kB;CM.]Y_W:f7#_<o"H]ek@oK"#)Y7P@hiPMPl`mb):p3.L5Uaq1@ubR;i/<_F`.b)+)_o>d,fgf1N[VJjp)B$P
%d;=h>@=O(BoVs,^@XJ;10.TVNqjd)/1jVp`\?iTNKq8BL7dh#W7X:$L@e;WIThC_^\51LYB:0^i1=TWJ,q,rp/5['crjd9qlja)&
%O`G\,Og/\9mj5p.67qO,M\`(#:"PQjAM@C"ZOp##Tc>j\36(tqhaP:9atT'E\=Zn^'U*@7#Oi[B?@c!GA3"GF*Tfl$R/CH>'`.YH
%Ztb[=;OJY;CUaa#<`X?$b1AH5&YN9[C%V=uXbFAmaZ-.q"LCnr3eWe@`U_@<B5,T7*_`9J">PM"'Oid9X=.<a?<=Le'Q?d60r8eL
%$MrQ^b*csM8!6@278_1B6clH1R@m!FT+/_/OM@MJVl/Y0p\F=lg^-Zt?odW@\uL%O0J]G7\Po\i.'klI;CSs(^^gI\+F]P[8]oos
%r*k1HN(KLQ)06@WNe)IEo=^<14&j>:cS08gel!>JF!sOh.[O92-@4W)b<b*&JA3pXQUK($A#>W[T]BF8RU1Pc%62",gOfbJk3hO,
%'c[!9WFZl!_/)eu-DP6!B>Qb`Q5bg/)@0-KK4.FQ?0*W:6l[EmT\X&%%*P=K]A"m!f_DC<ZCH5FYN25O6%S1u!^n2$"hYR-3b.6q
%G)stlYnZB5+VK<&-EPs0qM6]/Ll:rYoAV&)9"<IjX]]:Erg=aiOOp3I_"+Ud]>ca8@OD2DDaK&hcLOmgQY'Q9KUjZ6G6d\=W]*iP
%L6VdNl?s\udB34@6Oj).,phI**R#>?R"W$K$-Wpcc#oKJ9(M1\kkW(X:"7?hXOl]3rOZ:;"\+X=L^=o&nYC0[3BpiEd21!H"^-Yq
%eUIR/e2N'9)"iBueXc0kaa-JU*W6K+=%#]6h)R-gAYj*%[q%Xr9LenH:oXuD)1OfaQd@LF9Jo!`B@CN#,-PWcjlKnZFVO0]0dJ/i
%Q1I+j`j,@2hU1eEGQJf$;)*Q?DGI>b^S9:(>#pG6QH.6CU%\>p[5;:*@asOCIA:r/@M*EbDj[^6,Cg3B1#5h[n5O1;EX]<1d*D_k
%=Rh0/!VOZp3O6RhN[Z`Hon[Tgbl4D]NhL)5$=0H2!FqA8)1a$<*Jh.#/E1c\q%'6BaLPG#3a/eURH>RR+MZ`)+%?@"O[Leb%,),O
%^S+cQY2gG-&E=,cdjT^6=*QG,Fj;;?N`iSb+Z,U=QkF(+=7_ue#a]_DhQ)8$\\RIV&#r2jgkif](Q$\8luALtMgHHq"QYH=%:]Nn
%H4FM^E/]jOV5SXD1RS&kQ3gU#dThL%)P9SU4V4h%,L)EMG+'ab`I\t;=?D.]NKX$0COQP;;*Q4#K]3eIih9J.N0JrS;<n%XQ[mV.
%iTd[\B&1#ZWCDa+L;l%j)KgA1,dk]>B'B>e+^\aP,3[Vl'[IBB#AR+)oEqou8L5.YO;)fWA*iS;-F_?k"*h\/*rHIqq6Uc,dD+*+
%NqIM<K'(\Y*3h@GYnkGfBA%"Ck97pJ.M?MD(b^scrrhr>J[R*X^LN3pnRK,<ailU(?6\$9pDAftZic[^0-8,)W#cX?h#U!br&IfC
%N-DSM%emTS&mMN7J`XL9C[B7boMREbTcJcQUKf%#]G+G*;G*%=IdV5m9.@C'8IP-_VO'"gIu!io0Ht)R[;[LY\>g9[/Zn,7@H"i)
%IC.5'(I&_rs!D'hGP?JXCRJ1)Mc.Y@4TKp1pVM=J]:COUAQN==N^EQuYuVmA5=V0u^XKe2](<,F-J!ep_s+TFY6*3<8h!=l$V[3n
%7RBF48ao7AlD](pgX+Z%p]T3)"sLs!bQ^:YHr2kI+Y?&&.Xf9[3A%$0Lgm4E'cF`<^.YRKH50bC1k>R(3$Na16:QVRUf^ncN"O1T
%9!07MOf#5ncnhp1;p*1[b6[GjI%k]&;%q+IFDM!D5QnS9a+7Rd'>T-HJp-XS`YV3>p]N`h&(Ct=i#6UTX>aX)J.hjAD=D`hRsq-5
%a*#I;KFlq:Xoj,-^^epi@u5/cXK4.9ZXp1:qbnW2XI@rS^X-mQ)s(u11[>5A&2;"(D*di\'SAL>9OU>o&kV(?pl>6lN"aFYV>"2%
%"aa2:<AL&O):<T)[2fEPKG:MAi^IJNa5>f-BZ2[(lkZ#V:Yb,h#6mcd='LTaljgh`ltU/+26;Z.b@&In#;FbK-*'2emU<6NXED$P
%@'6S6]qS@Blmh^3Ntmp8J=e2tCc64n`0rO[7E"#4mt_]<]g92dq]':+;'>Q4^Z^$kBFm00UG;\jp^.s7RgjgU4g;ZZ*FXtT!dRKq
%VIE+H`YBDW,&(UY8cn5V$L[.Bf5V:R(#^-aEPC.>_uPK:JV(JbA2-6R8cg(mCXrm%d\+VNo'(?IP$m\1m_IDnI[0k-n",4boe*37
%;lN7>a84VdgH2bg5Y'e'l5nH)`Z56W!lf?;40?mGE]Q@m;(+lp0PomQIke(qe_.4PF$s`XBF_"7<+u[7Y1?M2&Ls\Vf$3DEUD<^N
%GT_#1D%tW<cj"..GT`2"aKtD\4TpmslGpnIdVfK:[;g03+pG4@)$bgj.Xe@A0j(d.pkgk-A<)6p7>@i?P=f_H1U.]&L('GIkX!$%
%K/6_sH'V-u0V0_oGN6oTF[PU)LK1.H2R_%/*<Z!RY"'i?W4^U>7[4"[DCi\#ANV!DTI-SEFf?Tag@Q-W9mH::IOYbPn5Pi2HRML3
%2!>G'GYS-1Y>e\hkn"rt6GL9@$qT\Z+!/ki\Y*$PDrpDO>WNc4VSeVsa2$^ORtH$&V,6K$47,m^pt9A_j@@\hk=TkNkQY(PlY"B5
%O3[NIA_?:/>B%jPf=Ae`iScGbrah^Lpp:t&r)ng^r@r!hh0!KX(hGs]kW]GP@73TF)FkcAm)LgR='PLN82@`>XG^C14j^CnrE4q%
%rm_pH-R7&D]\=e^R,:]95s]!<ho]ofBgN>?(%="Dc0tNo^&"DV)>CKjFh_U^SPVhLfkpDOA$m7eQ#0W5^J.!Ro@)JiV:N[peC23'
%IiY^$l1`PD1a&9g[rU.Hph>r8pgIa\+:nT*otTk)LY7,uqFq%=b-Ws=Be,h*qVtb#"i_iQ<]f+io[Ic^9ZY8>I'*EOlOuYt2"h#B
%9SCdbU_F0\V_Qd^AFKpg>\`i%DJSUl3U74TVbb(/A3Ko>QufSlC;'gOFtROCek4;q;sEq/h%jc>=h41/LIciW:Y-Z]BW3eKp40.>
%s,\n3jMMf0l$lan/*AEY09MMHq=Xa@!tU-tDgHTL2);e/?-gY'_%(ag1F,WAk3'7qEin(?]9uEg>kcl6d0lg.p<<G<DQ%c,PH3g!
%Ghf&Nq;&ogbPk4gSH$#R_.N$9K-Rp-q,_Di;5P-9-PGd;4RAa98msq&M6*69-PC/5gBX@5+91`5pmKo=cE$GG@!&`%8d(<3/Mi#D
%g1$1m)NEZ$A/N\<s/5cg3\pYIe%%5:p8Bj5Ec4&+45%aFXj_fuT%-=1_=.-]V2IXG7DJWLRS$dN$^D%bQkfY9Hegl"&;$64ToT0s
%&DruMombN';l)clA`n`*Bt-;$cVV0`,E>5NWu:P5P?O/Dr:^k\/iJ:Na8c(pNSWtY>2t*Opg(!rj0R3O!aEZ&VJW&C80mGu;kHfm
%U-X)SBYBMM?oi&0k`Zk`/(\=%np_XW(eUW&A/<e!>1[q`_ESERR.W$&s37g5F=)^fD>`j+cbHU5o08f.jO8*Cd:=f!,\p$O\#i5i
%rp73[>FkJc1TQK^j,m"p)Mog@b8/+[5J+5t?nrVl9!+-\52=S3N@R)9U6Yc1/8]P26)T']DFQPs/@ifh7J\t>j#80RG&:F^?]lun
%J."idV%]u7;lb-$RCN9mOKb:os7mZ6.n-:=Uh7Y)0VCZ5rJ)!^pCu8Q%q,D*-:3X0AcK`Y4L,L<s/h332>eaB->P!`on!7`$!-^/
%IDC+"^CO<?<Qo?8m\'++C-&Q%5NpifiW!k6D"dlTdeLSF=I'DlJ#Fa.%g%3:.'O@\U<s_+PsN+R/#?Fa4fu+r/*4Td3](Q6oS2q8
%2/\EQeQSr\r]OC52ER++^!l@B'Y>f^8Al/+!1B,+BMor%7a72&4BR%Y\h[`ac*:i,e7.`dCg0tb7RDn=C&=cZ2?Cja\d:@)Xj7:(
%fk/7+$eHc$>(8X;hehC<A@PBUA_d+=QAR!np<:[`2JeAo`SRt+"2n]5=<t`l(he"OSIDE[Q0T@,,<Git)m3GT`e3\Y]-j%$giM<j
%Ilc?s1#S\kV3MO)<L^A:b$1*KcY`U9-Z!B[-J&Ho[mKOZkH/?s3ungC&4IK2d@I;#^=E4I]+B/L'3NV03*FW`AJ7eBrB`cQ5X*.P
%h]-gVVWl[CS[%FW?>]VB^fe&YLUF#!/&d\eEB4u9i+!]KU8+s6b(i%>&T&?\=0"&!H_t-8f(tA/A/fD0+R=4IXd'292SPL;a_:1g
%Ld,Y'\C'[PadrWpo&#*Cg&u4%G75AB&,t)t%DbUs[Ka@+pJtJRj4]//Yr$.D\q$k:]l(fee[?h:co@0[/bPI2T[^lXlk7-/@k_Z+
%R^3Z2fsqqngg&F=hi>]JG=Kj)3/hUP=hUD@<pTJb',?nED.X\@^lGfs7sE0n_eHmEd"I3O!g"`N;<dQKpFr[??`WTdK>FcPF_EIP
%lCfpdE^it0fSoD@%/OM`9lOak*D:+G;%)K/<\4Vr2fcH2`2;Y;gbP/!DJ1/+9@OIanak.')A0u$Co:e8k,+cYAo#nbhd8;LZsK6G
%D+%bjTc34O2EbFNA%c]_C=dC3M(JJSr6C,4:P_hMTZtDZs+:$N>pg`m8U*A"O68&&RP_XodDnN6=B<$BS+VR=V'm=Li,8;'_nFdf
%HT_)u#bsbF]D5"hluBD(%#3PS]<)SQ!&ffCK4m-eZfYr(Rl*]OFk.OL%C;YF4g_%X;k4a.%dc_&O0).=DbFb),e@ijs"SI2H)+Z$
%FVD=tV+k&_fIj\eq>e(-F'2^'A(p]n:nMhVh&.<[lia:=qWN%aOVfnp6O;59NBr(s[;(Yhi<`BPR?D2O6-s6!B_:I",ISJ5)un<"
%9!`KSB!lM,r%H?=T6%F]Zl4nWXKT0OP^]\N4>[oc`gupp$sF6j%mL;os./%^0^94WemZl_\tcL0E7MS.`qTD>9Mu?*P;u#5/N$RA
%^!"JlFANI?7D1MAeV7Z:C"JfVU,L#\31:?>mr,U>>mZ>4CY3H_470`q\;.t!R+c*Bp'NYQ,V3ceR`?:[ZiB!"V@WRJktGS1IPG`8
%dm6>1DeU@.:8][h'5?(_&T29D#`3XS*-#Yq'+%MZ*#%JD<^f@)TqNeDdW+$=H9`c3ekF[$.8-O.RLlo4Rs*sd+O\>6iu_(.8uppT
%C!RcmR51MjcFuZo"N[objisE3$O"fp)<-*dLWB,4=O<s\=UdYbE48:'--afn<BWX0GU9Z8/"0&l?t7m;-k'.G3)KOO"aPtWk\XkF
%@V@e$mL0EJm!h+e3D^%gdC1^ZG<2ZiMOn^.RY-AP.[DS8QR7pKi0I6oPe]0n8!=YhDfhPpFj)7X*K=f.&/4[gFOf"],O.GUNS(d1
%014UAbFhO7nJY@aMoiD%`Qkf?bmNB--n%95CV<MpbL$Dtbjk*hp"lqP5]];oFSaLN!MW^ci67M9dK5E=>VJ"sGQ@s"29ud1Y5\[6
%YuiHFS>6f2l*gsZNP=e4A8"+b%c"6[B;^_"3H-:#\Y&f#5CRkQIZV.!7@LijXKPF7m[au$?%+G$2eDIO;oJ=_p>Kk:-R*X[$1YSV
%=**'R9.'J%lofZBH_GY/5W^4Nm>f0.oYrQXlg:rtcbWCQ4M*,HNCF/\r_`F`X.Ff*^CnLn5Ph[4(qiX:CX$Qj.NC[fd&sefp4pBW
%34=:DIJ>gZd><*q*)gi3Oo;j.*+#/tc8+F4o^UdD=<9TED`thokkQqW4j":8H!f?F=O$#:(t]dj!KKMN@=A/]$;Y_%@d<dV+o*gN
%QK=+,qlV\\6embeL4Q:*4e59Sh`O+#p$=jr+oRp+V=<U0hImUi3Y<OG3m?Dt<n=O$1fCKuJ]UB`(jrmHaX;_XWm]5j+?(5+NiQ^)
%_37DHoTdsW[@=o`Zol'B>+XLVYCl;'jAfu245hao0&q:[g$8;1Fn0VG&fL.lA#5-gI;n9'Ll[8[3LS-/3kR7D+2u\n]3jW7+:r7)
%4@mIXT1:QtcW>3bZH%pAP'^-2M<r?"fQ,?joo#"#TZPL4Oj@c=O)Hl/oD1u;W,H4SeoA8@I?(K<fe'6ja.'p:ONjGT:Od6QTh#F]
%ph&(q%m4e!$107d6!*1"ptEus>I#/(,3R9m<eG^GAD#tsH@HX][g$gLiADg/>Z@d04nA#X6r2^?Q@g5!$WT59d/GSHKu\i23up/h
%-.[uDXPSr.V["LbFE\LureK-)2]<fkL4\-PA/*fkV+=oqCO(!M1h\)\HQ1ZJqDNZqlrS$.c..t+Gs1H_R>+_Mdc()2h4VgS1&p[J
%oq6ZgQgrdBle40Di@m7X<?Z>NZed38%D'7-boYLGReYZ!I*>l"%iTqBLrc"*"kdBdCL*4[WV,SKE+q1C7"0EDD$E_;q7cah"k0,T
%'K0bZEYNo9[3"rg,&XjeW<Z)c:=b#Pb+K7g^BqQ.(\.H:&(54"q"u]_f(ulm.A]@.(j'\.d,W\"H!LdaAC*lg][G6WA'HhY*CX+H
%lFSL[g'oN#cF7+8eq9RlA92+QMegL%/%_9*6C$,;9s1%p.^=fSTMM7PjXm]O4m:R=lf..`i7A2+piOF1DYDhnK2t1>hWo?;*^stm
%L3qL(Q=<%=mmbUim9?adG'LT546Z(ddH\Yfd*'MdiL-JN9%K^UpACTYp3QE&@QEYqjnFW!TO/4dVJJ'P1E<Ib1@Bmuf6ZsEls45O
%1!;l?:-sB`5tAZ3[T=C^UmR`SD^*.qn'lC)oL3HDRsPGVae5oCR:rI9WAeD8H7WGJ)NQQ@=K65c@>2r.s06RGV9&O7<eNaL9S8LG
%^O@$K:[XST*=k(%PsHdQgB91L[<eH\:B;Flrt%=JZGPO5Hun5"6$'@pkp42J\ed458g(Qh]UHcI&#3b\'.XJ$itj+X@dD^aR;pUH
%dAU+7_k;;H8k3?+^ijXflnPgp:OH^g8TU94$C_%.3bZ3.;5Ud:Db8uRNc-g^#?e+.<$E]M+0M?O>J%L3,KK8eWU3^&HDM(?WrrMD
%gBF4d/L.C$<m#MIR?#"dH&o_hk,\I,eU-&OWU`XS=h?_IrNreOrGHt+qQon,BmWho2BEf<<tuaQ[,!q\D!s",00aVsY?n@ilGkea
%e&NEJHT,F=Z&d/%N9Tc"m1*&j5GG2]o@<\OV/L_R<ndNoBiepiG3>ppG\uo`H^:u7[TD@7YGlZFWsZeZ-KX3kmG6[/6N5.$C@>@j
%GdY.U5]sK(:a%`DrD\RpgtQ.Po]qd*h:2u'`l[h<4iB79id&4KHhXLY\/Mce.XHgA5h6][M;q-HIuCEileaSIoQKnBI&L:%K_J/A
%X7&P_UAemiGRY)C$B;S_BWFC?bK98HV9o4C^?)sYEW7/&]FI$hcEC?nLQ/Bpff-Xkh1"-Y`+mhH7p2'Y4`A>u[F(1V4$OQhBYP.k
%Z8R$aUjOd69m\NA1\5LTm7+cTl2&[E]R?o,K5]#7fDcPP_P]0BK&6`Mkj0lUCD8t>`N*)e9kI\`-J%G>41Us*I"3NW-$Yh`q3%'$
%-I9*TmP)4%SSkVWf[;[(i]qf9gN5$R.W"O>&#@cWd7<F2baBg_7I,+<C^JZnAq!D,mN>_YH>m[jbcps?os`Mtj0NU5jkKA:*.(A^
%nZISu@]A\/$V-9DrRgNW7m#U>kIeg>QK/qio`dpIRj[lJS$cJdab>f)oZm8H.n.0iXbj$tD@CCC!"k55HaliqA"bDR`P*<P9uOM[
%gOT0R=N_":'>2H;L\Q/bZ17Fje(Lo0P)m`5Z!oYi2Fa\H/r5.PRfIDp=d0'eLJQb%dfWhNKkGG,E\4Be.bIKL,+n7f:"-Ge7f5T!
%\!e;uQJ1sPhRKG,[%??HgsO[+UJC!]RpPsDYZYdNpM`9FEb(4SC+mkMH)=XohT.25,dA![?7-au4m[:AZ9cA.gO&'GQIS\U\s[f.
%5,qKhVAtAfm:e)1#&g4ZD:$Ze<et]'8p#OBYZ*\jE7""=?rDYDLD29O@@I'EI)b%X]F\*7?mla/j_Bsh(#.2Hj.UUV^G.p$-Cm!f
%M5DOo];aVeb;/i."nh.<Hm2&TGNOS&3qt9C%^Qn-G+E2!hEEnIDN`[R[U>,(]'=pA^H#>"2+@fqY-dT^MDo>JTG9jq`Ce`DP)JSj
%*Mq5C`m=?EH"0*/!F_:apnL@%NU':FeRgSCr6AqJo&0u0#BuuME`00NaET1,kV=E&1<@IH833pU?%u/L![D@8J'(obBJiKPa496!
%<R..A4a(X!4c@F!fhN%.U.fLL1Hi<:l)n!34AFQ^GH1>VY]%-]noB`57Gj*DEf"d9R_N*g)f0>n0"=mqSihXbUN-l'E>o0t%Co7)
%PcD!tl%@4-9po*Y)a=*BC`Z&@?m6t5='(@PQ'8$6'-(=I%&@*&r,QVf6$+XW,tF\t`)eRWHNXdq_lrnhWf\XEWmA^li`caU;O;qX
%!g.mQNU$^A]-1J\HMFH+kkXC#!7\Aq"b`Nr5Q7*:1]RmYa36"-/I`hE"[EHUG&>4G<2t<O%a@h1$ssC#EO6q6k"(,\,*B!9Ece_j
%,@=Ya^\E1:1#XT:grYdT\>&?Gj0N=dL)t9H*'Gc)[<i2[FDQm6f4&QEpT.o@e_6lHY$0rVL4U3LL`L*2cBeVfBq#d")]j\T>4[L#
%+ufqt9_-a4PWV-s<1%l-%T=Q0l\!`P/7bRjS0C^,)JnkX.Kj;d82$l^VH4$fc%Xf)VMaT:QT?eQ1d+#1qQ7uh8F"'NaEOLfMAJq^
%Q)t`N$cHhleJ%=I$*5$@oD#Q16\"WbCFeY&b^%3s8!;sX@ofRhl7aQro;A]j56Ij,4/0000$K(pd#2=.BM0^s:QEr$&%0.#eW%iF
%U[%GP1D7qs\#&Te9i)5ldud4'2^=;0.C.Ao-I#V%%6`R/kK>iGc`e"PorRWS`4b$in]gH@\f=F@Q"&Vg03=53odu.5XEH0P4p(3P
%WL5-',Wh'4@DL(Lg9U73=^O'n10iCi)n_t:-qg+1)DFK,:_gD(aG//%O#3uhj.!)mnLuBqh++pV>N??e]EfD3c3TiKT_/#La`%rr
%X`#9\#*^GTL&dE5K67:=qA?#qUR(<$0Y]?!6.Ohid$Ykm)4,_cm'3G-3p\Rq[C9*nK`(eH=m<9pL.>lu=CZi$aCS)k,u#&k%_:3s
%TCI<1):-'OfYd!oEZfNZk$pQS2)VG.UCKZ"_bm9!b&Xk[P%u#ig2)9g4UbUj#p[+6PN(RP*)h/&ERDMJ_R<CCgW((%oc4"!C111e
%NM37cf'T&99YGbi_TTH\079XWLXOl/:S%`*kb)91Olg8X8:fainJgFD>KC88^Pr%"%)Co0JB>&*9YO8,iegIU@nuW+e!i=q-*H=#
%a!\MnI,%rAb02aqGLjjtnL<.#A$Wei4#mf^2BW7``iTJ:Dqu7TntBEZ=>>WN2rCO+`a7KB72mk/1>de_f9CNhZ[3K,eR35&6i\?P
%UAY:HPej?uA4?C*ZT#`3USfp1%&XKXdaNPXEhY/LI>P(=rTb/!KTA,Td5\(ooGBL0B!&fcloS*hn'o#Ybm%WH-ecEKbPXb?l"(HV
%<UZ0iL$%?b<9uOr1aU:sPHo8(\V=&"1aO?b3;1#$=(9hP`,+@Nc?eWP%SFmcV(RRKQn;,#Jr"'Dc\n;77;)W`fn!qAd%oF<`k=/j
%1\nOsaF_TGVGp-5I$s-CGR+abk"CuliD%mA_A1HMX^11B%E\k@+;S&p`%:!=+rgFK`YY,(n1MQXaHSkHJ*q0OA;DKl:<H7I]MgT=
%q_4ueEGOm"[FV5bq"%ZXXDE*H[EmUEe;*Ft[VO=<2*Q1jYpJ3p!cLTj?F9J_4u2C#$NtMXADV=4IUp^DG\&LDllC!2_J#iOb"A&]
%5#5k:JU.?5Z,>>]3?Rsc^_ZE$Hf025Np_lED]\BDN#iV;_YHUD9>Z4tJ7c=iHB/5A!ok%X_S[mPBofo(3cfe^4_><'Gl=$D]/lta
%Gm0bZa!'^JqpjSWRoC?[0Ln&Qe*"M%Tg(jsNj1pK*\Em#TPk#k?,tt]C-)U9&[Ip;_3$p%Im]20b*.<J)rkiA#,gm"hT,t2!:CRC
%=Gr0]"*8R?&9;fh)k`O/fIASOm90IdZ:LpuF2:`sf-]^1IB#fbZnZ/UP7,L!gAs05QF+]@B6fKn00h<:NIbS0^'S1gN:Ih&`ZBTX
%"e]NJ3!QWuO"dAX<tUJp\Ss<EKf(rA17@mBm?d_)V.L=$)4DNU<`oQQPZ)sY2EO`P_<1:4g[54#9/0m@^6%/*lUP3!IF\]eXM3*d
%n%6!u*\P+G(<X=s(<a(:)g\lJ2Z+oQ!%_rUMIhjp.[-8SQP(Z>Gf2A^l!9&<&EY"pj"UC?q>&'r=S=_!,%-H$?]/LV0R$/&b@F3g
%/$Wn(Z^=O9[FK>BflOSC'!f5_M<3nBi%W@D,>qq&MIfM;E@[?Wo"",*1.YrAj2WO5haV\*En8R_/U>8iRG=!iZ/1r)lr[F_G(J3@
%H]-,I\_2iYD-(mtH1K^'l#QfQ\T7^ej?i:hq5]J<:+k'0LV+cOgKrL(SZ`Qcm-G!TpC<8%&**Q4[*Os#C?>+%o(NY=p%ir]Z]Y(\
%LZNj\+AYT#qq5dfQ`6dR6C:o:7:_'%PuPLMo(V%Bo.d447_%93A>6_3AY!%f5g1Q3%!.r+"96Z(N$XBKg4/%Ia?3\94uTClF#34H
%V'lB2Fr]%JA`p"`?>&!<hnM04).jQ2.27b^?P-M2:6EkG?A%u]-$VWcYP\"!Hmh.fS:QlML6hYB/7I?-LAFti*Zn?W(VLtHp?E*X
%Ar94>oP*I()uTW6_Fk_pPG-L;5jPQ2"Go:Ho%j0k2XV%oYa-J4A3NPlb!AT/N/k`f]"TUdhk=&KU5gam&f+T9O/qC%p,KLS8_W8)
%=8eps&*7D]D(cC&2-eC?=5JcNl<`j^?=h;"m7,S!E6,&Ma#Da.)s%r_<IV@BEOK.oLMncFne^K1_\h!/i..m3=-#kFN38^WV<hlc
%h&bn-+gE]]NSf5OeFO"5$@2AHrO.Em&@9`W,T>g4hY,fDn(Mc%agJOKjRcT5]\D$U5Om9;pDaO]Q'9$.nt91JR,1<3p"=F>Jo6u'
%8$#e8qY#iJHOe[sMAK&Y*/O:_%#+`Te%8en0R@Ma8%6OKl`m-%He6f@*hR?KE8JqcK>n")*)po0PjWTqfiM,7J?bn\Iosh[FXHk0
%pJ#XSWu2[+UPF'S\*9na`L7I#Of'EoHXAQ6lns#<UT(oRZV/2t1p,%HF*NVLN,keed:iFA,)Q/HWI<=\N&u`+EctJ]H".'$c@maV
%P62:N;m>qa"FeJ0i0)<Loe&q@ng8Qd%UT\6XA7tsWu*(ojc':JN]:HnHmQtj0(LT>2BQjKMGYP(YPP[5BKH3Uk$--3qW:C@FoieF
%U4@20)Ya[A0dW.1WN_io5V%lg&FA.kZm)(Ib$h:?EO:Lo-"D,eJU]8_GL0_DQX.7poXL.(15>beo7M[dbN5LH#[+%a/HR[$0cB:N
%HO-G:H?L8YTa;#Y+Y!gtif(PA9ZeeW_VQeR%l*qe`-cpaML#m3N.1*0^lEm*hb^LF%S9sa8e:(pUXWeSgc:63V->_JlWI)UEZV<9
%VpO,;>a'F`i]S&MGHB^GqKC/]Ju<mi<Ue59)<%bZFY([3\l,7/>_S>GC8Ic`Asq7p`-GMsG:=oKDJ>mKqq>N&!_*8fjtSLtGaXg\
%^W)3'+[Br8_Pa]N_@,6m5]3Tec!`-lOSn6[-E'sgY%7+5,=>5feI5(C[!=0riB%^/"-eZQ"2K#;5.Uoo<mrn?-IK504urDC&qaBD
%X'#udDO=30b[Sq:O/].mofd%2].uCr1KA%kJ'?$mJuDtf$a9$-Ura`k@6Q>\4AQI3@X_aAd7ir(5`CcsB_n+PAf(VMcH>B3QD=DC
%>hd?.PF;pdE_T-g;,ep^`E,$rUtKSUC#<T4gB8oJa>B)9A*k?o=kHKig^HF6O1BNR\'7JQ*hTbN5,S[T'29On1>*bUe`gghVTAYd
%ao#+:\*>@*&(DTUF5`YS[tL*)hu894H_8`V)JqFW`@9CWMO#(K!*ND_aHKE^1C3`u2/+5"VZU)C`Ao6f*:h<09B(!mkWn.9!4:6`
%:TUQP>lrBGH['p1F_:8fChJEnrn<'<XK7JSc'TT2eb*sQ5N[j78WV.L1_5(Yk'Aq#52otDl6cWfLQX4f8ne4:$`C:?mOF1k-QGH!
%oJ-cc4?f.^mrM<j.G;5X>b#u3a5?-'p*bSS\Sc/jX](hB]mUG(8jYORH+<eHB+$%BlSB_e&T*a[4,Nh_KYs;/k0-seY0I\<<T`!V
%L#B,"kA7ssAh/]5*8RfgQ-een#eC<1K&tZJ[-$<tci.J_ZXWC@Uj/%f3E&2hX<Uau1[-G(QchNr%3<`GY.\gTj7<j8e<G^49%QD-
%"MhZUKroGS<jlS6Q!`\hcVt6)jYU?F>AhTAI4)8h`i_F/jibE@-UM[?()q=e;s[WN4_&"U]Z49JN8S\.oS"@^bBtn<3K>k!kkip$
%gHHJudbNL<WT2G1SLXAN:E]FI3?FRS(iD[B:S"8r?Z3+?BNr5HqV0sm\&YpIX8;LOQ*-mRD@.\i1Hm??ZJ\=s!AUP]&Mjp'=Ih28
%6-e8J&ZBk)9c$cRCat-O@kA'(pVrM?C(i1*T(-`&BA2sA00:6VA\1-[o5!I2Nhm*<Q/:K]m4k*GYpjLjMt/jjksO"1;]V`H.KN'p
%`tB&[Y8eP7"HI2IWftcFj!*K&oIsM]CM&':_:A,g\EZ::ItVBF&JT&&G77UW>a4h6SFn9_F=ph7eO'ogMjJ>e]G@-gqNc7^'NTP+
%GRkVIA'Rk>i4!61J'itAQfKQ\-en7<JgO[[1;u"''`#.pq7GjN6S,9<S=F'![ee"31T)&4o.#H\,F/Yg'$E:.N>=1n&^.&8-_8DH
%(DP%K*YMYj]Hjae><Q?AacdE@:1>+-I<UsK"Dk6[1:KcY4>3=b(:)3tb9">3`?gi-7dfS+Xk.$`"a667BN=de_im[83mU`_puQtU
%+()&'-St[,kEYoaVg_"X[u7gn%SQ_:`1Ot`;tm9dqIk:ADri?jh<3r"D:G!I?"CMb]RKOYam3TD/>/5MM-`CiJ)?bWSiQ-mPnXS?
%D2p-n77QVS/?meCoeEXSOo+d]LLm)A=!)Lq'mYfi."kMOBV2J=g%BV,p.0@R>QG)sPMQ8nisHL2O((cB%0t"UR!:d8eahPG=`84?
%,/%0AL&.J-fges;YLc]L0jT?fl&s*M%AcF1Q4L"PWf"n%+&m*'9XVq8-P*484f4ZgroHACg=4F.qi_7bRiYKkIk;$mW7lDH979XE
%kqU_-'#bqTW7pN.hogLG[:sY&hk*$0HJA4^C9j/?GYke^Emt?+r!-5k*`L<uhj425C=?[m+\V25*`Qtp'V:?`#7mhh3TqM_Xa1_J
%qk.]!o[/$DQhd:h\!b,DAX#(`Wj[^/l84u;5,d1QEb6hYpHd?B"ls1-)W&FS<,Lo=p8h"ZPDeTieZNY3q&WN&]N&o&g^gFI/m1(r
%VV45kP'?M#5,d0qht"5eWjVo#m?>7i-BHIX+Iq-(F]]tDJIJWOZ"$dB`sog%f87s*!=i`1]^kD87sSpnZT7r,1Ja6Aiq[k'EAm:7
%)4WHTk8.dCn\NqDB.j=kjW'\(.aJ#f<)b<m?:*3P7sR#5PUKje=.[Z6S8AM9"eA[P`S'U7d`XaX@CA/Mk"/$[b-SX"'Rs,Sc/DO+
%NUlS*B6+c"CK.i`Gr>noZX!rgGrGCqbC<N`D1P)rEONOjj.]&ag-mM@k-@*R[qkAgZfg8#[liCK?@GbCD$`X@XC3Q&ER]GCT%.OT
%T)JO6Yk+)lF!r!];jeCRcfQY$ejgC&>Np$4SA!RSk(`GC%T(m@-bCeQjs\Mu*>P+scfQW5[`[oW=e<l8SF(8J*)Ci<7rbsllXlj]
%m"HVFZ@^N03899r36I7AUpPnu;D,"'9iFrrD&4kOSt2$5hY=:tZT0Q%Ip&B1>b%qB[>))tb_^u-/%%E`7t#QheJ[3>Ve>VQWm?$8
%2V7Q=\]`"[(mCr=MKaA!T:PA6Btp0NB58.5qWZZ@A&Ig&D!mMZIeE&D.h-Z.*As0U1UC?@B;9tI*TZ3^Leb"LWP-&s?dIQ7ZRsMg
%j9?a!,/\o5_WOU(*;AtL6lj_Oq9T&C@bg+Aeg4CVF*QZ0:bb.</,C%sj7X$gB#XNX:,q=5)!='@n95W-qOFV$Wu1#FU;?:K`]Xe<
%8'@kKT?SMTMi)M^_ToI>GZbdA>,?1qPL()E(glnQG4$j"k<j&g(#tCJ]QifXDoK4HpA-]_j-Gu'9<T2q5E"GY($!<6[(iUXT9hXN
%]S^]1B+HV"0lHlqXJJsV0;gGEWFFXO?.(AU`b0>Ms.j+O$%%W+@bejSI=G*KDV/HK<\a%)RIuJ>N8$J$I`W>boL)N,2nHS6`ONrI
%qonZn=,\f3`laua>dopm9@I-IN2*T&:?>VZ`AhTKZ"8L2VDQPGh<Q7"j4:r&AQOgDDi`/_Z=hK)FBP'pZ=;VLb&gdn@bc?CfABPd
%gRm!,b_gDJqIu/jr3Z\X`d`'\%=c@,LZ<s;^K3>G;p.0n>(0='DYID-j]7>dhd`u-j)41p%As;254i9/($"clDQA0Lj]7?#1K&^p
%]/@?4grs4+VIJ?@m"nh2`OO'!U8tq&-!d0QI)3._>ZQg0nW5<,@[q,lC<cOG</ab\D#XX"AQFb*:B5D)XC0WpiuF2D,ufh-=@n!=
%0i"ul>>Di4MK)qP1U"]BJVs!::,m?"1%*0s?asS#if&[XW#2EI6at6d2NkoBVc8V%I+F@g?Z*hB=c6H>rc]+;QB@<+=,^pW&T5);
%!Ys`PYKunSpWKQR=)#D\:AnJ;\3m.lOt+IWSNjQ%`OO1gA+M4jBAk\F@N9.#i>LF#<?86mL(i;@Zg)M3*C/tpWl)5f*oGjTLX0>N
%ZDtgMFroPu<JPA/[^/d+?=%ca<ZA2A%4o7T>aq8B.EkGf%d0mos(ungWNuMaWl#i-l^(KiY*E]7Sc@$9_mS3;-=?bH3a<7'h=d'u
%m*D]L28rCsP5_7<gb&h\\^fXc*TiE__p(BA^Sq]MhNRNm<JN5(0=F,gptVd60!.0>WsrDYVjG"V>[+Am;_s_=*H%"er<Lm3Q5SLO
%Y7B1$fFE$>^T%dQZBCMS*R8&*<G1h,e_qE#4HB;Qn`oV3)W!]X%d2"Wqe^Jc5)\@fWl&JMT)YNGHsVimnuBTu,.u*u%bGI5*O9O3
%<?5r^Z/o#ACUN+`RDXq`LYH>M0"F#JPP%O*a.H=dCOe=6X0C+=E%MsLj86IRE8.cO[5qQn%6*a\AQFT@lS-M`%_%U1bHDDJK9mlb
%LMO<VbJfCqUUu#,(Di/#Sn%<h\iO(`[Y<#A[-DT>fanhsX6OZ%.aI-TLDt'75H>:W3`dKq;2RTa"f9L_TIa=i8(JtWG^M&2U=Z]#
%J8bGdeboS8:Maa[ICuXJ?HuJ,1hgm-iK<e]F$0R!?$HP!<Mt3dFkB=^q]GF/fWIh,B-??BPg^+O]]WQ[6YuJW?Pd?u)4"lM_Rl6L
%N?l5XV'@ub0AVpsg#r%]_T?@$WPNm<9ko5Xh!>)JoEjlsoq!-a5HJrRG6_/`d.o7EFaHj_cnCCF2#S)OSc7rQ0GeBEctk[+?a]>h
%:.O'&^rc4\N8i_S*D(`E(JeX_F?6#G3Z[DH_:iC/dhU7i=@jlu*D&8pZJHcOm!"Kj<s>>=[u?La5%i<uN<$>2%dtA;c:Qg""e_t-
%"3'S$a^Ns)KMeCeh8u6b?tUW+/M]f9m5_RmZ1Z>&Vm:m"#MV>J_YsU>JYu.jlJLiHT4gL"`!g'-<r/oZHiFjjNXu'Jo34QSoTGf.
%H:g!-J"JYpVdtqTD08`,#Fle49ZE;[XQ?][d=UBN?ToN2oo9rJh-u/iM.GXP)P/OJj_aC;N?-klRnnQ;"ARQ"():u7WT+`^fdhD)
%>N!Ha1\V44[Lh1(/-TKh<\O0i7-ZRg,Vm(]I_qn0PM<3tnXWhY2AUt0.;C\(b2];Y6g6X-3hXNAJ];Y(_?,tA=qL,=-Vd$6LqCaK
%j)_4Lk**@I-*H5&aN*aPZb'f=K-Ht1SPcRC_Rn0YG&)"Y#<[5j9<l#1YO*+WT#(nYlcV7>!isn3,eW??)RO6B\@aue<r-"A?Hmqm
%4k@1<R#C%q8fr;`N?8`P4^;RRc@Sg/I\gt0*0U1Q2U$,5A!r@gV63>#1(W+!ggbIh5)p[9CK%^\`4fLhb`/HSAFWbM&X+3oc,2mf
%ADT)fk-K3ccdl51#/GTZ$s.<2Q<9_AHZ5\LZ.m+mg/J1J*D<ZH(,VXWra`T%Q;a7[jk%^ZqHNas<U7r<WP!RoG:#VmlpR;/JRJ)n
%H4.H$G(afKb,Kr3b*1L=*<_C,[`P8kicB[k.(&P*=K^c:ePTIj.uH?Z?-=6G,NeGmca\Tf\i]AsrqXXEY0P4Z?\lt,CO^b'K3a@t
%V8_WqV"7$f%p%#[KY$i1%aD9\QIS!Q<\@:qLLEN1G2Wt44m(bFLt_.ATq,<"e&8No\)\7HcTh$?Z4$J+>J94iC0HI*Rr_++p3Gn_
%7kE-#fD6,-/c[e6Yrmqma+nk[C\et6=n:XcV28b3^F!E8$)_HGebWOUltVTP4!*m!,F7LUZ[R1/H,cTb@Fq0S==/+%iA&SN@bH2^
%pWd69]5goXP28ZgMUfp,c^jCRKk8I+\'^B#Ib)hlTS1W&8Xr^chuDe8MagA;hM!1Bl-U8i-8u3#e[)TLK_fh(g?5GC\+'7-H09JO
%lFM`^bdYOd]RCrVY_.o@IMeP!(Zpu>Il\U[@*HFZE1CY3n8#MmbW1P]3D$u).m@(t>:t="0J-SnQcOQ845]!tY?<H<NS(O1/R%)J
%"XED!nG)h8=Hf3#Jpba>4DZ[Z?H-i;j2$skb^1sqd<`LJmb!Q?&M^a8:H_QFnMgRi9@[L"VpQ1TNR0paFJn:K)*iu"G?`0[DX[Jn
%=l.lBAB^knDFbke5ZBkXHRu.@-<?:1H*:&,\bZ,Vem*!L[9<o28sf?kg)DVKgg.>K^#F+#XRFFf#He1apQL+"6Y-Un"7!(F%2jIC
%kB<n-;lGa@:5?J$e)F[4c>+].ZIHtHR`39nYrip2A'qp=*aS/dI+aM3h0D=\,e(gd-Tcrpc/[P@DP]-nLJR5sX59%3^amRZ40&mq
%am=?8DGB\MpFE)bf&n`OXH\1j;W#_s488]&nTi]cA24tIa$7%ukj[r6np/dMhAkpQ:N,-N!rf[<_KOl'+n9^..rXm*G^REra4t4d
%X8"VDUY*/%FjM&np`f$r]7J"#j*!MjII9>p=mqW]_Ya#?(tmYJ*K:Q8Aae3ndCE?"?Zro&)t@0$NZ9*.jQ`9U3EdA,7#ilQ5"DBn
%@;%Lr4<WF"]G\A\LL[/S<iiC12e`RY=l49TPU^NtV,N/'Z[=]S[7uRga\&U615AnOgZ$!PM`_6_UrR+nj?fNgc$6_0nLGG?VJY.j
%:trY*m=gS\=O=dMs1,RmEAnf>I,:t)N,nmXKu`Ai]/\Pg!7CF%]Y:f4].^@cGIr--\T2f'q-H)7O(UArP@R[=Y?9V[+$tO+FaJTc
%F9e"&j`Y!;]@*\9In62lrGWK#hPT.!j7__@7(@PL'2pQpQ?:P:][(/E07,$A52hXe5K.#V*6sdEY<"0+lLm6#$fut0'HS>@MjJKZ
%]LRYCA?YKj]R1j3)S_.4(O(U_SpXReS)M*S,#>ngc`_[Tn)F&KkRF-@hg*hMoXf=Z&O(k(0TP)<M_j&mRtS`40gHp+?<<aXMtP//
%MKYK#Maa*,cjT\a\+Nr(,`MKC:DU=GQeOV$GTgj:NCH4=2^j[-K'n*Gf;;foHWP8qCLXd"WU3(uOn&='<53gm&C\JS@(UZ1InUd<
%YEJFahZ<9q_V9&d(l>u0q=;5BQaC!/VmY<!*3HQ2_%)Wf@'S*]gWJoTIM7T'4.B&n.3_G5CUqhrF-I33],-UnAtU_V)Oj[qC+F]_
%%L1l)kc!ghLU6t_/pgar._^\lPMG#'gaD2V[gcG48q)9%*!.4G*X/juKDX(ej8i$Ja@,8riTki.0BjJX70M,tH@(3JWKQ`D2absF
%%3RBfs8L.:nlOgs1*<-)5KWo@HW9hI4^F4>]Z6_3kG:1iING;GQb-52S*S(e7iDa*(-\?/e*QmRlj:,9)4`nC=eSd)G^c-J]tnJe
%ILA9/,q$U^1;VLLOA*UY5FT4olXX#iENsgNh'Q=_DTN8Vl>E^qB4o76Eq`bid#W[?+\*He_T-\j'me$C'E%pe!Xu"$^;=OHUj9Tg
%p8'T.(MiIeWu`@NHnW&_"as>&Isc:"]uX!AUm%"tLA'A>>Boqg+5c^?E'.S*&0d$KY%g[oO3+RQnbT"DP!4'?hhmE$mmD6m!1X8k
%o:2)T!l=9b>5#[.C]sK!FI?s-(BPI2hksd*D3"G\oBRF&&"Z:1$pfHM2<c?8Q^4JdUHg`c6V/m;JLq3;O&)2#g=pg(QJ_MTYL.N.
%5\=5&dk0eMnS"Sbr4`)M9X.&`noU-9:$#*T)'3Z?1%/j\$=A6S'T'FD^"mg_r@@>(Rk,e,.\4;72i+EeIu+HI<]?Yph>L0t)MnqF
%\qDTi:W1FiW1kE43P7]V@Zu2QQ+R")\Keb/Z]r4N3/TCtHk;)Kldrh-r-VaaM3iqoK62:r]qq(f(YY!M9&9CD;"-XD:qFcjYH@I&
%l(kq>+ajbg#KX5\]9SA'qsirppL@AZ^rCf"Urf2_7(JZ<B\u#hhN.AbrgNa+a@["X]2[qf[.R_[mQ=7-CPBs@R40GO'7uRgFjg"U
%+6Wm24qeF4s)M/qOkLt.>tcVE@9IoT"prp[:D%$@.qZr<pAODn^2YMBNfV?RqsB#,oVcLE81H8n6L3fgoDO,(i>.F$3.H'nH'<1=
%Vlpdfl$iLi"q\DX#;u!%S30L%*u0[bnVOOTc5sQNk$@IOqR@HY!WTiqMp]q`'Wh8K*$7Pr:2Onog[9":OEi/M;JUXs=((3NB;keC
%M$^!bfu\0KgFR$B=*fe@at4p(m`=PG9`tC;Y"!#9G8SAD1U:9\9V!WX=l<tH:Wl`LI[T9AI^UBUD!\kLH@\P)N6!$pF.2RoWmsGJ
%4nb%aT;Q+Dl!bn-*_>+191Ko6Ui*B-WoU!XPP:*/N[Q]Y^L](P]:Ed$2>ofn7/[hpi.iHhOBS3kduj+_q5[W$()'kaKVRXIP4uBC
%/O_U7cAL,_&&cu$n+gm1hi!N+KB2PLSGL[XGJi%e_uP)iOPbp<O\`RYU?le=^5.Efb:U^.,+"N%c*+$SXd7$JA57dY6MC?Pp,b2o
%l4MPin9QC7Y8[PVC/jp8^o(NHmEb&:E6FQWDkY0_FWPP>UfIeC]ii\K%XJZ]b=QQ`gWKBhBRHA0#9WM`BtC8i#\^uPSu[L9*^-?S
%k_uLcm)D;H':np]2RbKqP2qS2pg+rRAm^V1\,2FW5!1e;)cuJSeg+UsC/sOW[!F@>T5UM>=6!*cC\.oo$q`?b>&6=h;n7-I"PDQ:
%8@&EV59Xc,/4Mc<5jVKCD5l@2IE9p@\@n1*8FCuX:Q"gAmR6$"a#d[3>XjJ2YfH7bjKo`('6O7Rl1m%*/2"d>mL*!R,pXQ+'41Oa
%TR+UakZo6CB6L+-K:NOX1)Wj+Zc>>"mQ:7aS8AYK?MD4,MtN(3\)[GMfGuHXQTp$jrc5U7#<m;^ICu_3+0SrlKaEB]^4YHrIUrKC
%Q_+7i&5`Y!?I@"fBJpLYM%X&8OKL>?i@s#Wp)7AuS#6Cs59!"GH16aDh;MD>nbnXpb)[BkTfQ.6&NU1]'$d+RV&P(/.^U;-g[7nR
%d,e0[%j$TBVBd-EH4=@AH>uq;8qE5+V:e9LX`jVQ8s)oD's2rI6Wn+DH)1:'9Ym$]FE"oC?<sqP`-?X_TNcq[(Q:r'.08[aFLq.P
%::b*JFUDJ#:BWS+58/Nn]&!fY9$adW9Q'/akMc*jSa>6YknNHKZY=Ek'F+SShC"lUh[*)ET:>.`MLG7W8n`]u6<)i8Dl,$DSp+Bt
%JPNrLZT:u0p\O/W%[9'.m=WpUET-jX^Ep;EViUE'jKk?!b.a<j@?p>FQNPAmkW)`3B;19SknG"Eo-@8?e.&,\"IdU`-YJWkq5q9h
%c"2gFAMLN<(1R%J%Z&idT#tLq)e<S&[4dMB"E'/%rS_sop"VNG^FGeF5/%i-2ncK_h5Z,:(I$OUj,"K/0Zd_p*dTrnIn+8`8U`jA
%(UlV9++XLNWLp0:q+C&dFm3e4)T@^uq9n<]T$Us?RE4mDFi#1QijnEpG:%fB*d3>tPMO<-NP&'07O%/pHgDu?n+MJZ,[F-RIVcA8
%UXB&N0Xs!7[!\B4l&O@V6Si9u1!gELH6<:WH;tG;P_m7U#TY>),p6LsF$0ZG8OT'Bm!,:Bc%i^qn*Y?)4PS`JO1:M!m0/tRHINc(
%&?PgUVrsKa#on\ZW/as1S\&G<'0PfbY^T\r>3Vf$Wq.WBY#QKfc#KS4/_cQ-P?E!C,o40I^Fnb-k1T:-GZX0iSNQSDWIS"^kbIMq
%'5XH7rD?O:2W_83IA[20=q,;'0.P*m5@>;mB-oo7YO8j4^+XdffXm76T'l6,7<jmo5@Y`U.8Z2bZ\,dScQiV3d.UkGR9)J@?l!GG
%0pB5]nuZ*Pqta/8RU5Y<Q0f9]:VpOjf7LC("8`MpIKW0%L$%dY\ROnH'SBf$AV_(@7%dYCX@jWW=#&6Y%7oII8T6V/pu*MnG$[&2
%S@Q:L?coRuK)s=,XSO-hI7m>=@s>l65A?:0apI>8JQ!>@qE94P'e`5#O.b$1amXhK^cf-8gUiIOa-T`hBTd,l'2n$pGBLB7Gu!Es
%R>aHX;5QfBEFXt!Tc1`=4fUU(:R`&`TCu30)A+uF0dX+@S<Pk5baDH)k(6@Njcmn,4ZXn+P@l4rVak(G_T@$li<:s.hUZ`#EG,?.
%5;$h\%'%7C\_%P<]h2K]1p.5Mm<Jht'+1</r3k^[f0/)X\VR)eFLo/nQB0o0H*B=S@V+>uOA3,=268GI,?FtG,#_8*5uTNI$f7do
%*Soss^WmPq<>MFNbWZ#g,>_0NpSL6u>,LcAW&7[)#=%W2XUH\dY;Do(=+Po;SnD<6!\7KI/PsQ^\\"s^SJ!*Pi2c+B`s3uV53&HA
%[W\:F[[.`+M(\FKDE"Cne!.XsR>$=]Uu:=Y(\^l!pn4_NJp1*#:'nQ?/g^bLc@C7bUs_FK6ZPcqOR`OF&peQ2q\dKV5u-KRb<["3
%[])Sd+D*mWK+1,\eE5.=+ZPb4/[5-3nH"(L!;d5TUCGiD2=0)V[qig+%cJD#;f,0qfCCHOZR%bhIG7Kh;$_pmAi!,N&F;&KTH&AT
%XVe'(MTsgRqgsftH6.+rBopE%h:hD`o%T4Pp.qp]1u$U6[bHV.:L;b,@([tu,>(XW[bH@W6",Ig[3/Of/MdOQ8$;;t>B1af*ZaEX
%V]_*R$21'2dr",^::Ke\,o;(O7AX5M0P9eYV+."H\T"-engY"/jDZ'NB,./*7b3C@Is<Jl<*qNk*sY=%KSKCPbbm\9"bJgjW5F0)
%J,&R/:r@-EEo:pNH?(U%pb$r35HZ_b0`CBT27IpUs.M6^NNNrWZ7E*?ZM4>n5*R+rd6!fb>S)>Mpn7Ff0S`tD_F&i%d#!51A,ikD
%AhSJApOZ?.N\1sX0<0YP[oMhPWI>q[NNmi=rm9#+j'Z;uDp$M[a*Y(rjfOWJYmk1*-7d&s2fusO`i`nQ=i;\YI/Oc4Di`LL[9'p@
%HfCg`)\bn/2s\FP1-fM;J,XoOf#;H7Jc6RmBl;LuPOAC=.9rVPC[T1@n^`a^q0`1RoJJu8QspKZ%J&=e1E]_:+_F#ZGqE,&>c?8Q
%nF<e;^V0iBFT#mod;68^iQ$WfektHJ5r$cgr.#7jIpZj'`WBNtp;t=ah:JA[`VN&b7Y=$28ED7DE2E0Dlil"%^?@aWK.#$hZ(D4V
%5U':PFXaWq).Q#sVMS"pA,uKCR^oG&Ui:]SAm;t:6Zu@.h2Ba0;G:uW:^G&qKWF940j&;Zdo]Ll;J84c^(FgV&*TOrn_Mf,m;'<0
%SA36s#@_H#n_R'?;Hr`u:CYjFkIXNLTs>Pl`T-J;8,(n(5,++Dq"($24a[)ZO<&YX8rKmO+eiUlA/D(he#*lDUt8i")q;(5",^@m
%OqQ<#oTFU5Aau,!H8^<3:r=OAY^T8_eM6W)]TDtm5G[m3B-EK"-s%jf?&P&sa<_:o.$f?2peIn9IE\R3MkgXc3Rn%/_`C]p>6o.O
%7pVSL@mYppU9nukPql&_4U_[-JsUCio90>O^Ro5iAae9$=?I4'?LA0*rT\q82?JQFc#N%aU+WYFn+5r>jJr-$-#Wt8;<e4[*(CnV
%pFBGFKuS!9m2q@\air?0emSHeI(RdSau9NUE^VmObJj>'j3SK-83SAiO2]0%Bb4b`Ur`m`'ngJD<t&[BYIWK1m5b].&p<C\X%4ta
%0hd\A=8Vc+!HXe]!<V;\%&WAt252gTA<5j)^DqN/,$(T,lfdjd*:4\]Z-&k93-Al$R$?3,7k]qf2Dj]\R?]"]g'XJ$lapDFp_lC>
%1Q/)7dl<=>;@9[uI.oXb<LFa'NG,Os;&>V8ZqqZQlXI8@o9&L=f?u-#XodFEEkB#;!fN_m&,C+[GJ_)fhPosCM9$ue2Sc4i3-gU/
%<Wf=7]lXmC#U049]K@.*k0NK/A]!Pi172sV>ptCJ+*2e".3>]a+WL5^RrkIWf(Eca&@uEU0?Z#K!*,J@ltZ?a.'GS%i$'`l-#Er4
%M>Lbs?@1:7$&5S#:n]>(f,NliB>f(<-Ub\u\mI;.s00M==Cb]r^HRql/_eb0:N!bA4G!Xh4]8an8i^,uIg^*c+6$lM7,BL/Ln,G!
%d"El9l+m`q,pXdp+tsuj#<H_tntQC/2OSg9#jQ?c(emi6OFnV\3:,m=)o>T$9W0`@qD;(P+M1#igkBe/5VI6?P@GWeRI&`:5=T++
%fbeBp/^t]G=Nb9i-g/+Tjsj5-%bK7u29)=b:@?_"+5=n]`Cd?k+E6n#.Q&3fNtd7W5'6=Oe&6]k`@"Q^;.[lhHQQeq]XA::bc/kj
%086V-1gpZIcr_\!5?S+'k][,fO(Yaa`93O?5iAGL9r[4&Q/CKAlcHd-M[&j66^gmEVNm3,7]'Wp*,IA"\*5QsC29#\4OG3bdA]fK
%-W?@8?`2dl\M\IEAs,[KcU+V\r5k95dDpjCIe,t)<5o=TW[H\NQ%Z];g6Hck2i&#C&m+[s(R7J(F*`9FqH+dl6jp`$@P`AX,K(D3
%Q?I#^P[RlO)nB]cCr&TA@Gh22)IsP@BhY/e+faGB+'/Q:(l)$V+lOl8T5';fj.?;>^lqB'i[a8(<*7haSp">5b>G1nl)t4Q]:L&5
%,T=A\2[AoPeZ-(W4cor.Bs6'ZXCPCU`(GRdGf$3oK4^#upDLgfN=RT_:s2[U'co6QZQGCE7o0Nu16cmYjR*lU0`;.CmBL\m(/R/m
%ooH\n?hO?oq3<?4qpCbd_rtr@>&-lk;W7EHL#I/fY3YWQ32Y\E,5ZL;34q5qSRoeGl/TIhYWR/hKBb1;IZ-gYnj?F6(\\kLo3mbn
%Wl6EYq;hjLjieVt(Hu^l7I`??4lm#+T7'Kh[0&T)p*4bXX5J_X_r1(0X'A:=%%f.oWW;soW.Z,S$/<mSAsj1smUg1G=#5)q_02:P
%B)P[[FS;N:Zb=W>en22rj#qr+;Bf.-0*o*@AM"]-a<a8WNP>XRCVXdG3f4[#XV#DV3fY?GM+49W-/)7AC4SC4cYR$_Js$[&^uFgV
%(OX^=i*;+TZ\1EbE703YSjdjH$oSIV+4\%^=UMkg+Mm,(XP)d%),6m>U[GrcYs(,oG/iS#gaHc]WnEM3!n<Y0TA6@G&%8=73oqcr
%q-qiqGRP\-4SuI=<i(1"CVK#lAJH`m-[T133lJD/U^kjtkJIroH)$o2+mQrerGOk!VX/4`LK4<hQDO04N\3R+2Ajj(pG%B(qZ-IX
%`h;8VY33F!Ho0He**t'+YE/:6cE&3*^]l-%ldaG34jaHYh_\OIJ1hRiEKGoo<b!]fWlGRR&')NAW7)$Vl%pYL7"/BP?h_Fe<nB"'
%n`)\LY.o^Uaf@F^Q_ic.OuF2'_?["!e&XAJ"EI+-/P4e)>icX.<tf0HkT#IF#7!Y$fXgsBr?q?k.WWh"K[<Q`KW6daM!jdf_kL=9
%_%C/MMYE+QR+^7JH=?i`\/tLZZUcN,AHiE7r74cu?=Ll+22rGe5!B=C#QA5(%J+V,q2j=bB/Rn9"798LIJ/PXK9nI$qV_=rPTGTJ
%NIn7KE;nUAh5BlH;2qX;?*>)?:9QIU=nCbNAcMS#YV1ooForB!/kksL9h.jZ73d"<kETt)9&C40QB+i5=1U5qkhtWkMK@DoP#OM+
%]ufX_:+)L$9JlL-43_`;.R-l,^UEaiE-k5/2a0hfY6q[-i:0`ZOh;Za+p]<+p^<Y_?Bc3<)!aUbkGI;TQ%&4N3IakE2B.DLc(N12
%S+q[Sfpe!rFqbW@n#VNC[Vp=ZfI6F@o[A/OoJ&lc;hM;HU>5';;,?1.D/U,9KG'#LKn[?]X[0TsHlIZ08=$NLd!Qb]\?edp;p5`G
%asoq/)_sQ9/\Yn*R>/*B$90V&G!qEs34pVcCp-t)W<m:WZqkSaGa$d6;tXR$!s[6n;;7\B59RBU^nig+X2Zu<>2JWn[mVWE+aj;]
%7+?0m[oIjk-Gm4B1Y6M@'5BFJ*M7_(3ed4W^!TB<Cj6&/(NFA,BCcl[V^QgXU@@R[V*hHC;#dPIH0<r<GY)aMno"E-N<i/%?PF"g
%B!iUJAuLmh4/mL_O>j&$m='/<g2a?eHe)>&d<tn6VB&P4`QQL#:jJ.k_&aQ_d6n3#mS(Z*h!AraO\&!6bk^Qm%Ii\2V8?;9akOdX
%_/KqV\-e3f(-'&`];s;If"ek1;9uA+^OIXHleuH6)H.IT-W58lQr'R4,:/1.TD&s[iulB_dek&+o,VXHZ5qm$%g0lT><?5Ie_Lqh
%M,Tk$J%Yf-)jrPbj$)_k+]fKWLY`'bA'$U0#`S0Hj'na.FHcUtB_Re`L[QU!G!&bPR,%t9C*6RGf!gP*a^IQgEi(BN\PB"IK7$7>
%J^-)MoI0A9bW$ArH>3NEpGM8K`_>;9YtC"+?a&U?#ESTI4pniVYkJ#m%(t0F7)W-H`Q-P?K*fa4?Z%OeeH*tq6>!R=995rS'3WRW
%Ytm@grJ`3M67eJ*Q2:=&p[dQq7sob=eup,oF[F2GPOI?=LafmgQYAK!1"cU;a;Y41FYD,M*a`[N0)5^nq&N#e]da5e+$7'%_)(Z'
%rr#]7\nER91aB`tp5TMhk\O<l?WF>"-!#&h?g)U3'<5LAT0CjK+b0_B`-`NIJVOgh$g>c\E\hH2j3]'t(PWr'/akA!1t9V&<_mIN
%0n%RR%O0@0O<uui[K5Q"qN+W,850IN19pIQ.tH\-%8U@D\^!q'^3WeCcu/36a53h[(J'`0a#6ob2*YFtkEmpQfW`Mbo(];,_r1'M
%=**u0DRoA8]G(=4529$fY*dJ#MOZd6_^rSb0;38e0E9\-PWj9=.6#I-o'5MViR-GGhO%=Np5@1!,K7@>U;KT-X,.jWPsS)<IcoK8
%V=&Tg=C4%1GdK&V_oYF@j\o$2jT3MX4-Q>4&fIkH<f(*+I:5U4Rdmd#gXpq3dPNd<$11Au;Oo/O];BC"o=[PmKu3.Q,J,+W=1tjW
%D/)J"?J?&9F'_A0iLLYb2^`+bC5M(u%H6[i<6)C[/6/bEJ]+p>=aZ*QM>YH0C*hbFM&V@Clsm=fqoX=\<_G(QLDGch^7=eLM$[L;
%S(GJ2-0dU>^\DqBHmU!8&F=3.&#Sun`O"02X%+PGksLhG1+1[@rr?]&`E2!B?F*?[Z,1VWHLZZ=CfGm@SIVaj/;#7G:6Id6lWg:(
%kim>@V@/(>*-5D7Sa#/(kpM`J:O\j`@l5QaQ\En,D?mi@aGT]S0Vem*&Z,GmG?;E6,%JqWU[*Jo,ErhPc0:ZikEZuk@#Ot=VopNa
%/*eQdh]M#5dk+#>_S<)8p?>6j8[?MU.'TOOg6T%0@WN.cmF%EhGH/(eqekfro_[F>7`XS$gY"LIAP"b'D!-\4fM?\HIf+e&?Sld,
%:Tk5D\gH%!D,r<mV)LW<*8'eB7COJ.GXWQ(n=\eCed:nT^Uu(>7Q8&4=F'O6o"t;"(R<6IPAsIPH):L\@s,eL<U%7r\6rP=^RW`%
%O)KL;s7T>_s+rWt\+kG5V>lW.1U$S'3MlapCtQD[s5fLEA!#BXpjY<#s0V]A:@\@)9)iU9A5;[pE_?AJigX$I^RW`%H;++(irA,)
%ri8KK2T>^>.K*<Y.^1B$?V]k#a#Cd.IlXA*e>ltWr(d`/LB;i><W@.gF.>5JDGYDj5G<L`P5f)0r.Am$'l-ri_*@Ttc'8,Z\_o[_
%CGC`J?%$5),[Y8#V'3+,8.`)]7e2j0clmHYg_nP]*n0$^K&_"_V=V=I8RqeOfTQ*pdUFNt]rn3BU9e_0+b!aFD#2l8PtZ/I<s0P+
%HYF%D5?'1d2X^;]mrVUR)f!C2)g.XN!jeeY).ms$m\XGKp=p5n9qe]a"g4HK$k\IL)WfWl9sq21#_I7E#egE:hY+qkG'8$gK^A.n
%(6Z=k"Y')NXcK;8gS`$XEH.cCq&Bd"Ob7@?X6Z\ZB,KNE'F@55"T6*8&jkG.?dg-V4t:PK%&m)1j`)&&E9)`?o5/;VIWUpsLUGVJ
%)rD0@.&<N->J%^<+bXgNjIiJrZWlAZ.2%%hs3)hlacS#N+4=m--"[0jGs+a$ir(2)JsHOff9>)bK,??!<^62HZeSZ&#I:@S&C>WO
%r<MoJ;4&a]Tsj=f8A@KRHp)u@)fF%hTkjl<NFesR72#:"6Qi4%6!3#oQbq5A4cqqY.D$,tMUg]ULZX"W+.L;*fmb>`k6GkcZGdj$
%61ab:)Qoa<#)FU6,ic&!X'V\SZ4ptY.JRHT&1(*lJrNs@F7B2>4M0\JPA'TjfPg%2a?2X.q5)N.9]7\'PJg\>eaE'&[K!U'T'-O\
%O-'D2R`_^"L%L7a8AG`JppjAupe/#<CU=]`XH`Q&hqO/NRRj!hUbh5d7fQW5_GBphV4/-4-+ebGhalMX'gJ*]jGgMnQNE8Xp-tqS
%k)$0qjR<-3m9Oon=d&Bh/*M?D56aZqC/pi]m9eA++i%uRL1H<5(ks1eK7XRb$++=.\U3N27c`Oo[:U?rEYH<G^#!%%<E<.4AAfFb
%J+^9X*e3bYj7i/+s)J%uhbE<Q^ZMa"o@O$@s*29Whd#n/^;Q/J4Z*b.SbmF+r^X)unFc[F5PaJlqXr1Kr$024`Kn8mg?)s0pTaa'
%(PT&Brh&@Zs'kufq3IMAr[7`hTE"N_oe6=?s6t0f\9r`%c!UJ7"TR@4\[?@XQE#;=pi+RKN,OhUD!_&8C/3Yqb]RCl\"@*\Du][W
%Dnl5'Djcdg4@f$^^<B6beIomR>f*rkHKK>tf%^+8c?[.ur!1:kYtftQT(4`cIQ,tKSo=:9q<RpEK;C;0[?p^%q"/LliKp0FlaIN8
%F0+W;s89Jn2-sburS*O-IRZAj\?XW"V'e19PPqf=DbleR\p*>+5,VmT^Q3:ZUrJr`2WgCt_u.If^X^CfI"nc\IfFG#B0ThNi#]e-
%k;C\s:ZhX@bjQ3<T+?jrT%Z]nMen?Meu2_&cSp3qq;4f:.qF,)OmANr*kmmpf31l>=oFc+BP"=LHdNPANEYLee@CI.`,^mKIEPDp
%C?)cN1qdRjKBr+no)VI5_VCq\@iG2[V:PH6CAQLS2^FF?\Na2bqgo>"EnA@&mhb.Fc`,1Xc(<&U>DS?BJ.^t-M=\VL\[)A"la3@Z
%`q$6l51`^b]Z8Cs1K;WZr60<9n-`00?bGJL:?IYUaBd9fUb_+f_3EHq">UVu>8-u6PKE!Or7PG_B2XQC@Xb'NRr?Ued^P;T@]SD+
%PLI/Lf0+NY$.UIYJEDm:Kumjg4KX*-cQ%#I`R[^qcspBg;a&2AieVXcVi]]dpBrKc0#dGabnlFN$7_,m7Q;?%:6<`d[:'ShD9aR\
%`[LM$m+S\WI!]%2f9VuKg]dF#2W@)Ps)OduNTPP86AdEuMr.EDBCGYqI4c`Db*p4-QUO1Cn!Re`c./7t]fueSjm^dkiP'g40u'=k
%S`[N,I%)>o%lSW7al+a8j!Ac<T0(;-+jFS#92$up]Wj8^.?(g=b9+OF%&Z'R;N039$XoNATpXhEi)B(#6LeGR.%XcuJTU=oK[q$Y
%&W6lU,4N7oB@mfSB85O^Sgg>X*6pj7f#*3CTtXki4`/G#U2H#ga_]MRYj4/*[\#793gbj`Lk:"(j5hjOG.g`l55NU0lRgk$L[:GL
%M+ka-$%J%AF+8J[NNFjHpTe/on%8&&f>&HF[E:CNXf21nT4->$gCpsGnXd\,e2M=uZL^NIAkt/Y#PTnG$$Mq\F.`EmQgs`Erq,Nk
%qVT#[NS+:.pN*AnNir2GinXQJSiT(]$?DOQNNa`MX3ICIA=i/Z1`g"R-Qt6;!K3J]aM;FPER"o#0(IZZE?0I@%*kUl&]dX>/I[Ir
%pI(*R[aT:3]B].%C>M&YRpS"sIl)gTd_.KN^QY+BQq:*EEV:hl*fXm:K__8'aQMD2o0?bp"[D/'r)oF<+jKWHd7O4D(4M<R^uCcS
%q.4I?eFr%E^?2<)8p&D(I(.[\q:s2$J#f)DHZ%8qm4>ap-\QD`Nr>E:q'%kVn&^u![DpCla[sf@Ri1-A3D><*qD13HeMbi54*+VK
%oTacHjr9>-DEc8GF-EIF3(gf\AtH/HWp@'/3/-O2[X2b6D11eefq<K;IP7199U=,qWSnhda%JWq'0BtTf6_7Sg@;`"\j:@!-3(Vq
%Ujh^1@8oEgT,OR`ZN@>062=(Cp1JD09S;J>WjZ?Mqoe%_ai8SVc0042;rN")2ed#SiL66r?5r/e2fmaHWOfad9g^cTf<U63N.m)I
%GKgRdagGgWYdH^cAS1'/R_!-[>r:4NU9,<_VDM)?HXc.$MIp^$b_J2dAr[:G^Aa%)%fNa0^]3iir9_uF^]*Vb?1XaIUp!^<S'RJ=
%DGFH,!ZBBDQ&M]XV.*foGsHV*?G>.#9gs=PDq]e+lX#UFj"TJ7@;%->Q/=`"OWB(Gk@8c6nh87>qhn*b@a%S7FrETD;U[Im3\4;4
%3bf(E&n2gc_ap5;gsP5O(p!t[k,e4lCmlbJW8ZjIEA!?`c<m6[EgVUfgPN+JG1`=`p58f2]VAeC=nT^)E=I>fK6'2i%Xhi.Z$-[_
%XFeT?*<-!s([^fbX.1P@O(afN@[nQQ&=q^-K$=gt>4J;"H%$*k\))&s)>;0GjE[7k>No]GW\ir11(tV=hKg(o73DC_m!AXfn+o0;
%5KBqam]h.oI5:MqV>%Of?H,/TA)\WFa1ehE^@S!NcePt$A*8cpIFE$:I"n1FG(0;pG!=S!8s(Fk)0BJ'^Y*8P-SmJ7KN@Y$lOZYZ
%N#4aJ1<@3L2W^K<U%]AiH<-Y1_1U_G)0X9kPVf/0d+oPn?2J\\m@L=f-"0SD/5E>1"ZsIfR#Vs:kL_YX&+=k7cLYum;jGR*Cq#^@
%;,&U,H'[sVjdEE1P:&kBasi0FC$5S2O4_kgH.TSZlghW%N[>0=92[Z$U_sL/roM"i$`%u+ZN9W=PTW_diprct-gqtOp_C"<g4M1l
%T&JI=*Y9c,^sk(7R(FFjCh%#cMH0&-()lB7Hu=c)!2ad2GsAHik3%j>VAiqaJ4O=@7]fh1p3'nQ2J+jbW/qmEFa+]ZL0463Q$$jE
%B[!sggo/)?eE`S![*HscgEWHU?-'8Ig+4+"?Qd:]W=6<Q!O56'c=Wo*BL[C%9j8<YI',SrZj43jc0bLWSqsdgL^TYan^K1S5.>d5
%H%UCVTK)ObAp+2eb"dlW^5.93-Kmq8[0&eI3dpm9m9]+)*m,$h/<+pQ%hSu]D6\e'"O2W`T%@g:%D"H?W>B@h96kL1cBfV8PNu%I
%?;=O=f1LFEp/Ce(pA+I@5!mjSj0TWVP<R%TZ2%0[J_$;s'9e?&oLnu(c#,#tI>]iqSsWktVRep1O/Ob,*aZ+^5dQ.9elNK[B^,0n
%b>YRP=68N'p_\AQqG/sm(DB_K@0?Okh-?tud$.ZV/mGoCA\#'RHZ/rXq^;,"Zh3b">4(MI9Ps-bPnqS?IDLf?T#0WG^*]*.Bjb[I
%caB2pKFJ',!ai1:j?'<j\alID4B%$')KUNM$thq;o8gF3r??aO%:+&PiJmQdSf8q:5N]R9BSU\ff4c'=,I-X*K3[lLZ+7&L=IqVM
%6$b]?'oKIr`pigfVXU-c!a.3oSN3l@)YD$'9sF.I0qS451j/c8,)gT[CZ?'Z"9No[2c!Z;\nW-sc]j"D:'^=Pn[jKLX_*%WBgD&I
%bthY"P4moUGlMg(['&*"hRE=MEps!A+u<Hg:TqI:\T>B0AY*.C<JC91%S,Ae1o*Woh,e1:Hd8/lEkV1dR`YDI-dhIdgsbW2qj0+=
%IFT52]$lH/H[l"\E7XW6dk<I[TNNAAE[K%l2>*+X(Q0iQo->:mor%?<G%'(lMsu(PaMY'@?l*iis'V?`R)J;[HQMq1Y1_ZA3`iG'
%cgU<$QMkt-.boL)ST\2(3J'`P?CH1=84gQ9i[36N3^_O-01!\2"3"t6[oRA)c+S<%pZl_@2t4B(hC`Gac_fD@3`iF\O'k<CH8kkm
%DkDF9937b&I%Fk;D_MnlGsOBD6J]7V88+q?cR7BC\9"9C\'3u[h`o/ahc@6&<7oO$2&?4/@I0Up4`0Z?)9XD[p"L#GHd.87BS$'?
%?I8d%XH.Z]ZSU_q?JfBp-Q6pi62@e_--ghC'iI`/mfQ.Ld1\2"4;V"GoS(un5/H[E]$pXWll+d\m:Y'thb1A&So8&UHqVTiF0UaZ
%KT<JWWRQ0ORqjI2U)`./Uj\T"XrABlDk2M4_1(h5>OXamDppkFIE<E"^<;:5>K6i!A3g$:H0L=!:^<+X]1(+)N%M9p*u3nKY6oZ'
%ritp6OR'#-k!K%%Bh@#oQFAh;UH2KDOfpipGe_kj@B(&`Am2bL"QZ9c1[b.!,R$9hWNJ.R-eIm?SV<H._D]s;pc3L5@Z$8*q*j4,
%99/5i5ma5:X?h#^<>kB5]72p2(I!VWOaME.C\^cR&N\NfN6:r,duUC-+1,co1R<<=&?\qD`SCA"f8#blHLuHQgF5)Q95u1*B,B!5
%C%/`o_>U+RA0PJd'r%$DW5%/Anl+pgKh^\r/.K7-;`"]#8A9E#8j!B&\0;h$L.bZrEo'C]gtkX@p*l>T[q-N^:VO!"',R%3H+)/M
%<CgB<50X](BCd#$`kDiH)E>cOL&p5N9B4G/1kHWP1]tr6RF(gTaQ-Bf;#hcDOoF",B_1:e[&=.?ZR5jt@-,Y2V2?hgdAFiP?LaLY
%+^;/lGsB8ESEW0B]$@O:>1bsNWtrs-]6TQu9.VguGs<t@=gD!&kGfu="!a1WP'Gct>,uS6XP[f1:Wl\Q+a\S60H2O?QQu@DVSHHN
%iQ"IY)0YDL8si-I'Y8a=7e.GZ,Opo>ObRl2CYF,UKE%l-BhXAGT>7kFVA!3.)+I"DHu0@M0T?OE+8j\7f`$jM,Z?).3s%X2Vc]GJ
%B$.6MaTCK4_Ldf4M=`596$aJ;aEZhk(;fFNl$"AtD^gXD*[1@LX+jkEX=q?[1f3'n)1c6VId;/>\o6[7;t'$,8kr+>3+@(?Glc?g
%!@*i4^R<RKLt*mV*E?@?Ps[!?-P%Z:OD[_brQE$STft[DWt05q0&n]]eahY:/8,\Unh,B!9)7t&e^JI=9dFr$0Z<l'6&$)#q2)N1
%%BGXB+E8l-+ElZT__qH?6j3:S=HhD"<[u%@6"_@uVX;S5r$48;0`R[M6,PBOTL]r4R'Sf8lic41qKWG"K:!&sOjA!L6J,(^YTSLp
%+;oI)qurckRg:r@fi+=nq:\)K@sLaYWe3`2M:!@jq>M`/B.@dbR+qa("kZt3Q*#+A"4b]:pFd>;#89OkF%PgT#YK`4R'NiSq;jPE
%!^9='j1YjHXNruQ9fqHq8bf+[d"cVdDj#;f9iVWR.q0[Bq,X<t0sR81EOOa^9KE,Y?q50[$"7q'[_rI6?%#"L)jkkm/@fm4o/LTh
%M%oPscZ@+Xa[-9NJT7/'rjiGN3k/oW.mD,ZikpE_pb:cuKYm(Zc9on+Xr*e$U(*b`PjaGko6_3,7DJk=r_L!5K2Zgm-"npo@]gb&
%j9WeM$m$q[fK:p"4<to4XKKsK[`e52RF+'$#et_6ZgOk<<-Bn*;[EdMR+o(UJ\c^*%3jut@q1T+#+6*V4&t<760?]d8B;E^;i@,h
%)L>X2i#/(^cB<e"V4ndF3>YNC)o7<F;ILrCX5`tR_qkB()SeX065mS[p[GO%r$nQ`h=>8WaBVM,85"ctM)=GT[kEIN_g4Z5K&gBb
%UA3YB8?;Rq$_(eAgYH<;a#VM'86LpmmPK+M7a-m\ijdfGbrJF<[=V@<9q]Gfecc>(%q+I$/9BWt9e.ue+/;WB+Cqi&j@SraJ4uBo
%5<D\3Z@c]dS\rN%IhuT4(K)q;OrPlRbZ"Q>p(59C(n'].IRC>,%+dAc.e21Wp_H6ZW9hf.*RWkmLep`rU8V;5BV*Q[l.A!lZh4gF
%Ic4?AMGGt*n`h5VnMKOXIn&)%mp@]KR<sJEoVmHDLd+V>MKDm8`3%+[a50nB)0gnlBqC&ba>71*mi-3m]u`\13SGI+)QTsadR,^a
%.5Y^1[MY2O_q*ne,^$VD+AkD?=BT"-j'oTN.D\AE*nOs?:,(ld"fNh9*oC9N-@:Q.RmY'[QaBb"0TTYraLjfi]A,rI@KaC)9oMQ5
%G<T-Y?D#:57fLR.Yk@uAj-5R0fqB^H)p-HWh;?5Waq<Zr<Hb9P,3aEF,;5hG=7*7Snses9Vs'#A1P65Yo>,p!>r@=K<9-t4(Of*-
%<^N%DF2lFA=9p(oo5L.urcJsR>b+L2^<m/9e)n_ibf4ad1NMKe3E"0"&VW5&hLk`k]]=mOl_8-cJhrr&fopknrb9Z;ei,cg4"K9K
%Bj\8<m`9=LpX?."f0rkfjV:U"k*t3QC@c-Kf3fcQ;dJm8Y,<l4m"Pn#(tD.7!/fI<<RU?k@4NLT2tThZlVfdqL?ou/NN_2^EO2T^
%S_2P#[kP(1"@A>Ekg,UB+L4Xk7@.[2l=(75?WT+FkF@Tp\r\Md?82m&7!j=g7717g,U\Z`a":U`ifiX>_*jag$&+mu,U+S$+Ruot
%O,_8k:B?(%HE?Kt(C31g-'nEXS8G[*oAr=4)>&diV&W4*P^H4]6gB*T!Bm4YlnabP4=,gMEtb@3K63ZeMUfo5"J,]Ab[R)0R])SD
%4QScLURZcbhcFB`LW`O%2KGc,Y8Ea%aBW4J#mlWV\5X41ZAC"QckIC-<&*@'>)q#51A/k;X%%u7HKmHs'Ss39<jH1'aiZ9:=I`FN
%'Yp%b7T<A\UE-0@,]mb39Cmd`+3:so*eMmJ>cm?DBaB#`OLLqj-C/,AUCg;tK2oE\<l26GNe0p/SW[M9aZT!l*n-ajML6ROOhNMN
%[m:52eQ0eW`M6L;>!(?GMX7?+81qRqoj;E*VMf=:JH.IMiNa`uf1=t=@j>H&c/7>(M.5dc./-_D:@6[l#M97-%9X+>*+jL/1Sb$9
%4Aakf$Mn_/:!aA^P9Em")<jKBDWB#p\@Tkp"-Y(CD*[p$g=)(Q8E/#R87&AhS:=_:f2Vsn*ijD_]e.iqQuU<A@uPHp?Q<h?E@raZ
%Cn<'Ff[:nQZN4TTF#X_ZR\(CsS@^:`TZDQ'.PVn!PUa=kS\X%(p*\C,0$nTDKju(\Z<;j5*3S8;N0&io;0^^rS$V&([Z(g(!@I)Y
%o,g:)dbc#Na?8MZc(om/ORqF8Gi#BSOl>c._R,fA+UU,?W2"bU8UjNnLB0HWiJB/q2Q:^3LGL"b`ehaVC(][L8el2#Yf9i[F]C"=
%5hVHX"R28XS$c5\MU1EbVI&c"'XRlt&%&K!hn51#<`cVcO)(n4$P(\`8ru=]V7,q!CY"K>"fAO1!bY7oGX**]D9_gF82)"X:!W5O
%M1AB&EeFl>pi^^C2_kq9i#@q75T5dT["LdC^%e$>8\:L9Q&SCBo\V);>;jF6.ZoV@=hF!+IjGTCLoHo(G(sI,I!(S4JKiBt04aDu
%bP'jo))?-/co!Otiq1<VPf!s@S9tH^Y$b+!'q:<\N//-eDGZFK0IEXr'fTq(/33RURY@UT$\7MO&Eao9_TAF/Y=s7+B,c3Y9s!L,
%]55"\(^NZ,m2pkMm:WV5khDH=2TOCB,blsO*u]s_!"77#N8/esiud?V5S)H4oCE%[O">-fH?r/I+HXD02+fXs@$GFuU1K7^/0Ho9
%$<i%ibg^[E4"5PllMOFG-/sS%-OW<]K?kpA;91kfodkn1R'kX!r=u-n,>Z7`:C_EYgVV5EX@78Dl0#UqM0Q;"dA5\2Oge8T[Y'D@
%2LZAe9o3WH',J"rWjY(!*plG!3iB5)[h,;o];Wl#eQhKePj:dD3)A;]):Q1E)>DHqVg%!F.E2p:cl_i4g"';n!qV@r7>'V!#<D_K
%_2;g-?$F/jU#58#3F_o&.=V'f<G3=)2d4#iZj#h?mG$u9s86n`jhmc=;bhT!a2k]K_7_lK)r7W9OGgHY0X7%tSZnMt\2db`N3f')
%BtCL:qIaU*]$lY?k8eAulJ*h:i/#i[aSu%Z7BT\?2h))Pc]-n?G+.!!`!a,sgiOt%C00daTul=)50n<2?"'ZL?dj/JA&R&CVi=s-
%gXmRt^/Otq*nR5us0[;9"n#PR=^1`1#e#mY>?<jb<?QMHim82+Y1S9(<2TOBrdf6=m^&%eSZN.W+n=m/&YC-%c[M;bmpFXreeMi9
%IZG#CV3da1cID3\UuD5=0+6?Q<.Un0TaL5bF%hD6"!Q`=l!Er53V)>,D[Xbf]7VN(mH64:Bk.M[@n83$EUcD`io%Wc,QqYfr>)SR
%#aQ$hdCefa3u=R;@lLla3RVCo#p>pErD":LO7LsWCfjk-JjD_9/qacaUckF^O:Sc2q\C2PqHTlY-rI_HFHH+,K;",em`&[7EZpK#
%'Uq>O'Laah`Me2*MG[FaKjt^\U(O%bP8s.552UdSh(d=$C9u9R7ul)QEW9`>fk*i7IiHLQY.fCrY[h;bXui=mEAX6L3T@A]Nf\\>
%4H`UFpRO3_4`=hW<;TGXKB&d[CS-:.mB-`7B3</GY;I@02hsIYVKa\d+67U+*3@n=giigF@dh?#Z4V/=Lha]-.e_8n4)O&)Sn$BN
%l6>W5#BrjD*6qo@g!5Oc"P""d?)87P_/Os]m`TZ!.Z5X%E1/aQnn,180#,F`N#M-=oc4"dS0l3[#4!2hdYNidpGp<?f"q')p79?%
%/t0)E\A/#`\MgI-N>Bl!0Fg%=>]=bI<-N.!jDq)5%'pfLp"TjO.b<@>ilJ`pE8:Q#Y=bU*QMXDr\Xp:84fWU/.6kF^lJbnFq?oIg
%Kgife:THu_c8RYX@ejbp]7#EZ(/uc8^UoVdUKb[&0#>jXKMW$3-HB1Qc[,KLq;9f&6=%6Ba?HVmS3U)=#`&a$dAKRrRVGL"cR!)Q
%*?JAn*q#$>@cUpMoi.L,"-U!?A]<c!f-cVq^T36=T#``elutLr/n@/\>K*?VS#an`6X_P?fTWFJJFYS9a7gR%QuXKe*ceMG(PSYF
%*lB>sF]R@HY*<RQCnHkEqHOa^@Un:9HS3Nkg".l]qYJ[SN*#ralQ<:pe"H\UHh3+?-W9lILa+4W$0du[o+3]AV80-uCt[PebSFUc
%+aMM>MsqE)*4_2Y6:TIMNN^45QpUA!@EPdi(XjHW_FF;)`>UY_T+qKR@H<6"U;sYrb]ZfBV++VaKtQa5>4?2A^M6BfTGWZ:Vi@50
%D2_=\<DFZr%W-aJ_qXim0'u$p6$OO2&'`W]c.^"p,\j8"A:iZf&jC+?qo2)ZWHiAKN#9+nk@"b'2iam3ql4E,_:P4nE]rl!)Uc@E
%*qP.GHXH5G?&6dsD[Y;u4ZCC:jK7DIB]CO#6?mRn5'4gHHRO<UmR.n\L;';CLm;257TR1*$D[fkqbA*@T!tsfWdUd.nt4gchAS=T
%Ce(H%Gf@T'WL?aa<5b"63>iVke_kh:GKo'=U<I`p$!8M2GIikf`&:).Q$jdi;-CjYp>[-tamqabX7j?\NIH>gpQq..'K,1ug.5(r
%=@>q+k3XjHb<_S^1U*_<=@(BfqtZ4"5nh8OZlQF?AXiL#75^YKmlPCIHJZ[8W:le5^jg[@FmLSRYECm>%&Ho7JQ\Qfbaatu_WW!*
%JacZE!5hHs#[smn^0Fbq2qN7^MJ)ugfd$=T@IQRYkCL^(K^2`^Y8qt"XF$5n7k1e*\<E*_Vk;!^l.!>%X@b_j#M9Pq*7R5G!We,<
%Y#^LeU_7)T\_QNff#+`Ljaq@gajR7;ad%A_U=$WA,fc)*(a#O)S.>*k?S2ag^#D%)UiJ6i`jVC"R[@[&2fR'4g/QNn:-Vs%_a82*
%4@pdR=)mB]=$Lnln"HoI2?/IOZcp(7>[q^7-bA0]24b!L7VbXm[`L"rXskCC-FEMKA52s;pc.u@Q2>CTcVM%_lM8G<5,9PHll*AY
%Is&FG=a(WLZ]S]7?,-2UV@%Z=nJ.M<&qs:I7q^6d@Y,t?,(e*?lgpZ/XcI;EPABSoea/E6.@dYY=dA:V5:lKbBM3[dX)4amr-297
%2;>+2H4(n`dRQY[r_<\#'XkGbkeV&P3#52IpT,gB-kcg&U1>=fO%NfAU(YFB%RX\^`LL\)`%eQKd;i6+80ML0EFkYh)#B`:d"p)$
%W93F\039;EY#J4a&4!ZlQWrVVfdFp`%Y?.(JmFY:ldsQSadIGN4tB='RlY/%`S@j?Z.hSp7K=O*,eHprk$t=KPm'3*Q$=NG7P(r]
%jhVM5GLEXN6F0c4W!HN[e%F)A`=lJ69Xch9F\YX(mEh,83eBrXhj>m7eU3dF(NMiD%d!uQFXK*TYNKcOOg7X/g.h<AcO,9WGBuH-
%arG5YC>Z">#gKnS`tQk+aT2`3e`$%\*mmmQf\#?]Kj53A)fsL-\s&W`fCLml5c$<fGe:+N.lM"s.=DgpZ`uZnIAcWZ@csHlY#(HZ
%!tc+)_+]k$16]$GQ^i$Ja;sPd0ILf4SMn<jT6J[J,_Y=TjSPsgJnF_Il6i8_FTp^);6;pNOahU?Hg<\[C"/VS,lhO*8nHD(&Z;?)
%fo8mg$@jj79>mU<RStd-]AW<,A&\2qK/8lH?biO!&*-uoA[16D=F;QYmo5Rc=B,R.SU7NV"^8n2XudZb4RU5-odY-`BEZTcX0=0)
%[23TeQBe:Ugi?6Xd$-t9n^$aka2qRblnLu!<RiLTU0u]47"V1niUE0MZ<>H\F"[*rPOkX&o/<WfCTqp,F4Hf0dHect?H@EK_=ji$
%S_Ai9Wf'm=QO4U95)::=L_T`@oZIf+CZ>K)>N3NT960I,4=TH%a5<V&1l.G^=%sVX-u`bRkof/7#P17K)m*QKr+br>4%*kra&HWN
%eH=K.f.YqjFWjh>f#HLCF`-8XYNooW3C]mT![+\IiX,;K)oYSS_D\h-[I7'Z"JB&GYq'j14$q'9pB6;Z,.HLB'Gfg``s]Fe[k:AB
%bNhpkik1kl*MEV#e=,]O<SgS\I\Zfq;J\XG8Gb=06Wi(("[)lla5'JB=%i((G>mM4f&uTU?cWQ=3gb8nY<09>qg.+BG8"U6Xn]K-
%Sa\=e!jrO>A<*b]S9q=lIs<brhrgo1XWJ@fJd!QB-`_0@#$aH'nH=]nFkoBsYF;MK>eKAt$b:l-%V?:]k=-uCiB6O]6C^?4X.BuA
%AiKS^mFF@G%+l&S;%Z$>5[9F\)<X@L@3Pre@_`K9+X\D3LE2[YKub7GJld1?Msd\7c!pn<=]$lO#1R0-Y5=*Ad0gCP`[I9&`aLC9
%j)'B:iK4_LTH&:o_=F_2clEDj=BFQe1HXbdY5#GZm2:`Dm)it"+6)Of5T*TIOmo3CX`Ph4iY$-/aA&og5`&AK2ERBWa9p$5@FM0Z
%'Kcb?MJ:Vui$u!S71iK9NH?ZVc*Bj3RYrgK'gW#p&AlD8(Jh8I9.9_mK2Ro"f&KWe.(!V81''`+c3pSK7a/l0F!E.98q83fRM@jZ
%o7X1iZjd9f9gI:d6cVNJ0hm9ODM_ujfQ1%;QPtGCd<"oSHQ4XEii(9$*?U#lT;Fl]a,PmK#V!J\MEV6>_8p\noG,2`12dofW\dIk
%2c]C&j97\rR\@,lBIoG5U;bEc3\3*G4WIm!Q'8Nc$Rs"rXg2W<5d\e16/kteoCjijY^==$V"I$Zq`K</A>]W_<&cjMb?2!(Gu5PQ
%&-.c3']qVY,+?Z651R]@PMJd+q[G"RZeX0YW"f<,CB"'S3ET9&'"!?<Z?b>M/un%c_1S]OI"44#buW<7?JMD\B!ekFhK?\qW]c@e
%cjr)"*]:&UK*5*>?H)PsFg=ik$Z$V4Wa11-ZB^$U>CR^k?!(r,#QrPQOD\jsO'!9]<eaU(nfc*b>CiD7ZND'OO>+E#buluTA[R[B
%Ft,fW!Nus5Su`8j-TcuD4U[YniY+G53D%\l=JOc1lE`Y]K5=J",R]*fcp0]B#2O_u8Rikm'7!kb3'7>0"luPl'"=(8i#'ok_'1VV
%\s*%lk3naNR8&:a3f(o.UcJnGn9UQ!rWqqd>D7[0Mj>1`-9U&W+kB=%>:nlD7rYCa72gn0j%gNuMWCVZZKMl/YaFerq&df\$`TTH
%AlS#tGq$(@:RgpD5>c^t;2h,D9J*[MAuZ6Xa&M.m`%ZsjVSp9>I]"$"Cp5/h[%q3U'r=[$Ns=Kn-s?\UKYC(_&>H-34\:lE@7H[n
%B:G-`.bs2agRSFS>K\P;cRbNr;nRGTbe=,OY6]1\gLhRqoGbR@MK2VJ/g=etmL`1Y8jPRTn*sXm1T,%1<heC*#iBG!\gH)VVm7Lp
%]j<+K]VgIYR)?>90(IjDh7N*LGg'p>JRfD"iEDNQm?CXhZ;VprM@PN:^[8h8R.t+"h)]A*_7c7=N$Br8,>*N5=j8EKbY+\bah7g=
%=!,TqM@7O,"R"eGAbI`f*4QIn!tW"@$K]AFH#(MV]F>GWbiY-;_a[GP0"tu@hW"^DW7a+I3o-hmjkA:%KSn7f(1lr7b4n5u=m5M5
%[mLrpe7qH>e\[Hai5dVV;*gUoc..2gs&d2I0M88VM(s/0q=&ENj^-1@=,PNC[W;=,NK'n.M'Q<qrZ'EB:92Tm-PTIm"m_\:$ADuS
%D\huOC*d<-E9Wb@DR\a_9iXooSbVK%K6!BU4<^@W8l6k?QM=sDY+.G&9!a[$7P7D@6Gd#XR*IC`-q?oJA,<7`7?r.+[U]sc("c@=
%rb)`SUi&WE<e<qqXKp_0HaE5jW<%:;'YnJ5.pk&E3rhhS.Di#:([^Y(<g+;bG!hh@-^eM,4F/sK%M,$_I.?ho)Y1knf9ZnYiJH<>
%Xa<`9Wa;S/9VdE)WlPC-H\tS(Wdp-[V)CcI,0bKU#dmpEbLXekE'3:AP@p1>*,)XHD(O)C$me6\`,+g+1CfC.<_uf'kRV1M'oX_<
%Y61\ojnFcNK;`a>ir8NHGfhKd[<\pA4=]X$j&JE.MaE*-Vp6^hhWdo2n<hiDY:c\8)CHpZk5`nm7#ZCmjZftCaWS4A*Js>+?'W#@
%$'tJAEL@TSQe?9+;iIOn`$fd$s15??Pi7I&/gad5;GB`&9&206UI;)b4&O`YaVV=U[h+J$Qs+sLY(C0I_6um9ogp,t&1]dBRO-:"
%*2d?"r5<d/kcUSXK'E`<RSbSC-C@5rZ0S`_=>-rMPN4H<`.uZ^%]YE8NsfIrGP@-/<^S(#4BD4^lP3"`AhO#?)'V0%W0gOH5HNEe
%ik"qPedsrK`3?g6YnYAmAR^U"<pW3`#I/!!mCMGmhR_$g(UalF;IO#p'(:U[kAcDSE`%P+P7/V$SLP^6e*on1<I1SrL/ETQAjTKc
%$JdOpZMh/aOkeZ6Am:NUlDZ-K@eRW/pt,=f^7_"h-!al'A?0is(;`Q/j`4eDW3Z*J\/&DZG"+..PIa/qhMZWM*^-oXTs*`QHT.n"
%Qqabo]WEI1hH(N!GMe,M*^+`$qfk9lg?c^Wb3L6?J(`.i,V#$T!PT\;jU/0K7#@QPm!%h'd03N-#Q2S@6JFihPiO.>+StP!n>]-T
%f&AP;>^*T7^@-Xt2QoMbX2uS";g6XEbpD5J!icA_[^)"[!kb0f-u^H?'jn"\0u]Ye7-J.GZV%N",[DcgHE@%WV,sa>k"Q4j=kbuu
%Z5"@W+G#^+^m#b8&d?C?/QJl?Lo`7k@S(KSU0?ni*d?onD`So'<^LA0]=/-/IeE:.<hh,^R:)lPK,lH,je`[W^%t%;@^b0nqP$`R
%dd1t>7`O'Fr]A<%!sriC/l]IHTb.gN'8%m(Aejd(%9N1d=*k!a%L$d7UEiX;TFq*7Q>"&=c0K$-T-gOn('u1RaKe3lrQ`[-TRL,=
%ZWrX_5]QHd."9E>(*L@1KuZ;`>g3lJhYOAtQ7k30jbF+=er*KDb9.5<.qbR6<9pUHCZ)ILgV:"&4a$!](h>*`>5N8]b,Ue#1UqNZ
%2(?tl\RL<?e9l,pN>V'q;Rf^hokI+`k^dK-+JH>f75]ZnRc;^C)1gUkl()!bb%4ki.1:95Gk'?mKgkO8[^n%l_A2!iB?%RXSC3F&
%2MPcK39R!FSuSjpPs1Eq3gr!c&:7Hkm-:'\/=r4<Mkp/tf:KFh;A@=R=>qII"d%N8HOkq<eW/Gd'Q^je'5jsLM/C$N*0Tj*gWWNA
%KTn-"83=ef_%!7PDnH_?N&+`J+j!Qf8jIf04<epYbVe`d,Cld>?$rHRX]/VBZ'HZE`"<NbWEbls?`Zo6+G!/>#.56Up"65nJ>HMj
%A'M#I<XJ`W]]p!'6@6m.<j%OUGH>Fg'GV)+9PcnX,t]d7S7/km"LOZ`]SiV-/;'Pg[;oa"kU-Tf8/`O]!3B2PF[R=5Ve5T%(VsMD
%6oEjY"IOZj"Cq#NA7NQ]Y6e>bM-Q@.AK+q9Lu,=^77'j"O`E_=]prarLq";&T_==ASZi_'Abf!PBcS,^0F=>uPUmC/6E[u!G\'Bb
%i\Lmp+J[1;0u::m%i`Jf<f^[/<nqC:lA=-(OHX'r0^$LoH,q3P*_go\P1#,&;lR6pb2MEEg1>PMV0G'50>2Q"ZfWl<4Hsi9eG>nS
%Vm<9<:T1k69)<=0S+"V-C@).JcB3KW;dC1m$)6F*c'r0GNQ&!a*fK"\C#rei<FSh)`D2]PY?GW<&?=Us;nfqYf4q;'^4**DOf1%1
%G(U(U[Ycq7567L]"A#JO4ID'o68fY4;f!-+?m%U!^+@b]-15!G2K?eqH7j7ms&L/+1IK,b7;m\[:OuP?Z['Bc0UV+F(@7Jp/2&GV
%2N)<+0M6(I#'6X*Q'@k&S?<?ns1eIUAt9&T.4K[?HT291-k_?$7a%*[8hgCp&_.nT6<)DI7$Rk[2`?fl*h*,q=Z>M+APLZjLSkE)
%OHu?I"3Rj96oAsX?2u,qn<;Bb&L&B(PEinfhj)XGBqPgR[#[+t@^Qlk.g&XB^D29oj9"_;[Qd$5A3onHXl&?BLJ?d2Ks#O`<o"<a
%k7/%RiZT[<?e%-Bjn0u;7qr+=hRRd08*m-):(^.7V=/Ntj&4_GG%(ju48PVuM>8]O8m#tVC*)gf2[ufAXm?sOEbM,/K9&S&*Znt#
%E`-q/;1k'0QJB\5B!")VS+PgdOrjOuI!Wsk/ZWE(Xqo<aPEG?VV54tm.r2S&a37/-4_7D%]u:8i4N:X$pej;Ihc@--=ij!U<K$N8
%k2C$UZaX-*KV6IJb<Kd-\@_XOL)!,+;NLN5[I_hXOt80fjS;u8V;(U=+uXhFg%d`bZ`inHWT]43PpeBd6=`U!J%77S_!4C$c#Xg#
%!YoY4`D1JYhdr)#VJMB0PV,b9<K9UF?m=UD$AFN&j],@'?!97+ch#2FI/g_ZY):G-"%NiJ2$obXgmVpUn?SQ6NtU4j;Q:eD$ccm2
%AkbHp#W>k/OsUcJ=)\ALM_2$_.Nn&_BJ&qH3T7MOn(iTXe;Ae^>&+V^088t19I[R8c)O!johps.:0K1A6B+]ohhJ^LiSH=+$%?)V
%?js+'YnreIKZ9mDp8SKfTpN!PAcu+b60rTKMBSjN9sIk9Q@iV#-gd85>*7NUnt%/1PNp@^n_W7p>1G!(`L<\2@ra.9=66P4@mZ&l
%>U=3TQbp.9PbdTWWV1q\)iG'k(9>U8^$=m.9*lT&l"c%'.9hSdRE:KtJQ0bKI^/1hnd9FrYKih+'J$":5qq<23#C7E4=;U*i))?X
%!&`Z<:M:LIeUGoc'IJ>F5a2@jOE,"ZrU:O,o6aHbH0FW;/+1ZgN#/%'VqP=57X:=C$FtT6#\@0.]412GI&KRMq3Vnpp!\i4^%?"J
%?iU$gX,u0LhjK[.]`''UJpBB0&L)<&0,<Z=Mcgr@MV0HbcR1So6)_(aiQ+nWUrE#*1_<0i>Sg+Qk6J*mjj$5ilZ[o+>5uDY-Nc5o
%K)NsL8R9'?>YK.sP"3nD3LeXRr%2uJg\t,'@E%IT0sX_cp_K_Zfn=H`\bAm3JTC8[c2[U#s86g7b<Ps7n,MM,rhoekYQ*bZ?iR_E
%r<^'d49kYSIf7=eo"Y+I^\s5nk3JZ;PCN/dn*e$inLsmjJ,.]$qPR^#gNhb-5Q@Wjn'!PD&;m[9:;g@'^pGMEhG@gD]!eOA1`b,X
%B2?+ka`]GQH"pMYIT<a[6=jJ/G?VBtf(1FYafclrBf+.1e%?2Aj`G?THG>H);:-EkY[NY`5'#Dqfi[j<hsY]erRUiFG$X'B+3QR3
%6sL[!-)_DnCBl"%b\TK?%'1t>.@E*t"i=4qgT3pQ4lKT=?q/GDc(R0MWq9g@83fn`msLHn2CW%S[j"0\@aEVKrV0iolnUOC-._KA
%k=#.8Ff:Q3^L793>.bteCp#(%?'G6aCEocCFOupmHUZHBOS&8Vore9R=U1/Z]Dl8\P+o/2mbD)#pC;p-nr`Bh%VCh19,])K64<T[
%N2._iF>hYG-^4&o[)oJgs">\K[HGC_s3KT$0Gbb/=+BE5l&1u6f;ThplBj&J3-b5P%q/b^-OEYSAq&9X2[Vc74+g5c5M*[,#j!Ar
%gdd3l?Us0YTQ$LX3q-"mggrcN.\&`)'dkNQ,?HtN#d2M#<^!qUnNe95SK1urj_<*I!.2R>$^%KTg+1MP+;U*9C+Q@LGq(Geh1Ltd
%T9&P8R%[_TPcb==?-92#j+8#PAtDC$K2h[?=[E\'kA_Z6<qQCQ?iGV;969VYpO2qBr49YNbnRnk]/c[%6#*EJ&;%V9iGraS]!ddW
%'fs#+YV@ShCT=r3g8((aMP"h=+/Ai2^6-=(4135!%"`6bHX11p4J>kj'W]#)^I'b(8&1CmoPF?4;UsRIO8e@CB_CD;7GLi]'q5ki
%'MWHj.qehic]'N]B[Vp!,$sTPNeEf!SUD?Doe?p(pk.!bcoKU3\?Rf<R]6$7s3KToG>TFqI?\>]Bq?Ump^^dXUB-H.#'7Yofh@P7
%(U`J=V8d5r7J+38SMW%KX_g?7C3"MA@cfsUXq!iWdXR66kMg"j'jh$Q*Ju5R]I"&t5XrM?>0.2JH=g!9<t;>;!Bj5<0YBu?OK@<S
%JR%,lBhZZ.JX^_K=KGf%lu+4-JnjfG2a5WP6frB9@lbRh6Sq=F?o:F_R#?aL/s#T9L4FM2ND_]uTCfrQ6@i_[l'[UqZ2*E@4d;o^
%N8_^j[J)K=(pKWX]gAA<M!TRs0:N&8(s`S14O[1BjTJM4l*TmMjNj]lId-_e_Q6-$Y<<J8R6_8cP^gAc;T=["7nZlQ^jI#/5uc*l
%@c!W/%+@NS.%G-e)(uY&1KDE$kPTk/T_&p.<fZbF=tc%#_MDn8FAq1H-.QteT+0A+Y9IurW"QMVUr_-K/j3r!X&7D09<<dXCZQ!P
%fplWe"rhcD['g1,*sd]h%#]H.Y,3/^5ZM`:(*kJc5L._2Ll=RhZYYbt^_DW\B[/?H8[WLh_rc+M$5Ii&c"G<eOJkDd7I5,E'?[Ps
%cVR<0l.)FkMJXd'6;IXKZ<*m96iC"cgat5lm6mX[3#Pq@GRq'n1DVYc$P:9FJZ,c9'E`H3$uu4/R)7=2Y*ERdG8#I(+>]<2C,j;-
%r.0;tj<X5IWsVM23<pV&]rlr:";,j\CPIEO^f1FP/E33*Ombr\oUdSp!C2Z**_.VMc?eG;mXe24>eq;HUe%8L4,]3*S>3?0mlJgD
%<e<'_]^S8qF&pZae"or*e>rkrk2#ug?]X&tD<bGW#C0130NENlN@^>k]aG`3@k'oa(,!B1lbqfLQ:I%);noS]XTOiMb%e\U]$BpG
%XTG*OhqM0#F]iiJK;f%]gEr\E'-PV1OW;Zh*0<OYjeCW%N)Wg?R(W4Xdl`qq%asOK&u)712X/fSR</MC93`3>'shp1RV<Ye!Y$ol
%%'7+K`kf^4E$MLEj';P7bkNDIc'B4mqE.r:dCMC:&;G3+Uq$_,'m(VO;F090qCL$mf6;Yga0n;k6Rgs/#g$u`O>INKkNM3",&cZ%
%s/N\B#!q.s(4l<Lr"(]O6.9;*TbUs.=`%u(V%Nu'n&2-![eqA2EhLu=_6"RZ)?)d,&U'!C11U)bVJjNQL)D%<>oA6/8CIqeWfdE4
%+IO@s/8BT*,S2[^qH6WM/!sdLoK.4G80NF.X2Zr2-`_l4e1g!+id%&KeQrH3Oc,eSiR:JA$7[f:Qk_ZYR*gTfQ"8(hE':Fj-kDUu
%6_u!LmF;W-#OWC.`*2K6ZMtCYK*'W6@rh90R=%)$^jITE'QT0-GZ%4W!oWn\'X]",-:$;G]C&Z+gTGd2M4e&.#"Wh4]e5HoaMR/*
%\^fso/q==$DaFC%'Jt=dDK.RfVe]U\r!3&SW\&:'C]p$pf"b9?>JGegHuc^07fe[4SPIYZ-`l6M[d7Ct-!+blWoZk:3JbuHO&P_0
%L<1P1A[]N*eQ=96M07SW;k,k8U?2/H$5c/'%Z4S7+X=H!P:"np]tD#(+EHmAb+QAm,tb==1dl=?J,ej%()EH!_ml)!ROX5KF#p9"
%DRGn_q-L1U[n:o1PZGn?l?&D[5#<d4%c)Gd+u-&GVP'ZGr8a_fNj\nHFtUIr$KnOl,<:V]SSkKBGkm=a<KUCbn#)?O@.B(s.s[M)
%Q/&YJ"\?^s9Ik$20u)N7bqrNj$^a%[+BGXOMCWKKpJtN$q7A*0la]A@WE01651>/])ak,L5bpHA>AK86q";5dSE&MG+CSd?ki*gN
%.ThG])^;H.Nh*$L^NujAWg5$p!Q'Bu4=lOfp2Vh;d('`&,jQ;B=T)ZbKDN8@'"+Ua04?9)_dTZ\W`]5.%_DD+XeoKfcS(/R1%^9*
%k$$kC],-#%;;NLQib.U&k=T)aIM_o#2;fh,Ue8>aeUmR0Ue@4T+L+;W[<7E-pc)-cW*T<uhrRrcO*;<+*dDGLOt(^/3L;ZuCaQ.:
%;V@t:baUBTLck\aUqD=S.;W65mcET=4iE`O`FpHs+Gml5ol`ud>)_68pL=V0<2XQS*L^7#H\./U2AWi38G(f%7fFeq%S<Q&6<^?[
%!YdA)'8KeC^E7i-qQ`]OOi#W+PK=D&`=Z.7,7UJ8LDhd[/H@luQ&lu&;9/d@"(^'1VN;.6U(Eci7T4>nkZ0ZdP#Be4VKD*J1anlG
%$lcB,N\cd;il_B8C4Y$p[Z!ep^l)C1:B[tTM8NO"+D'RDJ%YQTT@fA-0%S,5MVGFpWf_(Mq=m@7q?b\n8+iQtOHI/83iUG9^&XIM
%Zp?CR#j,DlaqI1gr86fi3?^qp_N2g@e.tcZQ)J>0bDAE]=;'<T9l6)1Z^Ie?aNVa4R)BoL=/p:@%.UYGXDk\$.9W;#M&]*]Xlg.B
%-\^CF[4IWDSRZ#apm$mRonS7?+8]?(.=t3O5SpLP6KWd-&_F/D]Ab\Z`0$-1KOej9J$F5spo%a'T\RcTD<qQ;`:05,<jLE/(Ed1U
%Q=M+ZL&[=OpuBu],qpMT^Y,(n."M8O0_6'V@8UW6@GgA(qcM4.ODJnuc#P0sHF63Sl=(anZ_I&[YmrM",SB%H'@Dki_f.c>KqSCg
%B[Wi(nDUM)],jK7C%I6^9R+*MF<;5>;#f/+cR5+@9c\p]0`o6RTa$-1o.Y%c,7,NX:9>hB'mR.KLK-,QDM(\PenCXg7"cD5HBTej
%JaN&e]&D.'=rr1+^sFo<"^r\bm^,b;n!5YmYp.7.JZdS@73Aj>*@C[E<o>ZV0R9s?of3=H[F7_^6tXI-^ORd-=rf9S0d8UiMY`u,
%8g0@L3+3i2+HI9!MV7ka,S,?&i=!Wr-dQ-2!n4+[.m&;]<^Z:FVRW[D<:dVA4NL!;Jm%/OU1RBOG>QcpPE7:)m13.gMmg\KojsH1
%i)rZfdaR0,IgAsj;)RU"6QLhV2NZK]WfAT[-H08bMh$$u,1'/dCR%,mEBr#L>.`#HKG*sYXLVPC4=_"pOS`j^EDJNK%@C.dJ2LEg
%*tZ*SOW&Pg6sq`OpjJs#@^V:@S^^N5KY'*:Q=5;jJrQrbK=W$<b&(/j^=&VKPle>7[%UkJ5dpq"HAjd@:aZ:l3Ojk;XTfq0?&2t\
%&;VX7-]S+-qMGHqW;.`kSs20)_'h74Y#2X&^)Gi_Kb!T6"U5,c6`StA68?I;7DO.S*5C\Tam=d"b25KaKPYY;MT1.qQ=M%/Q40_c
%g,MA9P9oi5F02j(:Tqe!%8nabNZ.L@>141>kXTpfe4-9:Dt`((8JLL[?*19QS-!KU*4'c?!Ke+qOM,+c6:;l&D"&kgMQVdCb/L?G
%U<d(R=TGDc#=!QO!R]0.P#gbloV,S:1\>m["\BeOV2agh"ot2\.4l6br\.3a+=R61n$3*c=T*E!Qn+Ka:N(-@\@*\3BbHXZlC12^
%@o,M$-;lS1-GH7O2It-F-J^(Mhgc\A]Q<U<-MdI+p\c2Ii%@$PeaJdl%<'Wn`]:)[->>WKbi,S`)\((tYh),aS3g+h@+BtWFB<>0
%L]`Kb9KR(/^R,BdW>i`a1ds?J#Ps:V[&VaelI$sR2TIN:U?M%sHPK=_ZA;VQPsj_kbYXT*=6]KV3\f>;f+@X(ihBYSl>U6=`!(T/
%&B-$=6<AdjI`K8RCV36&!UC;gf]+2d.$;-@aBOH.9RP\u9s-lho_sd>ipTWIn.ESeaCMZSR8kZ+Sfuq%]B+fV1-Z<dHk!4b6fpV6
%XTX'bjq74@Ro?O"'ZC3=6"8pDF\s,JDFf+^";3\_-r*WD"JQgI#7^Ds6"=5p+!d4nWiD%?Zis0460.tK=U?ht#CX1G)b)+;WbTP8
%bg50\q8hufH->qp%#V0MJL$#pLRJ#3Qj`%N)B@($G,fC.V8nD&5hX`TWhU9P"d/h1+3%+n^%b*3B%meO#PI<q,VGBP'Ai]<'WU]H
%lKmC5H'.1^$2q;$k1=bPF4ha/))glL+p+S!*b-IpIYeIK2b"F2UV0sQ8<QQ7g22e!=fC147R0qYCg/,,EqN_h8.nq,Y/2/MeK`bV
%3<CD!q(bJ&8gD0_+*/^Xa!Jna7mK3'J"%\"Ec/o;!>4q7c&qhKe]$qu_Aoh;$McSMP%pP@Em,,`p%]FLqHH&H(aFmi-rH;R(]dKi
%gLZ<L1Fq"8&Y:?Lb;MgH-KTRo@t\PnMo9IkW!-l+438<O_LFSS85cjoOH(n:6j\V&'G1I`^.]+[QJeLH.IqJIIQ^UTOb]dAB?(\u
%VOatc&L#j>b7jt+2Nc`.!Gg^4,"\A+c``QVU)dk?q1gXl+9=hdQ,gJh2>:EMj[mbR7Nsp*X5MJAFfF0DR$YFHo-Diu:.mNF(9&0,
%6Xhji<alp.hO8d-cCE$r1.2E6"&VsX[+>qrhoV@T%<FLZPqbD;T6`@dad(,5Z.&lc2.[@1Fn)_8Q9?=Y$QBguB'NIVIZ^O([d8#\
%K"]o,=cRNDmg$*7-p'1SLerYc8ibPqPUHI2g*90D%c)/]d:N-"dIX4i8$pmApR^S/Td#(OqFoI2PX%$2h5q9SlHs=bbXHI:p3Y&7
%c"?Te!3sLbO@nMbW]dJcFQbb"X-StbiT>\h\%#'07EoaCFsg:6O?&K*(G%CNb[ul+dihaoq+[Pd$`i1LL"2Y\Q6Tj%)/8;_n`9`G
%H(KIJCICk`E,.ilmY<J5Hu0:Kg(q=m1WB]+"%:tF%Kt?R)ReQFb@X\Q[t;R6:XXY9EqCYXF73]s.\?If[RXBR[ZhmsEEQi5j/O%f
%=,&D.'`e&.Kd?[5FLsseAaJ9^r$#$ldipi>@Kp:b"klpW0XrfJZHJLlhgJ*@9,3f.LrX%KJ_(\)>KI&tZ<(-hIXXo+MR5h5.F:[U
%@Y=%[q>K1B4*C+b.oan!R?j^*_=<I4r.D]6MBOGbam3MZ,HsF50U,.j?7!o'\k*[hW]_7p49&;d,<<94-[83+KULg;c0%Z'/_A'&
%X=m"jJZN[Gjp$`qL\^".51JMq=\oW+IW@h*_BQ#ik$u+=M-5q>&XXT3Ag%#1Lg9KDk3gf8P*DdS$X>mE(>Ekff[$ilp=X$s=hdU1
%]MEF-2JdCo*SP"7H%2_8q40XM5-(@!0],isBDgARkNLOhM(nZr(Z\HAJ,O_MPejgp*Y*u3*:n[lK-mm8jQ$9-D]al,BY#"K>%Y8<
%l95eS^PJmuP.!TiAGZ;=\3uM6T9XC$JO;67d+gqFC%\1Q6/WN^d-;VS:ABNX>jNSPSb:.!?:!L9P]1u$^gF<R;%;4T4RFP96V&%R
%;;d1k*4_fZFXQ:,Y:+A=2KHL+^l=?sG&Ba"b?Cg<b)QO!Zl4V=\Y?m-"Vk+k;;apbb_'n*JMWqH2Z@-Z^dY0.FpESV'HiEY#D"8f
%6E01a$3Fk)"?0U@i;2Y_e.Voono2o*"rp>*\RWFcPuZA?+Rl1E&><Gsi.A=1<Y.7"WDlLE6/]thcIaWQ>QYhVSfi!A>n7u`AdCUt
%puVnbf;(MMFKS((@@DYY(iW26[a,Zj/rD/AmDOO-=F/h]!Jg:S8e4-@i*\&"^1+mOJ5e:Ma+/eEV58[7(iVm6$uNt66[&Kk@"Y9u
%!YE+,@SN_r@]OY$#7jqDOA@Hd/4r$.M!%-o3CJkL2e;#OP7g,^-r`b9DQ&[4Ql8+9^0>f:5GR=p@_b"W7()`#cVp74GO^%rq5Y?D
%<"!Bo0Po[q5t0K3KkYb3DY^0enUYpl8m@4-68U3)H&.1.1"(a'`StfKF$bIW@1%TTL+*0DEL2<EEWbhsoj9ET49of"C-rn:?Z&t\
%D-"%N-5E#2DlAg@dEc!SD]dl<a9??EeOUDS9k//`GO%=>m,n%c9]Bs<m*^__^Ve2;r``&A/&g#@S5uG.<m/<!1sS.f9q>ri`IG3F
%_IKVfTU2r2>Qk<GVTI0751.6Y7>Le9\)+sYWk+a$WN>>.R7892l.:jlk#ng.O$A%bnLpV=#Re0oqB5>i$\0r7O[Z2cmf&TZpK6#b
%7='l`QIC!/c..[_7)!/h#4K;T/,h_A^I>f8S<3r+3b*shO-[,N=14$]B;B:c49S_.dnotR@as(?<ll\7r%Ob0_[-JZo-,GQlqfkq
%OXG(UP#OV?[CTPn<E=c?H=o!ebDN=X"<4e4Z9LQ']=)C@.d]XgVt.r+@LaFh,Rd[f@M:R^SJ"iJAm&Ds)(em?0PR</,tRj1PbC"C
%;"ZN-O@iA:m0]'g-);k:R-Sb5N10cr#cGFQ6E6Orb)n!r1:^&R>#.RuUlq[D+86jl:eI.&4KV*kWF812]0d<_:m/r1QN1%;HfP2Z
%8UbT"^J^sd0ggja/>s1ZF"c8>i\Hd\R`gj/b2ZMhC1.Cao>ief:'L`H&\=lPZaK-4b_ktQO]p-'<d$#3WH01NidtQ%b=C[(i/Vu>
%'C@<jc-Q"RlfFls+f^s,I+0j9S'!35iOaPrm2\tglW+?u^(/Wk\mE8p,-!!/5Kq+!]^?mAi9g=__c6,;Fn:+EFOVkIeMG=3`Ala.
%+fI_7C'1no['aD3,$9ULRCgj%79#+YDC915FjCafc6M53ae_[n@F>!.5V,i%Kb\^D:f"o*71_!1(SU"qW^s@a+BA6F<"W7;?kI.i
%;FTp\)AIh.9Ta.h^;;TV;af0D-,4Hk=AhPo>VK`^>H.tp13qT=V2D4]:f_99j^2TJbVQ@U#edWNOT`5S'fR^GV#@$ls1@HOLm**H
%pIIRsE),5H+'PfQ\cd]eFatuD"A>??H'iuF.q1%1?&9WJI8()^EUrU=9,<X''uJ"sr[dSjp-s^!-rYfe#V6CLe$Mf2jQe#3/#u&M
%ja8pYp9R.!k)7@3$<*\?RVt3./5O36VQb*a'BtYqeERWS,R),PC/>u2A&RuZ8c&+c6o(m7C@.T=U>hYM74^f$SpM<fg7Jq:*r8%9
%q-'YOE[efRdUK8dRGs==29utF6=[?b,YN"M2--2W7:2<6raJsFq"OB^s-XVEqNenqXkH%=<'nHpYc)d"-U]Fc;,:B^%FqSX\kuF`
%gL@3KBP1_/$6^>m73dT[YW`I9mesDrrMj!cBda],I8bd2>)-)sZ27G3.1N''(#j0UhEg'o]t`9r@_(=;'lk\%b]@h_R/H_gDdWJs
%A](Pn[<[Um>*0"B:lNH;qG.@BUR-H].SqWth]WOch/?Ze.bM5ka[K((>I*7X.cX&F>Eqi@=QR@Xj_O%V\o1LT=4W'dK]"1UiZa2)
%,]1K*CHH\3j^'0d6mW/6b.nI)8c7Q'G[i$j67!02,&N1X@rr)0;06GI@:c]8`RkA<70t4&.4Uu<X?V0!U7!HDW,V<DXsA^p#:8e;
%4'(2P(nQjXVuWR>'a@D8+h!:G&<J;oFs1c>MEd]p)ssp"nYnSRh+=k6+5Y:LRC6*8bS3VWlG=O@#?dO]4$5Pe(=0%Yb-</h,n<M0
%,:8O=,caP+M]YP6@0Fp671E;1I-1K-G^Hp9G?Z%);H(-PC4Q^6PH76X'"^dlUfr1:0XV;me,0CB%H5NcY,@r4a4Jd5O4@lo5hedT
%q3AWlW9\t6fIU#MWRY;D-l=7RAM6ZmCfk"Fb-F*2(!4n!$M!?DZZ;7-q*F]'YVB+Jm7gHI$HOkL=@jC)Nifc'#AZ7`#pr^1XkGZO
%QAZ/@b8a%nh3p^iYlY<:DoV[gW^aV_c`6Z5cDsqH%LWhla-6[b_0QVf$Yu]iJ97ZeCjji",)Oa:][RoPTTc5O-:t2>@WI1&"-Y54
%7B^u)>pNG(;p;AFTOGU1<L$1@c[Cms<A;TedA#oZ!e]d7h,cQdQ*u;Ho,_hG9l*=<<f:.8M<LEC*fmk>$slM)m9Aj\9;33T6gh$L
%C/Bhmp#=JA/6Z2e0nr]<=7B3hC"I/EO-0f9PV5D*i+)El_%Q8GEEK`b.M[^)Fd]4$_?o(o"Y6YIkaU9?Fpc3e!3mIAE>Z^SIRZ[G
%c[oO)d?4QoVkGRu<5".Q2H[9`:>-fg%RY"I^mZ^5oqj("3U1mNIft/<[$(Nq^/Qh4WRCUSK%,6JTX@?NPoq/9="-?J+7>o*!30>a
%1<'I^p+r"P<&shb3g4]eCkenRUfqVM@EPaYMMo-+E[kd\&X9>Hh8]i=_5>Kk;2*QbMW&Z_4`;7!8M)T[g;$*f)Ou>V7[Q60%N,,a
%3tLoTpb^&f/5Juu1:b$*L@t1jbG0+bqhOpRDdLPok#^E<0DW,7Yh!?BcHP-;_Ij%aJ8"B0oj2?.VQr8\/?(c:q9Y8A;3BL;?a3`m
%U%BT`VarWR98+6[UT2?c;ZKhVI'`P$Q#N7K/ro5&75-F!1krJMU0g9s7NmXT[PgQ?WI)i7M14a,KOeTpjFdCR;Vn9cWo3:W/_`O_
%i.j!:!DGL8^)^g.0m+U_76_#Q@\OrR2*"8s[+D%+1/MA$:a-;`)PPHNHEFcd(Vc#/eXBLPeKM!/HE5HK/H,f@3JSf7D'(sd$]#U;
%Psp53m4_/8Wd,:(EaUVgIE3Vu<?6mO-u5DC]c[LGPBDn\/eDSu<!G7aQ6Cf]=G\*Iq?TWcWfXg$&gO6uUP.`-\q%jZ0.t,0&>!9,
%G:EunZ:5]b;Y<3e@47M\63uXJ2dK'.G&X0f,TTEi"S\nkFgB.P:KQaGgaW\C%97TlJZd-3A0bdq%NN=b[LoqG[#X_GY21jsa.2'd
%c24NFCR(!FfHKE38P):/RatE")`JGo.jS\Q?`BN\k)5It,tuS>PsQumccPZ)Nu:g3N11`R'b@Ie3g(.S/`YmaFG!K9P,l/f5PAD[
%<tQ-E*@4R$f%='GX&Knc-Qs>\QCFjPA.Ru[U_]etdc_eDrNQF1lM6NB@0OI>/2F_XU/6c"('Arja52Bt:(WU9O^`U#>uh=W1mF(a
%;b8W[l/>Z>Se*uhdH.2t<_LkiL3)`ZD>\#FG+R:_9]JMbfMc@a`j"r'\NI8B;mpJ)<N]0,aZrF1C\(<V8OWe_(m:W"atJ%mJNESm
%BBfP\Fm>n3LA'@u!W?KTVB7)jnqG<(Y3b4%R:g8^P0MI2k@Q[L*\2V$Y-K\@m3=)NYtbgJWm$c.3ZOcaQ&%^WRF87b;H4s;KJ*7#
%CQ#&NIn:-l?-!4cLOpQMh5e[2Yu6GjNYVZiVFiYiXX,JkU\&Ye,`Ck.>"Z1,M\=XpCh([Gj+U$'@1X_MicLP#bHfn0]W&nn8e$8K
%<b>2P#;fN:DT$^.I1n/^9?%=p'N(E@fR.eRU-n>fR5NJk82Bu_$R4&=E8hG-O^mo5T`Z(rj<57=8\(3Yr(P-T7XuJE`.17$aHXa!
%EJ20.kA#:RD88s[",3<lgO[670El2"A/-(aW&?:T9%@lo)jf*]<JCO.)!&!%X.Tigg!kraZM17>HA6i=_.pW`qumUPe,E)7/h.7#
%+U.4REkYPcO't\U#'KH836PgjZBfTL"\2COM//k/LlqM\/(@HTA/`>IFRedI5p]"43<?M'<0X3%`tV6m1%'f<3:^',cRE4U=0UOA
%)Q$.#KZBJ#Y]L%/;r#Gl@ose-gL!Ua&5QBPX\("MPtpSPP*+i'.[fWI7mI_ZA_LU?7.(pU.k:@jD6YAR5=b)m/S'gaf%i[T]E;lJ
%YYKQG4I"OCOikb&28HoKX/Tma8k@pd?&A)B5%@1WZUZ;dWmMqT*>iA.G<[I)&gS)BWqXh3jesLmdE2R4h@WeHV_a5reEPp;_9gN.
%N*JHfe.j*)b^F_>[_=PRr2/2F&XcJ;iDL$n<L1KW`2JqJWjHGVAsq`nDoqj<Ao"3(QGM@%?M3H;D!)rHQ8N\Z%>RGtDVI4MXot:Q
%Zhd0`/E"UdW)e@m0_%UKeP'qO/Q84!/G\ERX[K-X%AJ&F'aZ8qj:#iV:KphZRQ:C.^XS;qo6XJ*UtHmg;H?MGhYd"F@XRV)C^%")
%Wkpk43(5c*75`4":-44XW6n%O`9QK/1,X.\Vue4>7Q&qr'WQ.ceU]HC98jF12Wk$PhBNR\#K5sG2^N4#K'Jk_@4MT:]u3o!-'++$
%9*\0q2&d7\WKMr&<jkf,*k+7-#)TMBMj*.cNSM@U@Z[USAh.,_OLhp2:sB?U@3-3J`^[547+DYt#3gl@O;UAGWC3D68W=Z(0/Lc=
%-2=.R(!`HR&QF)$`-nYO,n2J?T:?X;kp6d<0O+G`.[BtX*iH$>>u.dG;6(Jh,=j0t6M._.$Ag`NO/YrVf`H(UGq1.t8m%"lWa6gk
%jI&&3AN8#38p$,np$;^[W'eTP[Z'o]Zf=q-KuF-;6"$j-V'0BO]nhsI&0Fo,<PS2_APah8[sEqR1oZar$K(J?$P\F8^8i0HL2>D7
%IgD8:%b@*6N+P/4@BF)/TNYKF9@_WOU4`/iBF%&[S#S9ESs=>]WouZ3'8;$2=lEM%WkN5-@Y7kkgrLK(&0EYY=sUtF(a*bAM[A'l
%H.f;#m,K$lSm#-\Q`V(JIpI\lC^ndP'ti=-Q!UM6od^BH<b?EZmnsEW-\LMT3O751'd$8oQ@\?ZSI$"PAkCQ)IsnRqTf8h,l`fR?
%f"W#EY3Sj>cpd%.e>8I9hGT*[5'XYRUdnX5Ulq`n)EkCmEQ&?6RO]dWkj=9SaX2/:i6:9PWDW:Eq9i4L\f*<@7Q_<<,iR@Q=mLg:
%Mjh-9>RhB!Z"gmOqp"C^6uP1ni$jEr0Ta3WnS/d/<2j>P[O'38Yl;*^BLYpgMY./"E?G]q.g_Q-pL[Dpl7d&8@9L]QcWL@sn$4CJ
%[(V:?%8LriK@SAYigBoCK/h4mfc[SF<I-`2rEfA(a_Zpsm'LSaNc.)r9*hrr]@Arr.+sjB.:SSL:?I/Vk!<TW\_`!(p/J8.+pq"$
%L:;NUOf6,Y=:hE87BSs&5p+,(PdhB2\C8)OC$h:>9,Ut,JgRIKjDD%k`.8UK:o*6N=j4c.8[8\^\\b9;goTM&FV,u\g>iE\?e$o6
%8cG*<;tsP?K\@PsPUOV@Qi7)?08PeIr3%7)FY3SoGr!MPFoGHkV,T)Df=KqO)p2&GePSfSWme`JTbi'cl//<8q2@]@.^MDU1n=PF
%"%%/!3qTV]<)t@Hb9K;<FO`WqqA7;>aZJjmqOIcN;`OYi/_FMoln;D9F_j/+YGJmWh#jps+>VP,q^Y'/c49_%/1Dabfj@CmPk"&2
%06Y!PGM;\mH@&)a<adl$W"GN4k(=o/HuBi"Wt&N0N*,_U=q"Qo4K![C0bdX-m*NL$:f#YX3W6!P^?C<]k[+og,NYEo:"CC<+8V>)
%X>kd[^LC82M)YC6N^cIN*hE:A:fbA@dD$f)T&\24eh;m>#`J[^eu/'M(B)GJ\g$DMrQFd`MfR4[lEH#R^Zf+qK$&F(oWN\3g^a8j
%0kpI3MuQe[V+RCtr`>(=e/3>u^M4+QJM7"(9f:"6]D,`E2HgLSG*[dar$Hsi*5(C,IqaFHiR:R%.du\+1Z5);/2QD7^FTWU^piN7
%>t)RAB7H-!,IA9\=1rL:Ekg76j`B8=mg",i^`g<ZjWY3/93+Bg2_sgQ;JAHWjKI"Qe8t/A^Ii+BQ?^FK._!@=&39V\U/JJ5hbF-N
%HC$CO(B$n;MaZX'IoZ>^ZuGWOQGHo)iI?+fgL?*@[<usK_OLR*cFd%p(]UQ&!B!tar%FH>l<ec*^Y#Q$oXt!,eS`l<>l67`X5u2\
%!Z20K3gVJu<s]=>Z&AY$T!`I2L]:B&JL.K]s,6]SAH0pS_MhV!pu-^6dM&(]q-U6&Pam<UOTEhOc2WY=d&S_s(](qAp_Wt2JBd;g
%<mL`^9g+@H=T#?68:sA2MO..nV*k:"T?.GroWLk17&,7j2O')@fO(:Ne0WPr?U]C[V/5j,Hs>t!Aq+5o7e6b*X8B#t^38.9Snr&u
%@=O-CpVqq7R$gq.!65"q'!\m5S,MGakS4m1b7n-pS]1Rp5\dA:qoc*PSh0S:?X=glZ+m:NdSdj5?SSGs_.%moHU90IMuD1H<!qu#
%J$mpU3ohrP:E``-r)GYY;G&nDX6_TW;![0qRn[P8-@\6N'#Y/_V<+=fni*Tl$jY3)Iu0$7j[hl>Jlo&'+b,3FnqhG&/-0>WD=UbZ
%^WNV5jKE$-Q#F7T?e1(V?Z,F93=9;Y>jO+>o5"hJIhaJJ8K>bLApLjbnn#/BMI;I=nVmD]H^dLXm&t"hofs#aS(1_i[);kmQ(mu"
%fO'?Q.sl!Z^YD^7h4fCafUrM]7K7*bfT-jKX%gF#DZ86SrRlLTs37TPhF.G!Imc1G!gjgImEeQ-o/ft=^Be5\YsS)K)T>\`_dE<p
%^UG]`S,ZIm.WItJs38ZtB5[_#!o"F]^):=:>(_0*$nqqki$Nu>2;4QHG64/PQ(/?ab@<-mA+@;:#cdI3`W$SDVqV!*r`,n*fB7;Q
%QO(R#HF`9ISn:iQ:B)fLNjE-B^No&N(]=`=5hX-UAtmDq8=TQX3+V=5VLP!mP?uQ712W=@^\D/!9V"0Ss-okaX$i'>^KGunjeHhp
%QPjXB8f.Ms'e6D=6I,TdJYMQj!M!6-[#4q8f9'pS#[er%8Y9;ln-<YO&]8?/J+6uu_.<+Q#$<hE,<,]T\Y']KRfM$*bmMsC!gnD4
%9WUqgCT#TboHJf#AhL'j#[hOfqfrdhQ3@D0H3do8*QjXa!a$D1>$"H!.u'Yh>o*OC"K0>=?3DtV<Y!h1J@5*4N/%Gbb<Zn\#$@Tc
%_d3ajp>EuL!7inlQnJLX0fg+k3!=2,I-O-#k@Xtm/co/</nY)0J<`o!_XBnn1F6QfDuNg."8+$"s!oftgYn(jbpmL!h"TfX)7LV!
%MuQf!+O9e@s-:*rrQr<,E*G8Zrm_7O@a[^F.\2BYe=6Hf<Q\f1rYNDLeT(,oP,*DV70$P4rf]8A/>9%m*!-sc(XWUK!K?NpM8'@)
%D;Y+T!4.#(X_JH`H.@E!">JS,Oc,"pAZsh:SH#uRI."?9?c7d)fcU2p1+qlBkC<.dAT9C&=2MP+leVKB7'fXA`W'P<s0WsJQQ]KB
%Qc&hqUaVm`n\:M,mFfJYW]1$*iSf8$0!296MuT&96a>GEmmh@A1J(hRWAjhb-3J_g^Ic,$H8tgUK$)dr*W?iU-QQXe^PG0KMfJ_t
%&e>K6id[f^6'!VoQhsnJ6fWZQM/=PuS,]lG@VXETr,6>am5P%qH]L;J6iSM/_FSrlqH$[/+;6^4bC0"c0)AYW>"HEboWN<0.@%@+
%?e&PWS_[_(0me#lDtY"@+sS!bqhmV2,4cWJMqO;m@(b0"N$Ym)>O8Oc&6M<Zc2O^O5s+EdNt9S%N%5RDH@:X.rP_`u\6\GSL54dL
%2uBZ(83u';2uBXq>O-0>J!58B0V=:%h.8#fqNikn>s$Li`74[2e%[Y_[?(ms/)rY>I-=qjjfHa%s%8bNPJ-0e.oXKD>4f"u($]d]
%eH-pd551!6<Dbki[4V(gj2'H!0)!nSjG?Ldln=4iU=_C$CE4Be4RB9<.2$kYqU^TFMV`RV=)%-e>FYXmM*h!,MuVmFNI#T6s&HYA
%AHY'obO:\(Eq-p"?/"6!Is'Je04ORWlLg:iHdTS`r3QqLrQBUcTf2fF;4bG+^Gc]$#BM%>%mnN@<U],35pRIoMS8XE#dk'gM/;?@
%(a9<(k<TBs$9^4G5h)4eAj$o$Wcmr7*ea3c(B<ZF&C?&1VfUrc>fb3C!4+^<.h=tKF]BH",sm!,1W$'K:Ss(EG9V]`9-!=E6GQD8
%5HkbD5ZE6q8qbPkg.Ek-6KMRKe'EpC<c<fVm$D?O,`b#<;T5D5LR%EQY!Sh!3sS+K]'Ajf*!k),:s%U["7bohGZcI.22+*u6M3aJ
%OJF6i8=<J'U6Pi^@bgHEK!;;ufLZX[KZ+P,,RB[*YtcT,$%`9,FP)i]+^7hnm479ap7"*jSKnJT(Z!=fb@HA,J&]T]q"T#YBC^9r
%3drA@E&4n(gIVsV7<@WWW2:*6`0CF5(FarG-0E13/%BUB0ETK74#mjSJbnQPJP[u1MXmhg#S<87^2b@#n1<OGjZqm,b'N59I!e"-
%l4K#P^N(GB>*)E.#=8T&@m)7P!*Xat"[^h6GO6(Mebiq[lkB_9X]2SV"[]7P4BDjmoO'1hB0`EdTbN9G!?hf4l40Bd@?##DE*<Ia
%a7oEj"6.XUlV]<*Wr;=O3I8m4M<r]#ko^,YQZurrkB51p\]>)9rU=+EeJ'SG9'cMhm\crD2\s*4)):Y26XUb1![!R%G7ShWioerO
%2ZMl/7.l`*g3adU_*5LnrMKV]0:=*fdcTMY'Lo8-U-I.]/E@?PpAMk2VkZ:'?fNs/qJE3tAb.?o^%3;gBA!(J2>6<`P4nQ50'jJi
%O\9A%T43ra6'ti0KKjum^[5?Ei)At\qu5tqR!)%pCFkO5[f:k`^]!Z9B.bTq4Up%`YA^fc^aS*-RKjBb+-Td=3!cTY=+-QjaeqXR
%a1g#Knp0(YhA%=*:oWOpo>/^WI2jd+&\e6CPr0r//?3NSW`;M=#ZD6,?%F#RXkjmNVtp]s1)@@M7d_)I(h$m"NHM/,][$*anpZ=9
%f'eBVSkhYIFV77s%-B+c8A9#G[_-2D?\l&c(S['`n+J:,8OpK&Of!-sl7k/#UV]#V\kAQJog.`2:o_kpYH+D:UMqS`AjStnR8kQQ
%G9t]dr.aGLgS.Xf1<&M'@/V\JA+:]]Z&u)3gW$tb=>ZI=1Y).mZIP.qBilfLOG7bm(qR=TjkC<e1=\Q`'!43=U1I\5h7HcV:u5@?
%kf1=U(B+53Y9auV2,0gfr+4&?;VW'm6#@t+Q"p!EYZA5beBRiMb$\i+W2X.<&>gURqnhYK#ao+FQ_+N$>GI_-\hV]]$8d.FZ#%B<
%Fg%Z3$/&9tjdVBTZ'X>%-d-Mu3(tmXcsCY8(962<@HXs_AYGJuLk8bdi.jbN2T3;0[<7iI;.o@IXmLL8+`*F9M5mK6X`CNA2YOD=
%YM^jO#&^*&Z"K]H0onoQpXe$O_uB.Gn#s@1'MD&``3X=l#9'H?ITPfC+bhjP@<0MV)tI>;V/NdZ4sI^-?[h_Ujpm`M+C)o`eZMK^
%A2,J_L]lQQ%e-V80@;Q,7JKSas.39+h+#N`mp@]kFh@+Rdo>V6rJ()&4Uuo=#S2MQitGcf9W:LYSZCtk)4Cjp)>n-%iME!SE*fl"
%VF<n-RN[*6m7I<Q)d[/$PiQN0)>Z^&l@*W=&3e/JV[$?k=;7"F^EnQ4Yq)MmIKcLog\'u/EDYV*L8ap:U_E*?m$?CJKJ:IQY<mJC
%-')79;tG1rlruf$N^,b9D]u2OHYL+uiI`^*9RjUE0,[I>h_rK4$snnlOhif%T74mi&=k59$mtt(4T&CfX#HI(?SWI"s+p'*_.;ZF
%@GEW*4Ks9+@*14U>M_.)d<gA*^]\K7H=;pMWfYp\J['NZ+!+&VDsWY&#?qh.HaV3R#n1C&KB/?6+4fG;^s.dGh\);7Fq>ohPjNCt
%-1F4/"=Et.WF(QV@.go;[fhHSCXOAe";Y?AqB^^?50;U4')2Gs!Zu5M@(ngRM/1a.^YDTtGU2<emO_&7bgg^W2`\g2)A6=PZX.;0
%i*o#u3'VO.`DNTtbl/dHPrtu=^"f!g("Ws@4+]muO]`dTbLHGD/2W:&[9+:]Z>q[/&O8nY3m'bF^K@\9>48MHq*3EF-9P<U?1&(a
%^8QR+"[r3ll.CA@[]d+_d1Aob&NO;ub4mZ<R';AhdM^pWb3AbS258&+&2)e$EQbV,$*k7-KR7&o5qCF`ZOmQaLlZZ[GlMem/jfm[
%I@be,nhcDShHO*EUp^9S<A=C&l-"IX#?W)0m?8'gG28S7q=6"7qr>\jLN2l6;R'JOldj)$)T+t7C7=rGV"0\;k,Apeo(T2[Rp+mD
%QcdlNSDP&3q[I.3%mk7DO6B<WoMNr:\uMlP^3qd1=5sCG0gi_r[H<(L>!r4JMEPdXAg:rp:pGn`6_?^B>WtCM#]6F#7\U.7.[FMD
%-c?kDm_4o(i[q:-gV/P;>PV<8;YH:#QWeH=>HQjjE1gF9d0$)ec72TG7.jmOG^4BJSu\U]?aa!V-MV73f;,$Q=`orma7^eYr!>%8
%!tf8%o*?F\0otQ35-X'C\O6lmDXnM!_M:5rS`Jt6C4VR=pqYD/>L6Jj&4PF2_FIAME60/!C`^pn2rR[dV;r7PV&AfKKF]LqiOMoY
%"Y2)^jSC.TbF"j$EZo3A*q?Rf9DfcGM'&,U-fdq)&?MrkDjU5r<+iluhU_QY](jso-%8%*W\&\nUgE'D?q^Fe0lTo0nPe3DIu>Bp
%F7k!=T/gDUkE#Bu06P2D1"c+s39#][..C#&r01SqZ<R6S)#I+gVeq8sXRjdL\O9mu`^!ZK-8Yh*(UBnPa((8"GUB"A"5<dGX(_/@
%69BD+&CnEChQ+T!F/&""Y:T!oU,d-$afCc.e13s1Wi?7d%M\Jkf%HVE(%SL['oF$AY1h>YDlt-L2^87trL0g'<:Jcu]&J_>Bp*Sc
%$d7D+<"V:<VEQGnR]m'tatH%i6QN%NDfPC-P?m`kGhB<"N\HB?]OK\[O&MY)8knS)8/t"g!K5od=&c2Alb.$%d+IQf#D8)seSZ.3
%7DPBE_L7\2;md(a.ISD,ncA*$NWgpiYF&(SZ/@4@;#L[512bI.IX*rqW&ja-jPYB-,""Ld&$RXm"%@,gJ01Ump+c#JB&/SZ1u-9`
%Cf?EbF(3pN/h0]Ba\)5A[9!`EKS+[hp6^]N%KW_IeTB4NI%"$2;W9jo8Z<Woq*&4W0b=97g-PRV)^P,7Hcu.P]4kpJ7MlB0G+QBs
%\ZkK&oa5VXgIC__#Jh=bp<FJoU+)E)D4M`WE53^U6?s.dEbE?aSQ$FBEE0:qK,82tOiY5Uh`b3;B2>J!WZ$@.ZfPSMl*f<XV14Mr
%h>Qkm4R66$(O=mqSl<:E"bN4Q.^.3/#-1dIO`G(h:cDna?$B6Gi"tbCVdAg$2/AK$c?lHt'k'%rEZlrHr?0Ca#go:]UQX/gXloR_
%bt>e?bs@moPJq/Bm/ipCWp#_i2l!)Y/U=1qrMh?6E?%H%GV_/.(0A?Y[\iGNMFRSM,g5oiE]uq`Ui!OG's%2!DE]?oY6qg^&HrCQ
%ppYB5+fehSdj^/G>AAc=.Df!:Cl2\r7CFd+Km3,ECU5J.q5T_-k#2sBh:e^g&>&g"+'H]hom&Q!jjh%hnL5RfCqBD+K,m/;_OOEL
%]i:Y?nL6JF"0mb[q7%'(C;il%=Dp7>b.+@-L"KaKYpfo[A;VkG')JpWDJZ>h,#aj]2)`%e'\*^pfpY@,J1/?NOXV*Nacm0S1.C*W
%-d0R.du1n;.9VLO^'Ks`p;8S"_X?'Hn^>'R*j/tk"W'D%p?,C6^AduVM5:X@(8K@^Hu_6YkX"DAn>LX#Kb\Br_4>W2f7$_&Jam2j
%0r@e99jQJY".,D.0=M_>q_\ZfqgMrV4r5@`bOGmZAE]H-:EZ:T^$*a_LS`W#\1sM4_+*c8G^WMf^5$f[<+]M-[c]+iIp1:n]$itC
%H1j>;Q<o%.ZkTG0]VAf(;4Xc]H`fGYGe_kL(K.\r[ZnjH":b=>0G<cWZ3/4-8AUt#T)!ld_le_']RL6p&o?gD#.f='bi^l'=V$ud
%gR&&2WH5@`7!iBZJb-7&bhqe2mAorbpROL\gq/(0F3"8^T##eknm<f;].oC]qZNr+QLs#Q3H&jjg=TC%S_qQ$Q!DXVK\oY];q^++
%Wb?D4f:=g?4`=hW<;TF;j?LE::S42fWVT^ce6u4+(IjE+FdVa(ZIn6=X$7E^N0J'o)=33^)q6db;sfk&XjT`Se2hNF`\E]4]&#Xf
%bOW3H6;-OYe*<p5G*)=p#P1@3lV?dEch$l-o/8AH_,QQj]Pt)u65PfDeX/QOfm'3MID<$pL%Zs@,,Y[(?!VoX]VM!Q.LTjjk:"ZP
%1d1PgPpbEa`!$/&^sI/rCOBosi-7=F.sY]RPm$+DCuCbZNQpj`(03^9^tZB-b^S-NZ&kokJeU\L"5\3YR@u):11%-XpZ;#?aca4;
%INC".`uB85kC]aD;q8N18Ff^?Z)4ha<<kQ`09+@-$W4=#TA$IBU1pCF?X<,Sf7TCUf2^?;ah%@8W$YcErGH%Zm,(g]9Js^O`<bZt
%qAZ<uC[S+=`LteEh)9jO;]1#JD&d(MZ[.VmlRJBZ?HneiIhsn%htKfM,Pj+[f,)8.Vblm]75f>OTCRMI./GB94mU#aGh0E'Of7)N
%M4u'eGF6NT<)?>s_C[]9U,qE`^E)IS_a4n(IP,i&]nKPSkGMXhjb.h+>W_&fKroub.''=PNkOILa%OMDg6@KjWm>gI/GaDEAg:qm
%*c.BFk=05qSu8.@H\So2g;DckqXAOk]K:="k8jD,:Y0S&WVK<tRshMGaE`>hq&slujDt0Eg6VH,^IIM_<RK$glUDi(*k/C;W-tR,
%n=SV+-YF_Q7XaXqQ(RZ'YW7X/?ps6Y09Ss(JVk_R]:$ukNf&bIol(lo$Gm1`?WW@CV5o4>2A2`6*D.4+<]k\;Wk'NZ/blG)(C&Y$
%"YQ,26'MuCnLD\[l2<*S%WXtj_62&"rI5Gk#<SXg%#=eIA,rfrljWka11'iXP4?u0,hmfe8[a^r5SRs^O^pCo%2(4=20^&d.a1H8
%QjC#R*V9aQ>IN%JMt!p7H^G$u"5VTe/DORlV`ETNKln-aHU5PQh$TiVh0:L(0<,b73&8kcWh]6QP91S7*Ctg:n?VBm<hY;8AP^Z>
%MX=U@/+DOLBGK<&_>LY+(#Jo=ql2tqQ?k-0.dm2leuIofo\-KK:[']N7%I>]Oi7+%l=#n@%!,H4T`dZhQe/7paL1:lG(#Jr0AEDO
%[@BeGZQ`:_3M?J5hQE-La*t-<@Z"1Ppfp8C.OrqS:BroGBk,c!VM85S"l'X@2-)Df^bo(jdj8sM&=cBV^@'<JNG#o,@M%W>km#Eu
%(NbXn.[T1n=l.e6pBOmf*i/X`BFA0):Ad@^.plG9l"/iR[(,QYO(>5(SA`S2,t9"\if@&WAXSX!:#aAX^m2rn)1<!?eJ%57iLA=9
%U5sB]K64]_Lah6.)6If57f+1kT%@YCI"<beXk*/u??E71>LXHj7J+5^ViZ*+9W6;,Fk)o`DI-;os$G5LrV`1bCKNPhHENlMoT=k5
%]eRG/8J2B9#]?"lhH)lQTXIpU4jnMo=XbH-f_%*n6&Dc-BU;q*K[9-?7H0>m/KL!P%eGSe;,sg?'hu;t,"AhD-g*dU$ourtk%%el
%c_.TtJ^f$_DbL_Eo=a6V2esnHGrDNtf:)#%IasmB[50IHDp<o?_nq$;?B<TgmCdd2^,K')XiGna-AZXOB5agF<I.O+5CTs)HP-CQ
%\"*S+V)3YVfJYO)I9T:t:GMn:pJ:4tZTqN<kq[2fG)__JVP!SI`if.6E51^ui'@Y[]:ZL9C\4!-``[_A?-i@d5J>IYneb:N1g@fF
%C\/=_[J@>:.@]$)/n9e*C_^p#+,hb"*QcXR]`$$i.PBLp4bD47"&fojKb,9'm+74*9C%&Ymq`4[m(4t#`qM,XN:5j>+X@a$Is#&?
%Nmg6)r.=i6/ig'K5A"^R!A+qI,rgFn%7OSR+@-bh#fPW\Wp]->NQnjdT$5A@m=&#uRNb;h?39<&aYHIh=9:il6b_afah='ikkpg8
%n&@u`AGTqJI%MZ4S`U>-U(0e1B8DS[e(^&<(bl`;UH>q#?7_OSQq3.',de1MPY3=q,SGJ9NX=9;(O^W*M5diFZ-%+1X#l7KAn$p%
%Cm=QTZKspF6MNR,KcD?T_B9_n?p`tU</K$c8HO*66S%cgl,0C'bQK9LkaYu3N'Qet"Yd=+i_`)3Fk/l_%,&KWeThe3UCa/Y!<^<Z
%OMr)3dR00U1M*,r%`5jQB&b^OaA-*b>PY`]W>WWBTNKjS_B.W+.uCZtA?&]Vr`"hEE(?Ls<q:f5TnP$r+LIq=bbo+0CV+nD8DTA:
%<XafT:<@R7WM-SZqAj!&lhTB4QVatFa,brs&Sn3Gl6pI!*=a3D4!8'@?m\Of[?dk%)_4E95.cZ&j<3"I(f+\cC9t(cOR0!i!LZL0
%JgdGAW7K8s7iKK+!CCB5/Mu;I0ki\:G:i?_AqFmAf?q,QaMQe>b!F=7N2KPCaYq1?ZI5^[8sSGBaH/#[-'&r+MZUU2;K-P_@?FV1
%)'&QNZoT*8lr":[>rTutDH$-KbV%FgIhLBf82NjKq2U/kU;s:gK`#jnpD2ntI&2`ah<f<E'a#DUYp1[B2PE*h_a]2i+s$!r#,D6u
%%c%u]Fsk=fFj2ut6I,VU7A176>1p-^Vq'iTo7<5L>undWh]p^p0\5!CpH`Y*!V%$eVY7FEPM4s3s-]^DmcqO.Z'DoD]dH=eMA]Ga
%jZSlkYNC&t$Q"kI;"`dXDMOnLS%I0O(lVU>(PR:Y\44%D>7D2XBq7?FR_E:jT]S_<d5Nf3omp\:`2`,*C"d(Dm-36#Hc:.+2Y@^E
%iiU?a'NO#ke+=(VK0lqY.A4#a9[OB4.f)Qs5q@gV&B=;F7DJWkj(j(X@JU=\@N,:0Vd7m'rpf[LnEO<Unp#Eu:OhQn_o(n]pi&:?
%+0VS\hrj=nHoq:upSZ1<ojHsTb:ibaFh[g#^<ZW1fB5@`Q:FR=_r:.agYG(Tp(i#~>
%AI9_PrivateDataEnd
